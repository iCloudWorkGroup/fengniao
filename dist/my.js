/*! WebUploader 0.0.1 */


/**
 * @fileOverview 让内部各个部件的代码可以用[amd](https://github.com/amdjs/amdjs-api/wiki/AMD)模块定义方式组织起来。
 *
 * AMD API 内部的简单不完全实现，请忽略。只有当WebUploader被合并成一个文件的时候才会引入。
 */
(function( root, factory ) {
    var modules = {},

        // 内部require, 简单不完全实现。
        // https://github.com/amdjs/amdjs-api/wiki/require
        _require = function( deps, callback ) {
            var args, len, i;

            // 如果deps不是数组，则直接返回指定module
            if ( typeof deps === 'string' ) {
                return getModule( deps );
            } else {
                args = [];
                for( len = deps.length, i = 0; i < len; i++ ) {
                    args.push( getModule( deps[ i ] ) );
                }

                return callback.apply( null, args );
            }
        },

        // 内部define，暂时不支持不指定id.
        _define = function( id, deps, factory ) {
            if ( arguments.length === 2 ) {
                factory = deps;
                deps = null;
            }

            _require( deps || [], function() {
                setModule( id, factory, arguments );
            });
        },

        // 设置module, 兼容CommonJs写法。
        setModule = function( id, factory, args ) {
            var module = {
                    exports: factory
                },
                returned;

            if ( typeof factory === 'function' ) {
                args.length || (args = [ _require, module.exports, module ]);
                returned = factory.apply( null, args );
                returned !== undefined && (module.exports = returned);
            }

            modules[ id ] = module.exports;
        },

        // 根据id获取module
        getModule = function( id ) {
            var module = modules[ id ] || root[ id ];

            if ( !module ) {
                throw new Error( '`' + id + '` is undefined' );
            }

            return module;
        },

        // 将所有modules，将路径ids装换成对象。
        exportsTo = function( obj ) {
            var key, host, parts, part, last, ucFirst;

            // make the first character upper case.
            ucFirst = function( str ) {
                return str && (str.charAt( 0 ).toUpperCase() + str.substr( 1 ));
            };

            for ( key in modules ) {
                host = obj;

                if ( !modules.hasOwnProperty( key ) ) {
                    continue;
                }

                parts = key.split('/');
                last = ucFirst( parts.pop() );

                while( (part = ucFirst( parts.shift() )) ) {
                    host[ part ] = host[ part ] || {};
                    host = host[ part ];
                }

                host[ last ] = modules[ key ];
            }

            return obj;
        },

        makeExport = function( dollar ) {
            root.__dollar = dollar;

            // exports every module.
            return exportsTo( factory( root, _define, _require ) );
        },

        origin;

    if ( typeof module === 'object' && typeof module.exports === 'object' ) {

        // For CommonJS and CommonJS-like environments where a proper window is present,
        module.exports = makeExport();
    } else if ( typeof define === 'function' && define.amd ) {

        // Allow using this built library as an AMD module
        // in another project. That other project will only
        // see this AMD call, not the internal modules in
        // the closure below.
        define([ 'jquery' ], makeExport );
    } else {

        // Browser globals case. Just assign the
        // result to a property on the global.
        origin = root.SpreadSheet;
        root.SpreadSheet = makeExport();
        root.SpreadSheet.noConflict = function() {
            root.SpreadSheet = origin;
        };
    }
})( window, function( window, define, require ) {


    /*!
     * jQuery JavaScript Library v2.1.3
     * http://jquery.com/
     *
     * Includes Sizzle.js
     * http://sizzlejs.com/
     *
     * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
     * Released under the MIT license
     * http://jquery.org/license
     *
     * Date: 2014-12-18T15:11Z
     */
    define('lib/jquery',function() {
    	return (function(window, noGlobal) {
    		// Support: Firefox 18+
    		// Can't be in strict mode, several libs including ASP.NET trace
    		// the stack via arguments.caller.callee and Firefox dies if
    		// you try to trace through "use strict" call chains. (#13335)
    		//
    
    		var arr = [];
    
    		var slice = arr.slice;
    
    		var concat = arr.concat;
    
    		var push = arr.push;
    
    		var indexOf = arr.indexOf;
    
    		var class2type = {};
    
    		var toString = class2type.toString;
    
    		var hasOwn = class2type.hasOwnProperty;
    
    		var support = {};
    
    
    
    		var
    		// Use the correct document accordingly with window argument (sandbox)
    			document = window.document,
    
    			version = "2.1.3",
    
    			// Define a local copy of jQuery
    			jQuery = function(selector, context) {
    				// The jQuery object is actually just the init constructor 'enhanced'
    				// Need init if jQuery is called (just allow error to be thrown if not included)
    				return new jQuery.fn.init(selector, context);
    			},
    
    			// Support: Android<4.1
    			// Make sure we trim BOM and NBSP
    			rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
    
    			// Matches dashed string for camelizing
    			rmsPrefix = /^-ms-/,
    			rdashAlpha = /-([\da-z])/gi,
    
    			// Used by jQuery.camelCase as callback to replace()
    			fcamelCase = function(all, letter) {
    				return letter.toUpperCase();
    			};
    
    		jQuery.fn = jQuery.prototype = {
    			// The current version of jQuery being used
    			jquery: version,
    
    			constructor: jQuery,
    
    			// Start with an empty selector
    			selector: "",
    
    			// The default length of a jQuery object is 0
    			length: 0,
    
    			toArray: function() {
    				return slice.call(this);
    			},
    
    			// Get the Nth element in the matched element set OR
    			// Get the whole matched element set as a clean array
    			get: function(num) {
    				return num != null ?
    
    					// Return just the one element from the set
    					(num < 0 ? this[num + this.length] : this[num]) :
    
    					// Return all the elements in a clean array
    					slice.call(this);
    			},
    
    			// Take an array of elements and push it onto the stack
    			// (returning the new matched element set)
    			pushStack: function(elems) {
    
    				// Build a new jQuery matched element set
    				var ret = jQuery.merge(this.constructor(), elems);
    
    				// Add the old object onto the stack (as a reference)
    				ret.prevObject = this;
    				ret.context = this.context;
    
    				// Return the newly-formed element set
    				return ret;
    			},
    
    			// Execute a callback for every element in the matched set.
    			// (You can seed the arguments with an array of args, but this is
    			// only used internally.)
    			each: function(callback, args) {
    				return jQuery.each(this, callback, args);
    			},
    
    			map: function(callback) {
    				return this.pushStack(jQuery.map(this, function(elem, i) {
    					return callback.call(elem, i, elem);
    				}));
    			},
    
    			slice: function() {
    				return this.pushStack(slice.apply(this, arguments));
    			},
    
    			first: function() {
    				return this.eq(0);
    			},
    
    			last: function() {
    				return this.eq(-1);
    			},
    
    			eq: function(i) {
    				var len = this.length,
    					j = +i + (i < 0 ? len : 0);
    				return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    			},
    
    			end: function() {
    				return this.prevObject || this.constructor(null);
    			},
    
    			// For internal use only.
    			// Behaves like an Array's method, not like a jQuery method.
    			push: push,
    			sort: arr.sort,
    			splice: arr.splice
    		};
    
    		jQuery.extend = jQuery.fn.extend = function() {
    			var options, name, src, copy, copyIsArray, clone,
    				target = arguments[0] || {},
    				i = 1,
    				length = arguments.length,
    				deep = false;
    
    			// Handle a deep copy 
    			if (typeof target === "boolean") {
    				deep = target;
    
    				// Skip the boolean and the target
    				target = arguments[i] || {};
    				i++;
    			}
    
    			// Handle case when target is a string or something (possible in deep copy)
    			if (typeof target !== "object" && !jQuery.isFunction(target)) {
    				target = {};
    			}
    
    			// Extend jQuery itself if only one argument is passed
    			if (i === length) {
    				target = this;
    				i--;
    			}
    
    			for (; i < length; i++) {
    				// Only deal with non-null/undefined values
    				if ((options = arguments[i]) != null) {
    					// Extend the base object
    					for (name in options) {
    						src = target[name];
    						copy = options[name];
    
    						// Prevent never-ending loop
    						if (target === copy) {
    							continue;
    						}
    
    						// Recurse if we're merging plain objects or arrays
    						if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
    							if (copyIsArray) {
    								copyIsArray = false;
    								clone = src && jQuery.isArray(src) ? src : [];
    
    							} else {
    								clone = src && jQuery.isPlainObject(src) ? src : {};
    							}
    
    							// Never move original objects, clone them
    							target[name] = jQuery.extend(deep, clone, copy);
    
    							// Don't bring in undefined values
    						} else if (copy !== undefined) {
    							target[name] = copy;
    						}
    					}
    				}
    			}
    
    			// Return the modified object
    			return target;
    		};
    
    		jQuery.extend({
    			// Unique for each copy of jQuery on the page
    			expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
    
    			// Assume jQuery is ready without the ready module
    			isReady: true,
    
    			error: function(msg) {
    				throw new Error(msg);
    			},
    
    			noop: function() {},
    
    			isFunction: function(obj) {
    				return jQuery.type(obj) === "function";
    			},
    
    			isArray: Array.isArray,
    
    			isWindow: function(obj) {
    				return obj != null && obj === obj.window;
    			},
    
    			isNumeric: function(obj) {
    				// parseFloat NaNs numeric-cast false positives (null|true|false|"")
    				// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    				// subtraction forces infinities to NaN
    				// adding 1 corrects loss of precision from parseFloat (#15100)
    				return !jQuery.isArray(obj) && (obj - parseFloat(obj) + 1) >= 0;
    			},
    
    			isPlainObject: function(obj) {
    				// Not plain objects:
    				// - Any object or value whose internal [[Class]] property is not "[object Object]"
    				// - DOM nodes
    				// - window
    				if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
    					return false;
    				}
    
    				if (obj.constructor &&
    					!hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
    					return false;
    				}
    
    				// If the function hasn't returned already, we're confident that
    				// |obj| is a plain object, created by {} or constructed with new Object
    				return true;
    			},
    
    			isEmptyObject: function(obj) {
    				var name;
    				for (name in obj) {
    					return false;
    				}
    				return true;
    			},
    
    			type: function(obj) {
    				if (obj == null) {
    					return obj + "";
    				}
    				// Support: Android<4.0, iOS<6 (functionish RegExp)
    				return typeof obj === "object" || typeof obj === "function" ?
    					class2type[toString.call(obj)] || "object" :
    					typeof obj;
    			},
    
    			// Evaluates a script in a global context
    			globalEval: function(code) {
    				var script,
    					indirect = eval;
    
    				code = jQuery.trim(code);
    
    				if (code) {
    					// If the code includes a valid, prologue position
    					// strict mode pragma, execute code by injecting a
    					// script tag into the document.
    					if (code.indexOf("use strict") === 1) {
    						script = document.createElement("script");
    						script.text = code;
    						document.head.appendChild(script).parentNode.removeChild(script);
    					} else {
    						// Otherwise, avoid the DOM node creation, insertion
    						// and removal by using an indirect global eval
    						indirect(code);
    					}
    				}
    			},
    
    			// Convert dashed to camelCase; used by the css and data modules
    			// Support: IE9-11+
    			// Microsoft forgot to hump their vendor prefix (#9572)
    			camelCase: function(string) {
    				return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
    			},
    
    			nodeName: function(elem, name) {
    				return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    			},
    
    			// args is for internal usage only
    			each: function(obj, callback, args) {
    				var value,
    					i = 0,
    					length = obj.length,
    					isArray = isArraylike(obj);
    
    				if (args) {
    					if (isArray) {
    						for (; i < length; i++) {
    							value = callback.apply(obj[i], args);
    
    							if (value === false) {
    								break;
    							}
    						}
    					} else {
    						for (i in obj) {
    							value = callback.apply(obj[i], args);
    
    							if (value === false) {
    								break;
    							}
    						}
    					}
    
    					// A special, fast, case for the most common use of each
    				} else {
    					if (isArray) {
    						for (; i < length; i++) {
    							value = callback.call(obj[i], i, obj[i]);
    
    							if (value === false) {
    								break;
    							}
    						}
    					} else {
    						for (i in obj) {
    							value = callback.call(obj[i], i, obj[i]);
    
    							if (value === false) {
    								break;
    							}
    						}
    					}
    				}
    
    				return obj;
    			},
    
    			// Support: Android<4.1
    			trim: function(text) {
    				return text == null ?
    					"" :
    					(text + "").replace(rtrim, "");
    			},
    
    			// results is for internal usage only
    			makeArray: function(arr, results) {
    				var ret = results || [];
    
    				if (arr != null) {
    					if (isArraylike(Object(arr))) {
    						jQuery.merge(ret,
    							typeof arr === "string" ?
    							[arr] : arr
    						);
    					} else {
    						push.call(ret, arr);
    					}
    				}
    
    				return ret;
    			},
    
    			inArray: function(elem, arr, i) {
    				return arr == null ? -1 : indexOf.call(arr, elem, i);
    			},
    
    			merge: function(first, second) {
    				var len = +second.length,
    					j = 0,
    					i = first.length;
    
    				for (; j < len; j++) {
    					first[i++] = second[j];
    				}
    
    				first.length = i;
    
    				return first;
    			},
    
    			grep: function(elems, callback, invert) {
    				var callbackInverse,
    					matches = [],
    					i = 0,
    					length = elems.length,
    					callbackExpect = !invert;
    
    				// Go through the array, only saving the items
    				// that pass the validator function
    				for (; i < length; i++) {
    					callbackInverse = !callback(elems[i], i);
    					if (callbackInverse !== callbackExpect) {
    						matches.push(elems[i]);
    					}
    				}
    
    				return matches;
    			},
    
    			// arg is for internal usage only
    			map: function(elems, callback, arg) {
    				var value,
    					i = 0,
    					length = elems.length,
    					isArray = isArraylike(elems),
    					ret = [];
    
    				// Go through the array, translating each of the items to their new values
    				if (isArray) {
    					for (; i < length; i++) {
    						value = callback(elems[i], i, arg);
    
    						if (value != null) {
    							ret.push(value);
    						}
    					}
    
    					// Go through every key on the object,
    				} else {
    					for (i in elems) {
    						value = callback(elems[i], i, arg);
    
    						if (value != null) {
    							ret.push(value);
    						}
    					}
    				}
    
    				// Flatten any nested arrays
    				return concat.apply([], ret);
    			},
    
    			// A global GUID counter for objects
    			guid: 1,
    
    			// Bind a function to a context, optionally partially applying any
    			// arguments.
    			proxy: function(fn, context) {
    				var tmp, args, proxy;
    
    				if (typeof context === "string") {
    					tmp = fn[context];
    					context = fn;
    					fn = tmp;
    				}
    
    				// Quick check to determine if target is callable, in the spec
    				// this throws a TypeError, but we will just return undefined.
    				if (!jQuery.isFunction(fn)) {
    					return undefined;
    				}
    
    				// Simulated bind
    				args = slice.call(arguments, 2);
    				proxy = function() {
    					return fn.apply(context || this, args.concat(slice.call(arguments)));
    				};
    
    				// Set the guid of unique handler to the same of original handler, so it can be removed
    				proxy.guid = fn.guid = fn.guid || jQuery.guid++;
    
    				return proxy;
    			},
    
    			now: Date.now,
    
    			// jQuery.support is not used in Core but other projects attach their
    			// properties to it so it needs to exist.
    			support: support
    		});
    
    		// Populate the class2type map
    		jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
    			class2type["[object " + name + "]"] = name.toLowerCase();
    		});
    
    		function isArraylike(obj) {
    			var length = obj.length,
    				type = jQuery.type(obj);
    
    			if (type === "function" || jQuery.isWindow(obj)) {
    				return false;
    			}
    
    			if (obj.nodeType === 1 && length) {
    				return true;
    			}
    
    			return type === "array" || length === 0 ||
    				typeof length === "number" && length > 0 && (length - 1) in obj;
    		}
    		var Sizzle =
    			/*!
    			 * Sizzle CSS Selector Engine v2.2.0-pre
    			 * http://sizzlejs.com/
    			 *
    			 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
    			 * Released under the MIT license
    			 * http://jquery.org/license
    			 *
    			 * Date: 2014-12-16
    			 */
    			(function(window) {
    
    				var i,
    					support,
    					Expr,
    					getText,
    					isXML,
    					tokenize,
    					compile,
    					select,
    					outermostContext,
    					sortInput,
    					hasDuplicate,
    
    					// Local document vars
    					setDocument,
    					document,
    					docElem,
    					documentIsHTML,
    					rbuggyQSA,
    					rbuggyMatches,
    					matches,
    					contains,
    
    					// Instance-specific data
    					expando = "sizzle" + 1 * new Date(),
    					preferredDoc = window.document,
    					dirruns = 0,
    					done = 0,
    					classCache = createCache(),
    					tokenCache = createCache(),
    					compilerCache = createCache(),
    					sortOrder = function(a, b) {
    						if (a === b) {
    							hasDuplicate = true;
    						}
    						return 0;
    					},
    
    					// General-purpose constants
    					MAX_NEGATIVE = 1 << 31,
    
    					// Instance methods
    					hasOwn = ({}).hasOwnProperty,
    					arr = [],
    					pop = arr.pop,
    					push_native = arr.push,
    					push = arr.push,
    					slice = arr.slice,
    					// Use a stripped-down indexOf as it's faster than native
    					// http://jsperf.com/thor-indexof-vs-for/5
    					indexOf = function(list, elem) {
    						var i = 0,
    							len = list.length;
    						for (; i < len; i++) {
    							if (list[i] === elem) {
    								return i;
    							}
    						}
    						return -1;
    					},
    
    					booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
    
    					// Regular expressions
    
    					// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
    					whitespace = "[\\x20\\t\\r\\n\\f]",
    					// http://www.w3.org/TR/css3-syntax/#characters
    					characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
    
    					// Loosely modeled on CSS identifier characters
    					// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
    					// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
    					identifier = characterEncoding.replace("w", "w#"),
    
    					// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
    					attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
    					// Operator (capture 2)
    					"*([*^$|!~]?=)" + whitespace +
    					// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
    					"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
    					"*\\]",
    
    					pseudos = ":(" + characterEncoding + ")(?:\\((" +
    					// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
    					// 1. quoted (capture 3; capture 4 or capture 5)
    					"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
    					// 2. simple (capture 6)
    					"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
    					// 3. anything else (capture 2)
    					".*" +
    					")\\)|)",
    
    					// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
    					rwhitespace = new RegExp(whitespace + "+", "g"),
    					rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
    
    					rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
    					rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
    
    					rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
    
    					rpseudo = new RegExp(pseudos),
    					ridentifier = new RegExp("^" + identifier + "$"),
    
    					matchExpr = {
    						"ID": new RegExp("^#(" + characterEncoding + ")"),
    						"CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
    						"TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
    						"ATTR": new RegExp("^" + attributes),
    						"PSEUDO": new RegExp("^" + pseudos),
    						"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
    							"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
    							"*(\\d+)|))" + whitespace + "*\\)|)", "i"),
    						"bool": new RegExp("^(?:" + booleans + ")$", "i"),
    						// For use in libraries implementing .is()
    						// We use this for POS matching in `select`
    						"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
    							whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
    					},
    
    					rinputs = /^(?:input|select|textarea|button)$/i,
    					rheader = /^h\d$/i,
    
    					rnative = /^[^{]+\{\s*\[native \w/,
    
    					// Easily-parseable/retrievable ID or TAG or CLASS selectors
    					rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
    
    					rsibling = /[+~]/,
    					rescape = /'|\\/g,
    
    					// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
    					runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
    					funescape = function(_, escaped, escapedWhitespace) {
    						var high = "0x" + escaped - 0x10000;
    						// NaN means non-codepoint
    						// Support: Firefox<24
    						// Workaround erroneous numeric interpretation of +"0x"
    						return high !== high || escapedWhitespace ?
    							escaped :
    							high < 0 ?
    							// BMP codepoint
    							String.fromCharCode(high + 0x10000) :
    							// Supplemental Plane codepoint (surrogate pair)
    							String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
    					},
    
    					// Used for iframes
    					// See setDocument()
    					// Removing the function wrapper causes a "Permission Denied"
    					// error in IE
    					unloadHandler = function() {
    						setDocument();
    					};
    
    				// Optimize for push.apply( _, NodeList )
    				try {
    					push.apply(
    						(arr = slice.call(preferredDoc.childNodes)),
    						preferredDoc.childNodes
    					);
    					// Support: Android<4.0
    					// Detect silently failing push.apply
    					arr[preferredDoc.childNodes.length].nodeType;
    				} catch (e) {
    					push = {
    						apply: arr.length ?
    
    							// Leverage slice if possible
    							function(target, els) {
    								push_native.apply(target, slice.call(els));
    							} :
    
    							// Support: IE<9
    							// Otherwise append directly
    							function(target, els) {
    								var j = target.length,
    									i = 0;
    								// Can't trust NodeList.length
    								while ((target[j++] = els[i++])) {}
    								target.length = j - 1;
    							}
    					};
    				}
    
    				function Sizzle(selector, context, results, seed) {
    					var match, elem, m, nodeType,
    						// QSA vars
    						i, groups, old, nid, newContext, newSelector;
    
    					if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
    						setDocument(context);
    					}
    
    					context = context || document;
    					results = results || [];
    					nodeType = context.nodeType;
    
    					if (typeof selector !== "string" || !selector ||
    						nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
    
    						return results;
    					}
    
    					if (!seed && documentIsHTML) {
    
    						// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
    						if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
    							// Speed-up: Sizzle("#ID")
    							if ((m = match[1])) {
    								if (nodeType === 9) {
    									elem = context.getElementById(m);
    									// Check parentNode to catch when Blackberry 4.6 returns
    									// nodes that are no longer in the document (jQuery #6963)
    									if (elem && elem.parentNode) {
    										// Handle the case where IE, Opera, and Webkit return items
    										// by name instead of ID
    										if (elem.id === m) {
    											results.push(elem);
    											return results;
    										}
    									} else {
    										return results;
    									}
    								} else {
    									// Context is not a document
    									if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) &&
    										contains(context, elem) && elem.id === m) {
    										results.push(elem);
    										return results;
    									}
    								}
    
    								// Speed-up: Sizzle("TAG")
    							} else if (match[2]) {
    								push.apply(results, context.getElementsByTagName(selector));
    								return results;
    
    								// Speed-up: Sizzle(".CLASS")
    							} else if ((m = match[3]) && support.getElementsByClassName) {
    								push.apply(results, context.getElementsByClassName(m));
    								return results;
    							}
    						}
    
    						// QSA path
    						if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
    							nid = old = expando;
    							newContext = context;
    							newSelector = nodeType !== 1 && selector;
    
    							// qSA works strangely on Element-rooted queries
    							// We can work around this by specifying an extra ID on the root
    							// and working up from there (Thanks to Andrew Dupont for the technique)
    							// IE 8 doesn't work on object elements
    							if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
    								groups = tokenize(selector);
    
    								if ((old = context.getAttribute("id"))) {
    									nid = old.replace(rescape, "\\$&");
    								} else {
    									context.setAttribute("id", nid);
    								}
    								nid = "[id='" + nid + "'] ";
    
    								i = groups.length;
    								while (i--) {
    									groups[i] = nid + toSelector(groups[i]);
    								}
    								newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
    								newSelector = groups.join(",");
    							}
    
    							if (newSelector) {
    								try {
    									push.apply(results,
    										newContext.querySelectorAll(newSelector)
    									);
    									return results;
    								} catch (qsaError) {} finally {
    									if (!old) {
    										context.removeAttribute("id");
    									}
    								}
    							}
    						}
    					}
    
    					// All others
    					return select(selector.replace(rtrim, "$1"), context, results, seed);
    				}
    
    				/**
    				 * Create key-value caches of limited size
    				 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
    				 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
    				 *	deleting the oldest entry
    				 */
    				function createCache() {
    					var keys = [];
    
    					function cache(key, value) {
    						// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
    						if (keys.push(key + " ") > Expr.cacheLength) {
    							// Only keep the most recent entries
    							delete cache[keys.shift()];
    						}
    						return (cache[key + " "] = value);
    					}
    					return cache;
    				}
    
    				/**
    				 * Mark a function for special use by Sizzle
    				 * @param {Function} fn The function to mark
    				 */
    				function markFunction(fn) {
    					fn[expando] = true;
    					return fn;
    				}
    
    				/**
    				 * Support testing using an element
    				 * @param {Function} fn Passed the created div and expects a boolean result
    				 */
    				function assert(fn) {
    					var div = document.createElement("div");
    
    					try {
    						return !!fn(div);
    					} catch (e) {
    						return false;
    					} finally {
    						// Remove from its parent by default
    						if (div.parentNode) {
    							div.parentNode.removeChild(div);
    						}
    						// release memory in IE
    						div = null;
    					}
    				}
    
    				/**
    				 * Adds the same handler for all of the specified attrs
    				 * @param {String} attrs Pipe-separated list of attributes
    				 * @param {Function} handler The method that will be applied
    				 */
    				function addHandle(attrs, handler) {
    					var arr = attrs.split("|"),
    						i = attrs.length;
    
    					while (i--) {
    						Expr.attrHandle[arr[i]] = handler;
    					}
    				}
    
    				/**
    				 * Checks document order of two siblings
    				 * @param {Element} a
    				 * @param {Element} b
    				 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
    				 */
    				function siblingCheck(a, b) {
    					var cur = b && a,
    						diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
    						(~b.sourceIndex || MAX_NEGATIVE) -
    						(~a.sourceIndex || MAX_NEGATIVE);
    
    					// Use IE sourceIndex if available on both nodes
    					if (diff) {
    						return diff;
    					}
    
    					// Check if b follows a
    					if (cur) {
    						while ((cur = cur.nextSibling)) {
    							if (cur === b) {
    								return -1;
    							}
    						}
    					}
    
    					return a ? 1 : -1;
    				}
    
    				/**
    				 * Returns a function to use in pseudos for input types
    				 * @param {String} type
    				 */
    				function createInputPseudo(type) {
    					return function(elem) {
    						var name = elem.nodeName.toLowerCase();
    						return name === "input" && elem.type === type;
    					};
    				}
    
    				/**
    				 * Returns a function to use in pseudos for buttons
    				 * @param {String} type
    				 */
    				function createButtonPseudo(type) {
    					return function(elem) {
    						var name = elem.nodeName.toLowerCase();
    						return (name === "input" || name === "button") && elem.type === type;
    					};
    				}
    
    				/**
    				 * Returns a function to use in pseudos for positionals
    				 * @param {Function} fn
    				 */
    				function createPositionalPseudo(fn) {
    					return markFunction(function(argument) {
    						argument = +argument;
    						return markFunction(function(seed, matches) {
    							var j,
    								matchIndexes = fn([], seed.length, argument),
    								i = matchIndexes.length;
    
    							// Match elements found at the specified indexes
    							while (i--) {
    								if (seed[(j = matchIndexes[i])]) {
    									seed[j] = !(matches[j] = seed[j]);
    								}
    							}
    						});
    					});
    				}
    
    				/**
    				 * Checks a node for validity as a Sizzle context
    				 * @param {Element|Object=} context
    				 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
    				 */
    				function testContext(context) {
    					return context && typeof context.getElementsByTagName !== "undefined" && context;
    				}
    
    				// Expose support vars for convenience
    				support = Sizzle.support = {};
    
    				/**
    				 * Detects XML nodes
    				 * @param {Element|Object} elem An element or a document
    				 * @returns {Boolean} True iff elem is a non-HTML XML node
    				 */
    				isXML = Sizzle.isXML = function(elem) {
    					// documentElement is verified for cases where it doesn't yet exist
    					// (such as loading iframes in IE - #4833)
    					var documentElement = elem && (elem.ownerDocument || elem).documentElement;
    					return documentElement ? documentElement.nodeName !== "HTML" : false;
    				};
    
    				/**
    				 * Sets document-related variables once based on the current document
    				 * @param {Element|Object} [doc] An element or document object to use to set the document
    				 * @returns {Object} Returns the current document
    				 */
    				setDocument = Sizzle.setDocument = function(node) {
    					var hasCompare, parent,
    						doc = node ? node.ownerDocument || node : preferredDoc;
    
    					// If no document and documentElement is available, return
    					if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
    						return document;
    					}
    
    					// Set our document
    					document = doc;
    					docElem = doc.documentElement;
    					parent = doc.defaultView;
    
    					// Support: IE>8
    					// If iframe document is assigned to "document" variable and if iframe has been reloaded,
    					// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
    					// IE6-8 do not support the defaultView property so parent will be undefined
    					if (parent && parent !== parent.top) {
    						// IE11 does not have attachEvent, so all must suffer
    						if (parent.addEventListener) {
    							parent.addEventListener("unload", unloadHandler, false);
    						} else if (parent.attachEvent) {
    							parent.attachEvent("onunload", unloadHandler);
    						}
    					}
    
    					/* Support tests
    					---------------------------------------------------------------------- */
    					documentIsHTML = !isXML(doc);
    
    					/* Attributes
    					---------------------------------------------------------------------- */
    
    					// Support: IE<8
    					// Verify that getAttribute really returns attributes and not properties
    					// (excepting IE8 booleans)
    					support.attributes = assert(function(div) {
    						div.className = "i";
    						return !div.getAttribute("className");
    					});
    
    					/* getElement(s)By*
    					---------------------------------------------------------------------- */
    
    					// Check if getElementsByTagName("*") returns only elements
    					support.getElementsByTagName = assert(function(div) {
    						div.appendChild(doc.createComment(""));
    						return !div.getElementsByTagName("*").length;
    					});
    
    					// Support: IE<9
    					support.getElementsByClassName = rnative.test(doc.getElementsByClassName);
    
    					// Support: IE<10
    					// Check if getElementById returns elements by name
    					// The broken getElementById methods don't pick up programatically-set names,
    					// so use a roundabout getElementsByName test
    					support.getById = assert(function(div) {
    						docElem.appendChild(div).id = expando;
    						return !doc.getElementsByName || !doc.getElementsByName(expando).length;
    					});
    
    					// ID find and filter
    					if (support.getById) {
    						Expr.find["ID"] = function(id, context) {
    							if (typeof context.getElementById !== "undefined" && documentIsHTML) {
    								var m = context.getElementById(id);
    								// Check parentNode to catch when Blackberry 4.6 returns
    								// nodes that are no longer in the document #6963
    								return m && m.parentNode ? [m] : [];
    							}
    						};
    						Expr.filter["ID"] = function(id) {
    							var attrId = id.replace(runescape, funescape);
    							return function(elem) {
    								return elem.getAttribute("id") === attrId;
    							};
    						};
    					} else {
    						// Support: IE6/7
    						// getElementById is not reliable as a find shortcut
    						delete Expr.find["ID"];
    
    						Expr.filter["ID"] = function(id) {
    							var attrId = id.replace(runescape, funescape);
    							return function(elem) {
    								var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
    								return node && node.value === attrId;
    							};
    						};
    					}
    
    					// Tag
    					Expr.find["TAG"] = support.getElementsByTagName ?
    						function(tag, context) {
    							if (typeof context.getElementsByTagName !== "undefined") {
    								return context.getElementsByTagName(tag);
    
    								// DocumentFragment nodes don't have gEBTN
    							} else if (support.qsa) {
    								return context.querySelectorAll(tag);
    							}
    						} :
    
    						function(tag, context) {
    							var elem,
    								tmp = [],
    								i = 0,
    								// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
    								results = context.getElementsByTagName(tag);
    
    							// Filter out possible comments
    							if (tag === "*") {
    								while ((elem = results[i++])) {
    									if (elem.nodeType === 1) {
    										tmp.push(elem);
    									}
    								}
    
    								return tmp;
    							}
    							return results;
    						};
    
    					// Class
    					Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
    						if (documentIsHTML) {
    							return context.getElementsByClassName(className);
    						}
    					};
    
    					/* QSA/matchesSelector
    					---------------------------------------------------------------------- */
    
    					// QSA and matchesSelector support
    
    					// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
    					rbuggyMatches = [];
    
    					// qSa(:focus) reports false when true (Chrome 21)
    					// We allow this because of a bug in IE8/9 that throws an error
    					// whenever `document.activeElement` is accessed on an iframe
    					// So, we allow :focus to pass through QSA all the time to avoid the IE error
    					// See http://bugs.jquery.com/ticket/13378
    					rbuggyQSA = [];
    
    					if ((support.qsa = rnative.test(doc.querySelectorAll))) {
    						// Build QSA regex
    						// Regex strategy adopted from Diego Perini
    						assert(function(div) {
    							// Select is set to empty string on purpose
    							// This is to test IE's treatment of not explicitly
    							// setting a boolean content attribute,
    							// since its presence should be enough
    							// http://bugs.jquery.com/ticket/12359
    							docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" +
    								"<select id='" + expando + "-\f]' msallowcapture=''>" +
    								"<option selected=''></option></select>";
    
    							// Support: IE8, Opera 11-12.16
    							// Nothing should be selected when empty strings follow ^= or $= or *=
    							// The test attribute must be unknown in Opera but "safe" for WinRT
    							// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
    							if (div.querySelectorAll("[msallowcapture^='']").length) {
    								rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
    							}
    
    							// Support: IE8
    							// Boolean attributes and "value" are not treated correctly
    							if (!div.querySelectorAll("[selected]").length) {
    								rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
    							}
    
    							// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
    							if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
    								rbuggyQSA.push("~=");
    							}
    
    							// Webkit/Opera - :checked should return selected option elements
    							// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
    							// IE8 throws error here and will not see later tests
    							if (!div.querySelectorAll(":checked").length) {
    								rbuggyQSA.push(":checked");
    							}
    
    							// Support: Safari 8+, iOS 8+
    							// https://bugs.webkit.org/show_bug.cgi?id=136851
    							// In-page `selector#id sibing-combinator selector` fails
    							if (!div.querySelectorAll("a#" + expando + "+*").length) {
    								rbuggyQSA.push(".#.+[+~]");
    							}
    						});
    
    						assert(function(div) {
    							// Support: Windows 8 Native Apps
    							// The type and name attributes are restricted during .innerHTML assignment
    							var input = doc.createElement("input");
    							input.setAttribute("type", "hidden");
    							div.appendChild(input).setAttribute("name", "D");
    
    							// Support: IE8
    							// Enforce case-sensitivity of name attribute
    							if (div.querySelectorAll("[name=d]").length) {
    								rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
    							}
    
    							// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
    							// IE8 throws error here and will not see later tests
    							if (!div.querySelectorAll(":enabled").length) {
    								rbuggyQSA.push(":enabled", ":disabled");
    							}
    
    							// Opera 10-11 does not throw on post-comma invalid pseudos
    							div.querySelectorAll("*,:x");
    							rbuggyQSA.push(",.*:");
    						});
    					}
    
    					if ((support.matchesSelector = rnative.test((matches = docElem.matches ||
    							docElem.webkitMatchesSelector ||
    							docElem.mozMatchesSelector ||
    							docElem.oMatchesSelector ||
    							docElem.msMatchesSelector)))) {
    
    						assert(function(div) {
    							// Check to see if it's possible to do matchesSelector
    							// on a disconnected node (IE 9)
    							support.disconnectedMatch = matches.call(div, "div");
    
    							// This should fail with an exception
    							// Gecko does not error, returns false instead
    							matches.call(div, "[s!='']:x");
    							rbuggyMatches.push("!=", pseudos);
    						});
    					}
    
    					rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
    					rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
    
    					/* Contains
    					---------------------------------------------------------------------- */
    					hasCompare = rnative.test(docElem.compareDocumentPosition);
    
    					// Element contains another
    					// Purposefully does not implement inclusive descendent
    					// As in, an element does not contain itself
    					contains = hasCompare || rnative.test(docElem.contains) ?
    						function(a, b) {
    							var adown = a.nodeType === 9 ? a.documentElement : a,
    								bup = b && b.parentNode;
    							return a === bup || !!(bup && bup.nodeType === 1 && (
    								adown.contains ?
    								adown.contains(bup) :
    								a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16
    							));
    						} :
    						function(a, b) {
    							if (b) {
    								while ((b = b.parentNode)) {
    									if (b === a) {
    										return true;
    									}
    								}
    							}
    							return false;
    						};
    
    					/* Sorting
    					---------------------------------------------------------------------- */
    
    					// Document order sorting
    					sortOrder = hasCompare ?
    						function(a, b) {
    
    							// Flag for duplicate removal
    							if (a === b) {
    								hasDuplicate = true;
    								return 0;
    							}
    
    							// Sort on method existence if only one input has compareDocumentPosition
    							var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
    							if (compare) {
    								return compare;
    							}
    
    							// Calculate position if both inputs belong to the same document
    							compare = (a.ownerDocument || a) === (b.ownerDocument || b) ?
    								a.compareDocumentPosition(b) :
    
    								// Otherwise we know they are disconnected
    								1;
    
    							// Disconnected nodes
    							if (compare & 1 ||
    								(!support.sortDetached && b.compareDocumentPosition(a) === compare)) {
    
    								// Choose the first element that is related to our preferred document
    								if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
    									return -1;
    								}
    								if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
    									return 1;
    								}
    
    								// Maintain original order
    								return sortInput ?
    									(indexOf(sortInput, a) - indexOf(sortInput, b)) :
    									0;
    							}
    
    							return compare & 4 ? -1 : 1;
    						} :
    						function(a, b) {
    							// Exit early if the nodes are identical
    							if (a === b) {
    								hasDuplicate = true;
    								return 0;
    							}
    
    							var cur,
    								i = 0,
    								aup = a.parentNode,
    								bup = b.parentNode,
    								ap = [a],
    								bp = [b];
    
    							// Parentless nodes are either documents or disconnected
    							if (!aup || !bup) {
    								return a === doc ? -1 :
    									b === doc ? 1 :
    									aup ? -1 :
    									bup ? 1 :
    									sortInput ?
    									(indexOf(sortInput, a) - indexOf(sortInput, b)) :
    									0;
    
    								// If the nodes are siblings, we can do a quick check
    							} else if (aup === bup) {
    								return siblingCheck(a, b);
    							}
    
    							// Otherwise we need full lists of their ancestors for comparison
    							cur = a;
    							while ((cur = cur.parentNode)) {
    								ap.unshift(cur);
    							}
    							cur = b;
    							while ((cur = cur.parentNode)) {
    								bp.unshift(cur);
    							}
    
    							// Walk down the tree looking for a discrepancy
    							while (ap[i] === bp[i]) {
    								i++;
    							}
    
    							return i ?
    								// Do a sibling check if the nodes have a common ancestor
    								siblingCheck(ap[i], bp[i]) :
    
    								// Otherwise nodes in our document sort first
    								ap[i] === preferredDoc ? -1 :
    								bp[i] === preferredDoc ? 1 :
    								0;
    						};
    
    					return doc;
    				};
    
    				Sizzle.matches = function(expr, elements) {
    					return Sizzle(expr, null, null, elements);
    				};
    
    				Sizzle.matchesSelector = function(elem, expr) {
    					// Set document vars if needed
    					if ((elem.ownerDocument || elem) !== document) {
    						setDocument(elem);
    					}
    
    					// Make sure that attribute selectors are quoted
    					expr = expr.replace(rattributeQuotes, "='$1']");
    
    					if (support.matchesSelector && documentIsHTML &&
    						(!rbuggyMatches || !rbuggyMatches.test(expr)) &&
    						(!rbuggyQSA || !rbuggyQSA.test(expr))) {
    
    						try {
    							var ret = matches.call(elem, expr);
    
    							// IE 9's matchesSelector returns false on disconnected nodes
    							if (ret || support.disconnectedMatch ||
    								// As well, disconnected nodes are said to be in a document
    								// fragment in IE 9
    								elem.document && elem.document.nodeType !== 11) {
    								return ret;
    							}
    						} catch (e) {}
    					}
    
    					return Sizzle(expr, document, null, [elem]).length > 0;
    				};
    
    				Sizzle.contains = function(context, elem) {
    					// Set document vars if needed
    					if ((context.ownerDocument || context) !== document) {
    						setDocument(context);
    					}
    					return contains(context, elem);
    				};
    
    				Sizzle.attr = function(elem, name) {
    					// Set document vars if needed
    					if ((elem.ownerDocument || elem) !== document) {
    						setDocument(elem);
    					}
    
    					var fn = Expr.attrHandle[name.toLowerCase()],
    						// Don't get fooled by Object.prototype properties (jQuery #13807)
    						val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ?
    						fn(elem, name, !documentIsHTML) :
    						undefined;
    
    					return val !== undefined ?
    						val :
    						support.attributes || !documentIsHTML ?
    						elem.getAttribute(name) :
    						(val = elem.getAttributeNode(name)) && val.specified ?
    						val.value :
    						null;
    				};
    
    				Sizzle.error = function(msg) {
    					throw new Error("Syntax error, unrecognized expression: " + msg);
    				};
    
    				/**
    				 * Document sorting and removing duplicates
    				 * @param {ArrayLike} results
    				 */
    				Sizzle.uniqueSort = function(results) {
    					var elem,
    						duplicates = [],
    						j = 0,
    						i = 0;
    
    					// Unless we *know* we can detect duplicates, assume their presence
    					hasDuplicate = !support.detectDuplicates;
    					sortInput = !support.sortStable && results.slice(0);
    					results.sort(sortOrder);
    
    					if (hasDuplicate) {
    						while ((elem = results[i++])) {
    							if (elem === results[i]) {
    								j = duplicates.push(i);
    							}
    						}
    						while (j--) {
    							results.splice(duplicates[j], 1);
    						}
    					}
    
    					// Clear input after sorting to release objects
    					// See https://github.com/jquery/sizzle/pull/225
    					sortInput = null;
    
    					return results;
    				};
    
    				/**
    				 * Utility function for retrieving the text value of an array of DOM nodes
    				 * @param {Array|Element} elem
    				 */
    				getText = Sizzle.getText = function(elem) {
    					var node,
    						ret = "",
    						i = 0,
    						nodeType = elem.nodeType;
    
    					if (!nodeType) {
    						// If no nodeType, this is expected to be an array
    						while ((node = elem[i++])) {
    							// Do not traverse comment nodes
    							ret += getText(node);
    						}
    					} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
    						// Use textContent for elements
    						// innerText usage removed for consistency of new lines (jQuery #11153)
    						if (typeof elem.textContent === "string") {
    							return elem.textContent;
    						} else {
    							// Traverse its children
    							for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
    								ret += getText(elem);
    							}
    						}
    					} else if (nodeType === 3 || nodeType === 4) {
    						return elem.nodeValue;
    					}
    					// Do not include comment or processing instruction nodes
    
    					return ret;
    				};
    
    				Expr = Sizzle.selectors = {
    
    					// Can be adjusted by the user
    					cacheLength: 50,
    
    					createPseudo: markFunction,
    
    					match: matchExpr,
    
    					attrHandle: {},
    
    					find: {},
    
    					relative: {
    						">": {
    							dir: "parentNode",
    							first: true
    						},
    						" ": {
    							dir: "parentNode"
    						},
    						"+": {
    							dir: "previousSibling",
    							first: true
    						},
    						"~": {
    							dir: "previousSibling"
    						}
    					},
    
    					preFilter: {
    						"ATTR": function(match) {
    							match[1] = match[1].replace(runescape, funescape);
    
    							// Move the given value to match[3] whether quoted or unquoted
    							match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
    
    							if (match[2] === "~=") {
    								match[3] = " " + match[3] + " ";
    							}
    
    							return match.slice(0, 4);
    						},
    
    						"CHILD": function(match) {
    							/* matches from matchExpr["CHILD"]
    								1 type (only|nth|...)
    								2 what (child|of-type)
    								3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
    								4 xn-component of xn+y argument ([+-]?\d*n|)
    								5 sign of xn-component
    								6 x of xn-component
    								7 sign of y-component
    								8 y of y-component
    							*/
    							match[1] = match[1].toLowerCase();
    
    							if (match[1].slice(0, 3) === "nth") {
    								// nth-* requires argument
    								if (!match[3]) {
    									Sizzle.error(match[0]);
    								}
    
    								// numeric x and y parameters for Expr.filter.CHILD
    								// remember that false/true cast respectively to 0/1
    								match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
    								match[5] = +((match[7] + match[8]) || match[3] === "odd");
    
    								// other types prohibit arguments
    							} else if (match[3]) {
    								Sizzle.error(match[0]);
    							}
    
    							return match;
    						},
    
    						"PSEUDO": function(match) {
    							var excess,
    								unquoted = !match[6] && match[2];
    
    							if (matchExpr["CHILD"].test(match[0])) {
    								return null;
    							}
    
    							// Accept quoted arguments as-is
    							if (match[3]) {
    								match[2] = match[4] || match[5] || "";
    
    								// Strip excess characters from unquoted arguments
    							} else if (unquoted && rpseudo.test(unquoted) &&
    								// Get excess from tokenize (recursively)
    								(excess = tokenize(unquoted, true)) &&
    								// advance to the next closing parenthesis
    								(excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
    
    								// excess is a negative index
    								match[0] = match[0].slice(0, excess);
    								match[2] = unquoted.slice(0, excess);
    							}
    
    							// Return only captures needed by the pseudo filter method (type and argument)
    							return match.slice(0, 3);
    						}
    					},
    
    					filter: {
    
    						"TAG": function(nodeNameSelector) {
    							var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
    							return nodeNameSelector === "*" ?
    								function() {
    									return true;
    								} :
    								function(elem) {
    									return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
    								};
    						},
    
    						"CLASS": function(className) {
    							var pattern = classCache[className + " "];
    
    							return pattern ||
    								(pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) &&
    								classCache(className, function(elem) {
    									return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
    								});
    						},
    
    						"ATTR": function(name, operator, check) {
    							return function(elem) {
    								var result = Sizzle.attr(elem, name);
    
    								if (result == null) {
    									return operator === "!=";
    								}
    								if (!operator) {
    									return true;
    								}
    
    								result += "";
    
    								return operator === "=" ? result === check :
    									operator === "!=" ? result !== check :
    									operator === "^=" ? check && result.indexOf(check) === 0 :
    									operator === "*=" ? check && result.indexOf(check) > -1 :
    									operator === "$=" ? check && result.slice(-check.length) === check :
    									operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 :
    									operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" :
    									false;
    							};
    						},
    
    						"CHILD": function(type, what, argument, first, last) {
    							var simple = type.slice(0, 3) !== "nth",
    								forward = type.slice(-4) !== "last",
    								ofType = what === "of-type";
    
    							return first === 1 && last === 0 ?
    
    								// Shortcut for :nth-*(n)
    								function(elem) {
    									return !!elem.parentNode;
    								} :
    
    								function(elem, context, xml) {
    									var cache, outerCache, node, diff, nodeIndex, start,
    										dir = simple !== forward ? "nextSibling" : "previousSibling",
    										parent = elem.parentNode,
    										name = ofType && elem.nodeName.toLowerCase(),
    										useCache = !xml && !ofType;
    
    									if (parent) {
    
    										// :(first|last|only)-(child|of-type)
    										if (simple) {
    											while (dir) {
    												node = elem;
    												while ((node = node[dir])) {
    													if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
    														return false;
    													}
    												}
    												// Reverse direction for :only-* (if we haven't yet done so)
    												start = dir = type === "only" && !start && "nextSibling";
    											}
    											return true;
    										}
    
    										start = [forward ? parent.firstChild : parent.lastChild];
    
    										// non-xml :nth-child(...) stores cache data on `parent`
    										if (forward && useCache) {
    											// Seek `elem` from a previously-cached index
    											outerCache = parent[expando] || (parent[expando] = {});
    											cache = outerCache[type] || [];
    											nodeIndex = cache[0] === dirruns && cache[1];
    											diff = cache[0] === dirruns && cache[2];
    											node = nodeIndex && parent.childNodes[nodeIndex];
    
    											while ((node = ++nodeIndex && node && node[dir] ||
    
    													// Fallback to seeking `elem` from the start
    													(diff = nodeIndex = 0) || start.pop())) {
    
    												// When found, cache indexes on `parent` and break
    												if (node.nodeType === 1 && ++diff && node === elem) {
    													outerCache[type] = [dirruns, nodeIndex, diff];
    													break;
    												}
    											}
    
    											// Use previously-cached element index if available
    										} else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
    											diff = cache[1];
    
    											// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
    										} else {
    											// Use the same loop as above to seek `elem` from the start
    											while ((node = ++nodeIndex && node && node[dir] ||
    													(diff = nodeIndex = 0) || start.pop())) {
    
    												if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
    													// Cache the index of each encountered element
    													if (useCache) {
    														(node[expando] || (node[expando] = {}))[type] = [dirruns, diff];
    													}
    
    													if (node === elem) {
    														break;
    													}
    												}
    											}
    										}
    
    										// Incorporate the offset, then check against cycle size
    										diff -= last;
    										return diff === first || (diff % first === 0 && diff / first >= 0);
    									}
    								};
    						},
    
    						"PSEUDO": function(pseudo, argument) {
    							// pseudo-class names are case-insensitive
    							// http://www.w3.org/TR/selectors/#pseudo-classes
    							// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
    							// Remember that setFilters inherits from pseudos
    							var args,
    								fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] ||
    								Sizzle.error("unsupported pseudo: " + pseudo);
    
    							// The user may use createPseudo to indicate that
    							// arguments are needed to create the filter function
    							// just as Sizzle does
    							if (fn[expando]) {
    								return fn(argument);
    							}
    
    							// But maintain support for old signatures
    							if (fn.length > 1) {
    								args = [pseudo, pseudo, "", argument];
    								return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ?
    									markFunction(function(seed, matches) {
    										var idx,
    											matched = fn(seed, argument),
    											i = matched.length;
    										while (i--) {
    											idx = indexOf(seed, matched[i]);
    											seed[idx] = !(matches[idx] = matched[i]);
    										}
    									}) :
    									function(elem) {
    										return fn(elem, 0, args);
    									};
    							}
    
    							return fn;
    						}
    					},
    
    					pseudos: {
    						// Potentially complex pseudos
    						"not": markFunction(function(selector) {
    							// Trim the selector passed to compile
    							// to avoid treating leading and trailing
    							// spaces as combinators
    							var input = [],
    								results = [],
    								matcher = compile(selector.replace(rtrim, "$1"));
    
    							return matcher[expando] ?
    								markFunction(function(seed, matches, context, xml) {
    									var elem,
    										unmatched = matcher(seed, null, xml, []),
    										i = seed.length;
    
    									// Match elements unmatched by `matcher`
    									while (i--) {
    										if ((elem = unmatched[i])) {
    											seed[i] = !(matches[i] = elem);
    										}
    									}
    								}) :
    								function(elem, context, xml) {
    									input[0] = elem;
    									matcher(input, null, xml, results);
    									// Don't keep the element (issue #299)
    									input[0] = null;
    									return !results.pop();
    								};
    						}),
    
    						"has": markFunction(function(selector) {
    							return function(elem) {
    								return Sizzle(selector, elem).length > 0;
    							};
    						}),
    
    						"contains": markFunction(function(text) {
    							text = text.replace(runescape, funescape);
    							return function(elem) {
    								return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
    							};
    						}),
    
    						// "Whether an element is represented by a :lang() selector
    						// is based solely on the element's language value
    						// being equal to the identifier C,
    						// or beginning with the identifier C immediately followed by "-".
    						// The matching of C against the element's language value is performed case-insensitively.
    						// The identifier C does not have to be a valid language name."
    						// http://www.w3.org/TR/selectors/#lang-pseudo
    						"lang": markFunction(function(lang) {
    							// lang value must be a valid identifier
    							if (!ridentifier.test(lang || "")) {
    								Sizzle.error("unsupported lang: " + lang);
    							}
    							lang = lang.replace(runescape, funescape).toLowerCase();
    							return function(elem) {
    								var elemLang;
    								do {
    									if ((elemLang = documentIsHTML ?
    											elem.lang :
    											elem.getAttribute("xml:lang") || elem.getAttribute("lang"))) {
    
    										elemLang = elemLang.toLowerCase();
    										return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
    									}
    								} while ((elem = elem.parentNode) && elem.nodeType === 1);
    								return false;
    							};
    						}),
    
    						// Miscellaneous
    						"target": function(elem) {
    							var hash = window.location && window.location.hash;
    							return hash && hash.slice(1) === elem.id;
    						},
    
    						"root": function(elem) {
    							return elem === docElem;
    						},
    
    						"focus": function(elem) {
    							return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
    						},
    
    						// Boolean properties
    						"enabled": function(elem) {
    							return elem.disabled === false;
    						},
    
    						"disabled": function(elem) {
    							return elem.disabled === true;
    						},
    
    						"checked": function(elem) {
    							// In CSS3, :checked should return both checked and selected elements
    							// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
    							var nodeName = elem.nodeName.toLowerCase();
    							return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
    						},
    
    						"selected": function(elem) {
    							// Accessing this property makes selected-by-default
    							// options in Safari work properly
    							if (elem.parentNode) {
    								elem.parentNode.selectedIndex;
    							}
    
    							return elem.selected === true;
    						},
    
    						// Contents
    						"empty": function(elem) {
    							// http://www.w3.org/TR/selectors/#empty-pseudo
    							// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
    							//   but not by others (comment: 8; processing instruction: 7; etc.)
    							// nodeType < 6 works because attributes (2) do not appear as children
    							for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
    								if (elem.nodeType < 6) {
    									return false;
    								}
    							}
    							return true;
    						},
    
    						"parent": function(elem) {
    							return !Expr.pseudos["empty"](elem);
    						},
    
    						// Element/input types
    						"header": function(elem) {
    							return rheader.test(elem.nodeName);
    						},
    
    						"input": function(elem) {
    							return rinputs.test(elem.nodeName);
    						},
    
    						"button": function(elem) {
    							var name = elem.nodeName.toLowerCase();
    							return name === "input" && elem.type === "button" || name === "button";
    						},
    
    						"text": function(elem) {
    							var attr;
    							return elem.nodeName.toLowerCase() === "input" &&
    								elem.type === "text" &&
    
    								// Support: IE<8
    								// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
    								((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
    						},
    
    						// Position-in-collection
    						"first": createPositionalPseudo(function() {
    							return [0];
    						}),
    
    						"last": createPositionalPseudo(function(matchIndexes, length) {
    							return [length - 1];
    						}),
    
    						"eq": createPositionalPseudo(function(matchIndexes, length, argument) {
    							return [argument < 0 ? argument + length : argument];
    						}),
    
    						"even": createPositionalPseudo(function(matchIndexes, length) {
    							var i = 0;
    							for (; i < length; i += 2) {
    								matchIndexes.push(i);
    							}
    							return matchIndexes;
    						}),
    
    						"odd": createPositionalPseudo(function(matchIndexes, length) {
    							var i = 1;
    							for (; i < length; i += 2) {
    								matchIndexes.push(i);
    							}
    							return matchIndexes;
    						}),
    
    						"lt": createPositionalPseudo(function(matchIndexes, length, argument) {
    							var i = argument < 0 ? argument + length : argument;
    							for (; --i >= 0;) {
    								matchIndexes.push(i);
    							}
    							return matchIndexes;
    						}),
    
    						"gt": createPositionalPseudo(function(matchIndexes, length, argument) {
    							var i = argument < 0 ? argument + length : argument;
    							for (; ++i < length;) {
    								matchIndexes.push(i);
    							}
    							return matchIndexes;
    						})
    					}
    				};
    
    				Expr.pseudos["nth"] = Expr.pseudos["eq"];
    
    				// Add button/input type pseudos
    				for (i in {
    						radio: true,
    						checkbox: true,
    						file: true,
    						password: true,
    						image: true
    					}) {
    					Expr.pseudos[i] = createInputPseudo(i);
    				}
    				for (i in {
    						submit: true,
    						reset: true
    					}) {
    					Expr.pseudos[i] = createButtonPseudo(i);
    				}
    
    				// Easy API for creating new setFilters
    				function setFilters() {}
    				setFilters.prototype = Expr.filters = Expr.pseudos;
    				Expr.setFilters = new setFilters();
    
    				tokenize = Sizzle.tokenize = function(selector, parseOnly) {
    					var matched, match, tokens, type,
    						soFar, groups, preFilters,
    						cached = tokenCache[selector + " "];
    
    					if (cached) {
    						return parseOnly ? 0 : cached.slice(0);
    					}
    
    					soFar = selector;
    					groups = [];
    					preFilters = Expr.preFilter;
    
    					while (soFar) {
    
    						// Comma and first run
    						if (!matched || (match = rcomma.exec(soFar))) {
    							if (match) {
    								// Don't consume trailing commas as valid
    								soFar = soFar.slice(match[0].length) || soFar;
    							}
    							groups.push((tokens = []));
    						}
    
    						matched = false;
    
    						// Combinators
    						if ((match = rcombinators.exec(soFar))) {
    							matched = match.shift();
    							tokens.push({
    								value: matched,
    								// Cast descendant combinators to space
    								type: match[0].replace(rtrim, " ")
    							});
    							soFar = soFar.slice(matched.length);
    						}
    
    						// Filters
    						for (type in Expr.filter) {
    							if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] ||
    									(match = preFilters[type](match)))) {
    								matched = match.shift();
    								tokens.push({
    									value: matched,
    									type: type,
    									matches: match
    								});
    								soFar = soFar.slice(matched.length);
    							}
    						}
    
    						if (!matched) {
    							break;
    						}
    					}
    
    					// Return the length of the invalid excess
    					// if we're just parsing
    					// Otherwise, throw an error or return tokens
    					return parseOnly ?
    						soFar.length :
    						soFar ?
    						Sizzle.error(selector) :
    						// Cache the tokens
    						tokenCache(selector, groups).slice(0);
    				};
    
    				function toSelector(tokens) {
    					var i = 0,
    						len = tokens.length,
    						selector = "";
    					for (; i < len; i++) {
    						selector += tokens[i].value;
    					}
    					return selector;
    				}
    
    				function addCombinator(matcher, combinator, base) {
    					var dir = combinator.dir,
    						checkNonElements = base && dir === "parentNode",
    						doneName = done++;
    
    					return combinator.first ?
    						// Check against closest ancestor/preceding element
    						function(elem, context, xml) {
    							while ((elem = elem[dir])) {
    								if (elem.nodeType === 1 || checkNonElements) {
    									return matcher(elem, context, xml);
    								}
    							}
    						} :
    
    						// Check against all ancestor/preceding elements
    						function(elem, context, xml) {
    							var oldCache, outerCache,
    								newCache = [dirruns, doneName];
    
    							// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
    							if (xml) {
    								while ((elem = elem[dir])) {
    									if (elem.nodeType === 1 || checkNonElements) {
    										if (matcher(elem, context, xml)) {
    											return true;
    										}
    									}
    								}
    							} else {
    								while ((elem = elem[dir])) {
    									if (elem.nodeType === 1 || checkNonElements) {
    										outerCache = elem[expando] || (elem[expando] = {});
    										if ((oldCache = outerCache[dir]) &&
    											oldCache[0] === dirruns && oldCache[1] === doneName) {
    
    											// Assign to newCache so results back-propagate to previous elements
    											return (newCache[2] = oldCache[2]);
    										} else {
    											// Reuse newcache so results back-propagate to previous elements
    											outerCache[dir] = newCache;
    
    											// A match means we're done; a fail means we have to keep checking
    											if ((newCache[2] = matcher(elem, context, xml))) {
    												return true;
    											}
    										}
    									}
    								}
    							}
    						};
    				}
    
    				function elementMatcher(matchers) {
    					return matchers.length > 1 ?
    						function(elem, context, xml) {
    							var i = matchers.length;
    							while (i--) {
    								if (!matchers[i](elem, context, xml)) {
    									return false;
    								}
    							}
    							return true;
    						} :
    						matchers[0];
    				}
    
    				function multipleContexts(selector, contexts, results) {
    					var i = 0,
    						len = contexts.length;
    					for (; i < len; i++) {
    						Sizzle(selector, contexts[i], results);
    					}
    					return results;
    				}
    
    				function condense(unmatched, map, filter, context, xml) {
    					var elem,
    						newUnmatched = [],
    						i = 0,
    						len = unmatched.length,
    						mapped = map != null;
    
    					for (; i < len; i++) {
    						if ((elem = unmatched[i])) {
    							if (!filter || filter(elem, context, xml)) {
    								newUnmatched.push(elem);
    								if (mapped) {
    									map.push(i);
    								}
    							}
    						}
    					}
    
    					return newUnmatched;
    				}
    
    				function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
    					if (postFilter && !postFilter[expando]) {
    						postFilter = setMatcher(postFilter);
    					}
    					if (postFinder && !postFinder[expando]) {
    						postFinder = setMatcher(postFinder, postSelector);
    					}
    					return markFunction(function(seed, results, context, xml) {
    						var temp, i, elem,
    							preMap = [],
    							postMap = [],
    							preexisting = results.length,
    
    							// Get initial elements from seed or context
    							elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
    
    							// Prefilter to get matcher input, preserving a map for seed-results synchronization
    							matcherIn = preFilter && (seed || !selector) ?
    							condense(elems, preMap, preFilter, context, xml) :
    							elems,
    
    							matcherOut = matcher ?
    							// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
    							postFinder || (seed ? preFilter : preexisting || postFilter) ?
    
    							// ...intermediate processing is necessary
    							[] :
    
    							// ...otherwise use results directly
    							results :
    							matcherIn;
    
    						// Find primary matches
    						if (matcher) {
    							matcher(matcherIn, matcherOut, context, xml);
    						}
    
    						// Apply postFilter
    						if (postFilter) {
    							temp = condense(matcherOut, postMap);
    							postFilter(temp, [], context, xml);
    
    							// Un-match failing elements by moving them back to matcherIn
    							i = temp.length;
    							while (i--) {
    								if ((elem = temp[i])) {
    									matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
    								}
    							}
    						}
    
    						if (seed) {
    							if (postFinder || preFilter) {
    								if (postFinder) {
    									// Get the final matcherOut by condensing this intermediate into postFinder contexts
    									temp = [];
    									i = matcherOut.length;
    									while (i--) {
    										if ((elem = matcherOut[i])) {
    											// Restore matcherIn since elem is not yet a final match
    											temp.push((matcherIn[i] = elem));
    										}
    									}
    									postFinder(null, (matcherOut = []), temp, xml);
    								}
    
    								// Move matched elements from seed to results to keep them synchronized
    								i = matcherOut.length;
    								while (i--) {
    									if ((elem = matcherOut[i]) &&
    										(temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
    
    										seed[temp] = !(results[temp] = elem);
    									}
    								}
    							}
    
    							// Add elements to results, through postFinder if defined
    						} else {
    							matcherOut = condense(
    								matcherOut === results ?
    								matcherOut.splice(preexisting, matcherOut.length) :
    								matcherOut
    							);
    							if (postFinder) {
    								postFinder(null, results, matcherOut, xml);
    							} else {
    								push.apply(results, matcherOut);
    							}
    						}
    					});
    				}
    
    				function matcherFromTokens(tokens) {
    					var checkContext, matcher, j,
    						len = tokens.length,
    						leadingRelative = Expr.relative[tokens[0].type],
    						implicitRelative = leadingRelative || Expr.relative[" "],
    						i = leadingRelative ? 1 : 0,
    
    						// The foundational matcher ensures that elements are reachable from top-level context(s)
    						matchContext = addCombinator(function(elem) {
    							return elem === checkContext;
    						}, implicitRelative, true),
    						matchAnyContext = addCombinator(function(elem) {
    							return indexOf(checkContext, elem) > -1;
    						}, implicitRelative, true),
    						matchers = [function(elem, context, xml) {
    							var ret = (!leadingRelative && (xml || context !== outermostContext)) || (
    								(checkContext = context).nodeType ?
    								matchContext(elem, context, xml) :
    								matchAnyContext(elem, context, xml));
    							// Avoid hanging onto element (issue #299)
    							checkContext = null;
    							return ret;
    						}];
    
    					for (; i < len; i++) {
    						if ((matcher = Expr.relative[tokens[i].type])) {
    							matchers = [addCombinator(elementMatcher(matchers), matcher)];
    						} else {
    							matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
    
    							// Return special upon seeing a positional matcher
    							if (matcher[expando]) {
    								// Find the next relative operator (if any) for proper handling
    								j = ++i;
    								for (; j < len; j++) {
    									if (Expr.relative[tokens[j].type]) {
    										break;
    									}
    								}
    								return setMatcher(
    									i > 1 && elementMatcher(matchers),
    									i > 1 && toSelector(
    										// If the preceding token was a descendant combinator, insert an implicit any-element `*`
    										tokens.slice(0, i - 1).concat({
    											value: tokens[i - 2].type === " " ? "*" : ""
    										})
    									).replace(rtrim, "$1"),
    									matcher,
    									i < j && matcherFromTokens(tokens.slice(i, j)),
    									j < len && matcherFromTokens((tokens = tokens.slice(j))),
    									j < len && toSelector(tokens)
    								);
    							}
    							matchers.push(matcher);
    						}
    					}
    
    					return elementMatcher(matchers);
    				}
    
    				function matcherFromGroupMatchers(elementMatchers, setMatchers) {
    					var bySet = setMatchers.length > 0,
    						byElement = elementMatchers.length > 0,
    						superMatcher = function(seed, context, xml, results, outermost) {
    							var elem, j, matcher,
    								matchedCount = 0,
    								i = "0",
    								unmatched = seed && [],
    								setMatched = [],
    								contextBackup = outermostContext,
    								// We must always have either seed elements or outermost context
    								elems = seed || byElement && Expr.find["TAG"]("*", outermost),
    								// Use integer dirruns iff this is the outermost matcher
    								dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
    								len = elems.length;
    
    							if (outermost) {
    								outermostContext = context !== document && context;
    							}
    
    							// Add elements passing elementMatchers directly to results
    							// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
    							// Support: IE<9, Safari
    							// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
    							for (; i !== len && (elem = elems[i]) != null; i++) {
    								if (byElement && elem) {
    									j = 0;
    									while ((matcher = elementMatchers[j++])) {
    										if (matcher(elem, context, xml)) {
    											results.push(elem);
    											break;
    										}
    									}
    									if (outermost) {
    										dirruns = dirrunsUnique;
    									}
    								}
    
    								// Track unmatched elements for set filters
    								if (bySet) {
    									// They will have gone through all possible matchers
    									if ((elem = !matcher && elem)) {
    										matchedCount--;
    									}
    
    									// Lengthen the array for every element, matched or not
    									if (seed) {
    										unmatched.push(elem);
    									}
    								}
    							}
    
    							// Apply set filters to unmatched elements
    							matchedCount += i;
    							if (bySet && i !== matchedCount) {
    								j = 0;
    								while ((matcher = setMatchers[j++])) {
    									matcher(unmatched, setMatched, context, xml);
    								}
    
    								if (seed) {
    									// Reintegrate element matches to eliminate the need for sorting
    									if (matchedCount > 0) {
    										while (i--) {
    											if (!(unmatched[i] || setMatched[i])) {
    												setMatched[i] = pop.call(results);
    											}
    										}
    									}
    
    									// Discard index placeholder values to get only actual matches
    									setMatched = condense(setMatched);
    								}
    
    								// Add matches to results
    								push.apply(results, setMatched);
    
    								// Seedless set matches succeeding multiple successful matchers stipulate sorting
    								if (outermost && !seed && setMatched.length > 0 &&
    									(matchedCount + setMatchers.length) > 1) {
    
    									Sizzle.uniqueSort(results);
    								}
    							}
    
    							// Override manipulation of globals by nested matchers
    							if (outermost) {
    								dirruns = dirrunsUnique;
    								outermostContext = contextBackup;
    							}
    
    							return unmatched;
    						};
    
    					return bySet ?
    						markFunction(superMatcher) :
    						superMatcher;
    				}
    
    				compile = Sizzle.compile = function(selector, match /* Internal Use Only */ ) {
    					var i,
    						setMatchers = [],
    						elementMatchers = [],
    						cached = compilerCache[selector + " "];
    
    					if (!cached) {
    						// Generate a function of recursive functions that can be used to check each element
    						if (!match) {
    							match = tokenize(selector);
    						}
    						i = match.length;
    						while (i--) {
    							cached = matcherFromTokens(match[i]);
    							if (cached[expando]) {
    								setMatchers.push(cached);
    							} else {
    								elementMatchers.push(cached);
    							}
    						}
    
    						// Cache the compiled function
    						cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
    
    						// Save selector and tokenization
    						cached.selector = selector;
    					}
    					return cached;
    				};
    
    				/**
    				 * A low-level selection function that works with Sizzle's compiled
    				 *  selector functions
    				 * @param {String|Function} selector A selector or a pre-compiled
    				 *  selector function built with Sizzle.compile
    				 * @param {Element} context
    				 * @param {Array} [results]
    				 * @param {Array} [seed] A set of elements to match against
    				 */
    				select = Sizzle.select = function(selector, context, results, seed) {
    					var i, tokens, token, type, find,
    						compiled = typeof selector === "function" && selector,
    						match = !seed && tokenize((selector = compiled.selector || selector));
    
    					results = results || [];
    
    					// Try to minimize operations if there is no seed and only one group
    					if (match.length === 1) {
    
    						// Take a shortcut and set the context if the root selector is an ID
    						tokens = match[0] = match[0].slice(0);
    						if (tokens.length > 2 && (token = tokens[0]).type === "ID" &&
    							support.getById && context.nodeType === 9 && documentIsHTML &&
    							Expr.relative[tokens[1].type]) {
    
    							context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
    							if (!context) {
    								return results;
    
    								// Precompiled matchers will still verify ancestry, so step up a level
    							} else if (compiled) {
    								context = context.parentNode;
    							}
    
    							selector = selector.slice(tokens.shift().value.length);
    						}
    
    						// Fetch a seed set for right-to-left matching
    						i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
    						while (i--) {
    							token = tokens[i];
    
    							// Abort if we hit a combinator
    							if (Expr.relative[(type = token.type)]) {
    								break;
    							}
    							if ((find = Expr.find[type])) {
    								// Search, expanding context for leading sibling combinators
    								if ((seed = find(
    										token.matches[0].replace(runescape, funescape),
    										rsibling.test(tokens[0].type) && testContext(context.parentNode) || context
    									))) {
    
    									// If seed is empty or no tokens remain, we can return early
    									tokens.splice(i, 1);
    									selector = seed.length && toSelector(tokens);
    									if (!selector) {
    										push.apply(results, seed);
    										return results;
    									}
    
    									break;
    								}
    							}
    						}
    					}
    
    					// Compile and execute a filtering function if one is not provided
    					// Provide `match` to avoid retokenization if we modified the selector above
    					(compiled || compile(selector, match))(
    						seed,
    						context, !documentIsHTML,
    						results,
    						rsibling.test(selector) && testContext(context.parentNode) || context
    					);
    					return results;
    				};
    
    				// One-time assignments
    
    				// Sort stability
    				support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
    
    				// Support: Chrome 14-35+
    				// Always assume duplicates if they aren't passed to the comparison function
    				support.detectDuplicates = !!hasDuplicate;
    
    				// Initialize against the default document
    				setDocument();
    
    				// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
    				// Detached nodes confoundingly follow *each other*
    				support.sortDetached = assert(function(div1) {
    					// Should return 1, but returns 4 (following)
    					return div1.compareDocumentPosition(document.createElement("div")) & 1;
    				});
    
    				// Support: IE<8
    				// Prevent attribute/property "interpolation"
    				// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
    				if (!assert(function(div) {
    						div.innerHTML = "<a href='#'></a>";
    						return div.firstChild.getAttribute("href") === "#";
    					})) {
    					addHandle("type|href|height|width", function(elem, name, isXML) {
    						if (!isXML) {
    							return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
    						}
    					});
    				}
    
    				// Support: IE<9
    				// Use defaultValue in place of getAttribute("value")
    				if (!support.attributes || !assert(function(div) {
    						div.innerHTML = "<input/>";
    						div.firstChild.setAttribute("value", "");
    						return div.firstChild.getAttribute("value") === "";
    					})) {
    					addHandle("value", function(elem, name, isXML) {
    						if (!isXML && elem.nodeName.toLowerCase() === "input") {
    							return elem.defaultValue;
    						}
    					});
    				}
    
    				// Support: IE<9
    				// Use getAttributeNode to fetch booleans when getAttribute lies
    				if (!assert(function(div) {
    						return div.getAttribute("disabled") == null;
    					})) {
    					addHandle(booleans, function(elem, name, isXML) {
    						var val;
    						if (!isXML) {
    							return elem[name] === true ? name.toLowerCase() :
    								(val = elem.getAttributeNode(name)) && val.specified ?
    								val.value :
    								null;
    						}
    					});
    				}
    
    				return Sizzle;
    
    			})(window);
    
    
    
    		jQuery.find = Sizzle;
    		jQuery.expr = Sizzle.selectors;
    		jQuery.expr[":"] = jQuery.expr.pseudos;
    		jQuery.unique = Sizzle.uniqueSort;
    		jQuery.text = Sizzle.getText;
    		jQuery.isXMLDoc = Sizzle.isXML;
    		jQuery.contains = Sizzle.contains;
    
    
    
    		var rneedsContext = jQuery.expr.match.needsContext;
    
    		var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);
    
    
    
    		var risSimple = /^.[^:#\[\.,]*$/;
    
    		// Implement the identical functionality for filter and not
    		function winnow(elements, qualifier, not) {
    			if (jQuery.isFunction(qualifier)) {
    				return jQuery.grep(elements, function(elem, i) {
    					/* jshint -W018 */
    					return !!qualifier.call(elem, i, elem) !== not;
    				});
    
    			}
    
    			if (qualifier.nodeType) {
    				return jQuery.grep(elements, function(elem) {
    					return (elem === qualifier) !== not;
    				});
    
    			}
    
    			if (typeof qualifier === "string") {
    				if (risSimple.test(qualifier)) {
    					return jQuery.filter(qualifier, elements, not);
    				}
    
    				qualifier = jQuery.filter(qualifier, elements);
    			}
    
    			return jQuery.grep(elements, function(elem) {
    				return (indexOf.call(qualifier, elem) >= 0) !== not;
    			});
    		}
    
    		jQuery.filter = function(expr, elems, not) {
    			var elem = elems[0];
    
    			if (not) {
    				expr = ":not(" + expr + ")";
    			}
    
    			return elems.length === 1 && elem.nodeType === 1 ?
    				jQuery.find.matchesSelector(elem, expr) ? [elem] : [] :
    				jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
    					return elem.nodeType === 1;
    				}));
    		};
    
    		jQuery.fn.extend({
    			find: function(selector) {
    				var i,
    					len = this.length,
    					ret = [],
    					self = this;
    
    				if (typeof selector !== "string") {
    					return this.pushStack(jQuery(selector).filter(function() {
    						for (i = 0; i < len; i++) {
    							if (jQuery.contains(self[i], this)) {
    								return true;
    							}
    						}
    					}));
    				}
    
    				for (i = 0; i < len; i++) {
    					jQuery.find(selector, self[i], ret);
    				}
    
    				// Needed because $( selector, context ) becomes $( context ).find( selector )
    				ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
    				ret.selector = this.selector ? this.selector + " " + selector : selector;
    				return ret;
    			},
    			filter: function(selector) {
    				return this.pushStack(winnow(this, selector || [], false));
    			},
    			not: function(selector) {
    				return this.pushStack(winnow(this, selector || [], true));
    			},
    			is: function(selector) {
    				return !!winnow(
    					this,
    
    					// If this is a positional/relative selector, check membership in the returned set
    					// so $("p:first").is("p:last") won't return true for a doc with two "p".
    					typeof selector === "string" && rneedsContext.test(selector) ?
    					jQuery(selector) :
    					selector || [],
    					false
    				).length;
    			}
    		});
    
    
    		// Initialize a jQuery object
    
    
    		// A central reference to the root jQuery(document)
    		var rootjQuery,
    
    			// A simple way to check for HTML strings
    			// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    			// Strict HTML recognition (#11290: must start with <)
    			rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
    
    			init = jQuery.fn.init = function(selector, context) {
    				var match, elem;
    
    				// HANDLE: $(""), $(null), $(undefined), $(false)
    				if (!selector) {
    					return this;
    				}
    
    				// Handle HTML strings
    				if (typeof selector === "string") {
    					if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
    						// Assume that strings that start and end with <> are HTML and skip the regex check
    						match = [null, selector, null];
    
    					} else {
    						match = rquickExpr.exec(selector);
    					}
    
    					// Match html or make sure no context is specified for #id
    					if (match && (match[1] || !context)) {
    
    						// HANDLE: $(html) -> $(array)
    						if (match[1]) {
    							context = context instanceof jQuery ? context[0] : context;
    
    							// Option to run scripts is true for back-compat
    							// Intentionally let the error be thrown if parseHTML is not present
    							jQuery.merge(this, jQuery.parseHTML(
    								match[1],
    								context && context.nodeType ? context.ownerDocument || context : document,
    								true
    							));
    
    							// HANDLE: $(html, props)
    							if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
    								for (match in context) {
    									// Properties of context are called as methods if possible
    									if (jQuery.isFunction(this[match])) {
    										this[match](context[match]);
    
    										// ...and otherwise set as attributes
    									} else {
    										this.attr(match, context[match]);
    									}
    								}
    							}
    
    							return this;
    
    							// HANDLE: $(#id)
    						} else {
    							elem = document.getElementById(match[2]);
    
    							// Support: Blackberry 4.6
    							// gEBID returns nodes no longer in the document (#6963)
    							if (elem && elem.parentNode) {
    								// Inject the element directly into the jQuery object
    								this.length = 1;
    								this[0] = elem;
    							}
    
    							this.context = document;
    							this.selector = selector;
    							return this;
    						}
    
    						// HANDLE: $(expr, $(...))
    					} else if (!context || context.jquery) {
    						return (context || rootjQuery).find(selector);
    
    						// HANDLE: $(expr, context)
    						// (which is just equivalent to: $(context).find(expr)
    					} else {
    						return this.constructor(context).find(selector);
    					}
    
    					// HANDLE: $(DOMElement)
    				} else if (selector.nodeType) {
    					this.context = this[0] = selector;
    					this.length = 1;
    					return this;
    
    					// HANDLE: $(function)
    					// Shortcut for document ready
    				} else if (jQuery.isFunction(selector)) {
    					return typeof rootjQuery.ready !== "undefined" ?
    						rootjQuery.ready(selector) :
    						// Execute immediately if ready is not present
    						selector(jQuery);
    				}
    
    				if (selector.selector !== undefined) {
    					this.selector = selector.selector;
    					this.context = selector.context;
    				}
    
    				return jQuery.makeArray(selector, this);
    			};
    
    		// Give the init function the jQuery prototype for later instantiation
    		init.prototype = jQuery.fn;
    
    		// Initialize central reference
    		rootjQuery = jQuery(document);
    
    
    		var rparentsprev = /^(?:parents|prev(?:Until|All))/,
    			// Methods guaranteed to produce a unique set when starting from a unique set
    			guaranteedUnique = {
    				children: true,
    				contents: true,
    				next: true,
    				prev: true
    			};
    
    		jQuery.extend({
    			dir: function(elem, dir, until) {
    				var matched = [],
    					truncate = until !== undefined;
    
    				while ((elem = elem[dir]) && elem.nodeType !== 9) {
    					if (elem.nodeType === 1) {
    						if (truncate && jQuery(elem).is(until)) {
    							break;
    						}
    						matched.push(elem);
    					}
    				}
    				return matched;
    			},
    
    			sibling: function(n, elem) {
    				var matched = [];
    
    				for (; n; n = n.nextSibling) {
    					if (n.nodeType === 1 && n !== elem) {
    						matched.push(n);
    					}
    				}
    
    				return matched;
    			}
    		});
    
    		jQuery.fn.extend({
    			has: function(target) {
    				var targets = jQuery(target, this),
    					l = targets.length;
    
    				return this.filter(function() {
    					var i = 0;
    					for (; i < l; i++) {
    						if (jQuery.contains(this, targets[i])) {
    							return true;
    						}
    					}
    				});
    			},
    
    			closest: function(selectors, context) {
    				var cur,
    					i = 0,
    					l = this.length,
    					matched = [],
    					pos = rneedsContext.test(selectors) || typeof selectors !== "string" ?
    					jQuery(selectors, context || this.context) :
    					0;
    
    				for (; i < l; i++) {
    					for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
    						// Always skip document fragments
    						if (cur.nodeType < 11 && (pos ?
    								pos.index(cur) > -1 :
    
    								// Don't pass non-elements to Sizzle
    								cur.nodeType === 1 &&
    								jQuery.find.matchesSelector(cur, selectors))) {
    
    							matched.push(cur);
    							break;
    						}
    					}
    				}
    
    				return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
    			},
    
    			// Determine the position of an element within the set
    			index: function(elem) {
    
    				// No argument, return index in parent
    				if (!elem) {
    					return (this[0] && this[0].parentNode) ? this.first().prevAll().length : -1;
    				}
    
    				// Index in selector
    				if (typeof elem === "string") {
    					return indexOf.call(jQuery(elem), this[0]);
    				}
    
    				// Locate the position of the desired element
    				return indexOf.call(this,
    
    					// If it receives a jQuery object, the first element is used
    					elem.jquery ? elem[0] : elem
    				);
    			},
    
    			add: function(selector, context) {
    				return this.pushStack(
    					jQuery.unique(
    						jQuery.merge(this.get(), jQuery(selector, context))
    					)
    				);
    			},
    
    			addBack: function(selector) {
    				return this.add(selector == null ?
    					this.prevObject : this.prevObject.filter(selector)
    				);
    			}
    		});
    
    		function sibling(cur, dir) {
    			while ((cur = cur[dir]) && cur.nodeType !== 1) {}
    			return cur;
    		}
    
    		jQuery.each({
    			parent: function(elem) {
    				var parent = elem.parentNode;
    				return parent && parent.nodeType !== 11 ? parent : null;
    			},
    			parents: function(elem) {
    				return jQuery.dir(elem, "parentNode");
    			},
    			parentsUntil: function(elem, i, until) {
    				return jQuery.dir(elem, "parentNode", until);
    			},
    			next: function(elem) {
    				return sibling(elem, "nextSibling");
    			},
    			prev: function(elem) {
    				return sibling(elem, "previousSibling");
    			},
    			nextAll: function(elem) {
    				return jQuery.dir(elem, "nextSibling");
    			},
    			prevAll: function(elem) {
    				return jQuery.dir(elem, "previousSibling");
    			},
    			nextUntil: function(elem, i, until) {
    				return jQuery.dir(elem, "nextSibling", until);
    			},
    			prevUntil: function(elem, i, until) {
    				return jQuery.dir(elem, "previousSibling", until);
    			},
    			siblings: function(elem) {
    				return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
    			},
    			children: function(elem) {
    				return jQuery.sibling(elem.firstChild);
    			},
    			contents: function(elem) {
    				return elem.contentDocument || jQuery.merge([], elem.childNodes);
    			}
    		}, function(name, fn) {
    			jQuery.fn[name] = function(until, selector) {
    				var matched = jQuery.map(this, fn, until);
    
    				if (name.slice(-5) !== "Until") {
    					selector = until;
    				}
    
    				if (selector && typeof selector === "string") {
    					matched = jQuery.filter(selector, matched);
    				}
    
    				if (this.length > 1) {
    					// Remove duplicates
    					if (!guaranteedUnique[name]) {
    						jQuery.unique(matched);
    					}
    
    					// Reverse order for parents* and prev-derivatives
    					if (rparentsprev.test(name)) {
    						matched.reverse();
    					}
    				}
    
    				return this.pushStack(matched);
    			};
    		});
    		var rnotwhite = (/\S+/g);
    
    
    
    		// String to Object options format cache
    		var optionsCache = {};
    
    		// Convert String-formatted options into Object-formatted ones and store in cache
    		function createOptions(options) {
    			var object = optionsCache[options] = {};
    			jQuery.each(options.match(rnotwhite) || [], function(_, flag) {
    				object[flag] = true;
    			});
    			return object;
    		}
    
    		/*
    		 * Create a callback list using the following parameters:
    		 *
    		 *	options: an optional list of space-separated options that will change how
    		 *			the callback list behaves or a more traditional option object
    		 *
    		 * By default a callback list will act like an event callback list and can be
    		 * "fired" multiple times.
    		 *
    		 * Possible options:
    		 *
    		 *	once:			will ensure the callback list can only be fired once (like a Deferred)
    		 *
    		 *	memory:			will keep track of previous values and will call any callback added
    		 *					after the list has been fired right away with the latest "memorized"
    		 *					values (like a Deferred)
    		 *
    		 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
    		 *
    		 *	stopOnFalse:	interrupt callings when a callback returns false
    		 *
    		 */
    		jQuery.Callbacks = function(options) {
    
    			// Convert options from String-formatted to Object-formatted if needed
    			// (we check in cache first)
    			options = typeof options === "string" ?
    				(optionsCache[options] || createOptions(options)) :
    				jQuery.extend({}, options);
    
    			var // Last fire value (for non-forgettable lists)
    				memory,
    				// Flag to know if list was already fired
    				fired,
    				// Flag to know if list is currently firing
    				firing,
    				// First callback to fire (used internally by add and fireWith)
    				firingStart,
    				// End of the loop when firing
    				firingLength,
    				// Index of currently firing callback (modified by remove if needed)
    				firingIndex,
    				// Actual callback list
    				list = [],
    				// Stack of fire calls for repeatable lists
    				stack = !options.once && [],
    				// Fire callbacks
    				fire = function(data) {
    					memory = options.memory && data;
    					fired = true;
    					firingIndex = firingStart || 0;
    					firingStart = 0;
    					firingLength = list.length;
    					firing = true;
    					for (; list && firingIndex < firingLength; firingIndex++) {
    						if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
    							memory = false; // To prevent further calls using add
    							break;
    						}
    					}
    					firing = false;
    					if (list) {
    						if (stack) {
    							if (stack.length) {
    								fire(stack.shift());
    							}
    						} else if (memory) {
    							list = [];
    						} else {
    							self.disable();
    						}
    					}
    				},
    				// Actual Callbacks object
    				self = {
    					// Add a callback or a collection of callbacks to the list
    					add: function() {
    						if (list) {
    							// First, we save the current length
    							var start = list.length;
    							(function add(args) {
    								jQuery.each(args, function(_, arg) {
    									var type = jQuery.type(arg);
    									if (type === "function") {
    										if (!options.unique || !self.has(arg)) {
    											list.push(arg);
    										}
    									} else if (arg && arg.length && type !== "string") {
    										// Inspect recursively
    										add(arg);
    									}
    								});
    							})(arguments);
    							// Do we need to add the callbacks to the
    							// current firing batch?
    							if (firing) {
    								firingLength = list.length;
    								// With memory, if we're not firing then
    								// we should call right away
    							} else if (memory) {
    								firingStart = start;
    								fire(memory);
    							}
    						}
    						return this;
    					},
    					// Remove a callback from the list
    					remove: function() {
    						if (list) {
    							jQuery.each(arguments, function(_, arg) {
    								var index;
    								while ((index = jQuery.inArray(arg, list, index)) > -1) {
    									list.splice(index, 1);
    									// Handle firing indexes
    									if (firing) {
    										if (index <= firingLength) {
    											firingLength--;
    										}
    										if (index <= firingIndex) {
    											firingIndex--;
    										}
    									}
    								}
    							});
    						}
    						return this;
    					},
    					// Check if a given callback is in the list.
    					// If no argument is given, return whether or not list has callbacks attached.
    					has: function(fn) {
    						return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
    					},
    					// Remove all callbacks from the list
    					empty: function() {
    						list = [];
    						firingLength = 0;
    						return this;
    					},
    					// Have the list do nothing anymore
    					disable: function() {
    						list = stack = memory = undefined;
    						return this;
    					},
    					// Is it disabled?
    					disabled: function() {
    						return !list;
    					},
    					// Lock the list in its current state
    					lock: function() {
    						stack = undefined;
    						if (!memory) {
    							self.disable();
    						}
    						return this;
    					},
    					// Is it locked?
    					locked: function() {
    						return !stack;
    					},
    					// Call all callbacks with the given context and arguments
    					fireWith: function(context, args) {
    						if (list && (!fired || stack)) {
    							args = args || [];
    							args = [context, args.slice ? args.slice() : args];
    							if (firing) {
    								stack.push(args);
    							} else {
    								fire(args);
    							}
    						}
    						return this;
    					},
    					// Call all the callbacks with the given arguments
    					fire: function() {
    						self.fireWith(this, arguments);
    						return this;
    					},
    					// To know if the callbacks have already been called at least once
    					fired: function() {
    						return !!fired;
    					}
    				};
    
    			return self;
    		};
    
    
    		jQuery.extend({
    
    			Deferred: function(func) {
    				var tuples = [
    						// action, add listener, listener list, final state
    						["resolve", "done", jQuery.Callbacks("once memory"), "resolved"],
    						["reject", "fail", jQuery.Callbacks("once memory"), "rejected"],
    						["notify", "progress", jQuery.Callbacks("memory")]
    					],
    					state = "pending",
    					promise = {
    						state: function() {
    							return state;
    						},
    						always: function() {
    							deferred.done(arguments).fail(arguments);
    							return this;
    						},
    						then: function( /* fnDone, fnFail, fnProgress */ ) {
    							var fns = arguments;
    							return jQuery.Deferred(function(newDefer) {
    								jQuery.each(tuples, function(i, tuple) {
    									var fn = jQuery.isFunction(fns[i]) && fns[i];
    									// deferred[ done | fail | progress ] for forwarding actions to newDefer
    									deferred[tuple[1]](function() {
    										var returned = fn && fn.apply(this, arguments);
    										if (returned && jQuery.isFunction(returned.promise)) {
    											returned.promise()
    												.done(newDefer.resolve)
    												.fail(newDefer.reject)
    												.progress(newDefer.notify);
    										} else {
    											newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
    										}
    									});
    								});
    								fns = null;
    							}).promise();
    						},
    						// Get a promise for this deferred
    						// If obj is provided, the promise aspect is added to the object
    						promise: function(obj) {
    							return obj != null ? jQuery.extend(obj, promise) : promise;
    						}
    					},
    					deferred = {};
    
    				// Keep pipe for back-compat
    				promise.pipe = promise.then;
    
    				// Add list-specific methods
    				jQuery.each(tuples, function(i, tuple) {
    					var list = tuple[2],
    						stateString = tuple[3];
    
    					// promise[ done | fail | progress ] = list.add
    					promise[tuple[1]] = list.add;
    
    					// Handle state
    					if (stateString) {
    						list.add(function() {
    							// state = [ resolved | rejected ]
    							state = stateString;
    
    							// [ reject_list | resolve_list ].disable; progress_list.lock
    						}, tuples[i ^ 1][2].disable, tuples[2][2].lock);
    					}
    
    					// deferred[ resolve | reject | notify ]
    					deferred[tuple[0]] = function() {
    						deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
    						return this;
    					};
    					deferred[tuple[0] + "With"] = list.fireWith;
    				});
    
    				// Make the deferred a promise
    				promise.promise(deferred);
    
    				// Call given func if any
    				if (func) {
    					func.call(deferred, deferred);
    				}
    
    				// All done!
    				return deferred;
    			},
    
    			// Deferred helper
    			when: function(subordinate /* , ..., subordinateN */ ) {
    				var i = 0,
    					resolveValues = slice.call(arguments),
    					length = resolveValues.length,
    
    					// the count of uncompleted subordinates
    					remaining = length !== 1 || (subordinate && jQuery.isFunction(subordinate.promise)) ? length : 0,
    
    					// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
    					deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
    
    					// Update function for both resolve and progress values
    					updateFunc = function(i, contexts, values) {
    						return function(value) {
    							contexts[i] = this;
    							values[i] = arguments.length > 1 ? slice.call(arguments) : value;
    							if (values === progressValues) {
    								deferred.notifyWith(contexts, values);
    							} else if (!(--remaining)) {
    								deferred.resolveWith(contexts, values);
    							}
    						};
    					},
    
    					progressValues, progressContexts, resolveContexts;
    
    				// Add listeners to Deferred subordinates; treat others as resolved
    				if (length > 1) {
    					progressValues = new Array(length);
    					progressContexts = new Array(length);
    					resolveContexts = new Array(length);
    					for (; i < length; i++) {
    						if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
    							resolveValues[i].promise()
    								.done(updateFunc(i, resolveContexts, resolveValues))
    								.fail(deferred.reject)
    								.progress(updateFunc(i, progressContexts, progressValues));
    						} else {
    							--remaining;
    						}
    					}
    				}
    
    				// If we're not waiting on anything, resolve the master
    				if (!remaining) {
    					deferred.resolveWith(resolveContexts, resolveValues);
    				}
    
    				return deferred.promise();
    			}
    		});
    
    
    		// The deferred used on DOM ready
    		var readyList;
    
    		jQuery.fn.ready = function(fn) {
    			// Add the callback
    			jQuery.ready.promise().done(fn);
    
    			return this;
    		};
    
    		jQuery.extend({
    			// Is the DOM ready to be used? Set to true once it occurs.
    			isReady: false,
    
    			// A counter to track how many items to wait for before
    			// the ready event fires. See #6781
    			readyWait: 1,
    
    			// Hold (or release) the ready event
    			holdReady: function(hold) {
    				if (hold) {
    					jQuery.readyWait++;
    				} else {
    					jQuery.ready(true);
    				}
    			},
    
    			// Handle when the DOM is ready
    			ready: function(wait) {
    
    				// Abort if there are pending holds or we're already ready
    				if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
    					return;
    				}
    
    				// Remember that the DOM is ready
    				jQuery.isReady = true;
    
    				// If a normal DOM Ready event fired, decrement, and wait if need be
    				if (wait !== true && --jQuery.readyWait > 0) {
    					return;
    				}
    
    				// If there are functions bound, to execute
    				readyList.resolveWith(document, [jQuery]);
    
    				// Trigger any bound ready events
    				if (jQuery.fn.triggerHandler) {
    					jQuery(document).triggerHandler("ready");
    					jQuery(document).off("ready");
    				}
    			}
    		});
    
    		/**
    		 * The ready event handler and self cleanup method
    		 */
    		function completed() {
    			document.removeEventListener("DOMContentLoaded", completed, false);
    			window.removeEventListener("load", completed, false);
    			jQuery.ready();
    		}
    
    		jQuery.ready.promise = function(obj) {
    			if (!readyList) {
    
    				readyList = jQuery.Deferred();
    
    				// Catch cases where $(document).ready() is called after the browser event has already occurred.
    				// We once tried to use readyState "interactive" here, but it caused issues like the one
    				// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
    				if (document.readyState === "complete") {
    					// Handle it asynchronously to allow scripts the opportunity to delay ready
    					setTimeout(jQuery.ready);
    
    				} else {
    
    					// Use the handy event callback
    					document.addEventListener("DOMContentLoaded", completed, false);
    
    					// A fallback to window.onload, that will always work
    					window.addEventListener("load", completed, false);
    				}
    			}
    			return readyList.promise(obj);
    		};
    
    		// Kick off the DOM ready check even if the user does not
    		jQuery.ready.promise();
    
    
    
    		// Multifunctional method to get and set values of a collection
    		// The value/s can optionally be executed if it's a function
    		var access = jQuery.access = function(elems, fn, key, value, chainable, emptyGet, raw) {
    			var i = 0,
    				len = elems.length,
    				bulk = key == null;
    
    			// Sets many values
    			if (jQuery.type(key) === "object") {
    				chainable = true;
    				for (i in key) {
    					jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
    				}
    
    				// Sets one value
    			} else if (value !== undefined) {
    				chainable = true;
    
    				if (!jQuery.isFunction(value)) {
    					raw = true;
    				}
    
    				if (bulk) {
    					// Bulk operations run against the entire set
    					if (raw) {
    						fn.call(elems, value);
    						fn = null;
    
    						// ...except when executing function values
    					} else {
    						bulk = fn;
    						fn = function(elem, key, value) {
    							return bulk.call(jQuery(elem), value);
    						};
    					}
    				}
    
    				if (fn) {
    					for (; i < len; i++) {
    						fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
    					}
    				}
    			}
    
    			return chainable ?
    				elems :
    
    				// Gets
    				bulk ?
    				fn.call(elems) :
    				len ? fn(elems[0], key) : emptyGet;
    		};
    
    
    		/**
    		 * Determines whether an object can have data
    		 */
    		jQuery.acceptData = function(owner) {
    			// Accepts only:
    			//  - Node
    			//    - Node.ELEMENT_NODE
    			//    - Node.DOCUMENT_NODE
    			//  - Object
    			//    - Any
    			/* jshint -W018 */
    			return owner.nodeType === 1 || owner.nodeType === 9 || !(+owner.nodeType);
    		};
    
    
    		function Data() {
    			// Support: Android<4,
    			// Old WebKit does not have Object.preventExtensions/freeze method,
    			// return new empty object instead with no [[set]] accessor
    			Object.defineProperty(this.cache = {}, 0, {
    				get: function() {
    					return {};
    				}
    			});
    
    			this.expando = jQuery.expando + Data.uid++;
    		}
    
    		Data.uid = 1;
    		Data.accepts = jQuery.acceptData;
    
    		Data.prototype = {
    			key: function(owner) {
    				// We can accept data for non-element nodes in modern browsers,
    				// but we should not, see #8335.
    				// Always return the key for a frozen object.
    				if (!Data.accepts(owner)) {
    					return 0;
    				}
    
    				var descriptor = {},
    					// Check if the owner object already has a cache key
    					unlock = owner[this.expando];
    
    				// If not, create one
    				if (!unlock) {
    					unlock = Data.uid++;
    
    					// Secure it in a non-enumerable, non-writable property
    					try {
    						descriptor[this.expando] = {
    							value: unlock
    						};
    						Object.defineProperties(owner, descriptor);
    
    						// Support: Android<4
    						// Fallback to a less secure definition
    					} catch (e) {
    						descriptor[this.expando] = unlock;
    						jQuery.extend(owner, descriptor);
    					}
    				}
    
    				// Ensure the cache object
    				if (!this.cache[unlock]) {
    					this.cache[unlock] = {};
    				}
    
    				return unlock;
    			},
    			set: function(owner, data, value) {
    				var prop,
    					// There may be an unlock assigned to this node,
    					// if there is no entry for this "owner", create one inline
    					// and set the unlock as though an owner entry had always existed
    					unlock = this.key(owner),
    					cache = this.cache[unlock];
    
    				// Handle: [ owner, key, value ] args
    				if (typeof data === "string") {
    					cache[data] = value;
    
    					// Handle: [ owner, { properties } ] args
    				} else {
    					// Fresh assignments by object are shallow copied
    					if (jQuery.isEmptyObject(cache)) {
    						f(this.cache[unlock], data);
    						// Otherwise, copy the properties one-by-one to the cache object
    					} else {
    						for (prop in data) {
    							cache[prop] = data[prop];
    						}
    					}
    				}
    				return cache;
    			},
    			get: function(owner, key) {
    				// Either a valid cache is found, or will be created.
    				// New caches will be created and the unlock returned,
    				// allowing direct access to the newly created
    				// empty data object. A valid owner object must be provided.
    				var cache = this.cache[this.key(owner)];
    
    				return key === undefined ?
    					cache : cache[key];
    			},
    			access: function(owner, key, value) {
    				var stored;
    				// In cases where either:
    				//
    				//   1. No key was specified
    				//   2. A string key was specified, but no value provided
    				//
    				// Take the "read" path and allow the get method to determine
    				// which value to return, respectively either:
    				//
    				//   1. The entire cache object
    				//   2. The data stored at the key
    				//
    				if (key === undefined ||
    					((key && typeof key === "string") && value === undefined)) {
    
    					stored = this.get(owner, key);
    
    					return stored !== undefined ?
    						stored : this.get(owner, jQuery.camelCase(key));
    				}
    
    				// [*]When the key is not a string, or both a key and value
    				// are specified, set or extend (existing objects) with either:
    				//
    				//   1. An object of properties
    				//   2. A key and value
    				//
    				this.set(owner, key, value);
    
    				// Since the "set" path can have two possible entry points
    				// return the expected data based on which path was taken[*]
    				return value !== undefined ? value : key;
    			},
    			remove: function(owner, key) {
    				var i, name, camel,
    					unlock = this.key(owner),
    					cache = this.cache[unlock];
    
    				if (key === undefined) {
    					this.cache[unlock] = {};
    
    				} else {
    					// Support array or space separated string of keys
    					if (jQuery.isArray(key)) {
    						// If "name" is an array of keys...
    						// When data is initially created, via ("key", "val") signature,
    						// keys will be converted to camelCase.
    						// Since there is no way to tell _how_ a key was added, remove
    						// both plain key and camelCase key. #12786
    						// This will only penalize the array argument path.
    						name = key.concat(key.map(jQuery.camelCase));
    					} else {
    						camel = jQuery.camelCase(key);
    						// Try the string as a key before any manipulation
    						if (key in cache) {
    							name = [key, camel];
    						} else {
    							// If a key with the spaces exists, use it.
    							// Otherwise, create an array by matching non-whitespace
    							name = camel;
    							name = name in cache ?
    								[name] : (name.match(rnotwhite) || []);
    						}
    					}
    
    					i = name.length;
    					while (i--) {
    						delete cache[name[i]];
    					}
    				}
    			},
    			hasData: function(owner) {
    				return !jQuery.isEmptyObject(
    					this.cache[owner[this.expando]] || {}
    				);
    			},
    			discard: function(owner) {
    				if (owner[this.expando]) {
    					delete this.cache[owner[this.expando]];
    				}
    			}
    		};
    		var data_priv = new Data();
    
    		var data_user = new Data();
    
    
    
    		//	Implementation Summary
    		//
    		//	1. Enforce API surface and semantic compatibility with 1.9.x branch
    		//	2. Improve the module's maintainability by reducing the storage
    		//		paths to a single mechanism.
    		//	3. Use the same single mechanism to support "private" and "user" data.
    		//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
    		//	5. Avoid exposing implementation details on user objects (eg. expando properties)
    		//	6. Provide a clear path for implementation upgrade to WeakMap in 2014
    
    		var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
    			rmultiDash = /([A-Z])/g;
    
    		function dataAttr(elem, key, data) {
    			var name;
    
    			// If nothing was found internally, try to fetch any
    			// data from the HTML5 data-* attribute
    			if (data === undefined && elem.nodeType === 1) {
    				name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
    				data = elem.getAttribute(name);
    
    				if (typeof data === "string") {
    					try {
    						data = data === "true" ? true :
    							data === "false" ? false :
    							data === "null" ? null :
    							// Only convert to a number if it doesn't change the string
    							+data + "" === data ? +data :
    							rbrace.test(data) ? jQuery.parseJSON(data) :
    							data;
    					} catch (e) {}
    
    					// Make sure we set the data so it isn't changed later
    					data_user.set(elem, key, data);
    				} else {
    					data = undefined;
    				}
    			}
    			return data;
    		}
    
    		jQuery.extend({
    			hasData: function(elem) {
    				return data_user.hasData(elem) || data_priv.hasData(elem);
    			},
    
    			data: function(elem, name, data) {
    				return data_user.access(elem, name, data);
    			},
    
    			removeData: function(elem, name) {
    				data_user.remove(elem, name);
    			},
    
    			// TODO: Now that all calls to _data and _removeData have been replaced
    			// with direct calls to data_priv methods, these can be deprecated.
    			_data: function(elem, name, data) {
    				return data_priv.access(elem, name, data);
    			},
    
    			_removeData: function(elem, name) {
    				data_priv.remove(elem, name);
    			}
    		});
    
    		jQuery.fn.extend({
    			data: function(key, value) {
    				var i, name, data,
    					elem = this[0],
    					attrs = elem && elem.attributes;
    
    				// Gets all values
    				if (key === undefined) {
    					if (this.length) {
    						data = data_user.get(elem);
    
    						if (elem.nodeType === 1 && !data_priv.get(elem, "hasDataAttrs")) {
    							i = attrs.length;
    							while (i--) {
    
    								// Support: IE11+
    								// The attrs elements can be null (#14894)
    								if (attrs[i]) {
    									name = attrs[i].name;
    									if (name.indexOf("data-") === 0) {
    										name = jQuery.camelCase(name.slice(5));
    										dataAttr(elem, name, data[name]);
    									}
    								}
    							}
    							data_priv.set(elem, "hasDataAttrs", true);
    						}
    					}
    
    					return data;
    				}
    
    				// Sets multiple values
    				if (typeof key === "object") {
    					return this.each(function() {
    						data_user.set(this, key);
    					});
    				}
    
    				return access(this, function(value) {
    					var data,
    						camelKey = jQuery.camelCase(key);
    
    					// The calling jQuery object (element matches) is not empty
    					// (and therefore has an element appears at this[ 0 ]) and the
    					// `value` parameter was not undefined. An empty jQuery object
    					// will result in `undefined` for elem = this[ 0 ] which will
    					// throw an exception if an attempt to read a data cache is made.
    					if (elem && value === undefined) {
    						// Attempt to get data from the cache
    						// with the key as-is
    						data = data_user.get(elem, key);
    						if (data !== undefined) {
    							return data;
    						}
    
    						// Attempt to get data from the cache
    						// with the key camelized
    						data = data_user.get(elem, camelKey);
    						if (data !== undefined) {
    							return data;
    						}
    
    						// Attempt to "discover" the data in
    						// HTML5 custom data-* attrs
    						data = dataAttr(elem, camelKey, undefined);
    						if (data !== undefined) {
    							return data;
    						}
    
    						// We tried really hard, but the data doesn't exist.
    						return;
    					}
    
    					// Set the data...
    					this.each(function() {
    						// First, attempt to store a copy or reference of any
    						// data that might've been store with a camelCased key.
    						var data = data_user.get(this, camelKey);
    
    						// For HTML5 data-* attribute interop, we have to
    						// store property names with dashes in a camelCase form.
    						// This might not apply to all properties...*
    						data_user.set(this, camelKey, value);
    
    						// *... In the case of properties that might _actually_
    						// have dashes, we need to also store a copy of that
    						// unchanged property.
    						if (key.indexOf("-") !== -1 && data !== undefined) {
    							data_user.set(this, key, value);
    						}
    					});
    				}, null, value, arguments.length > 1, null, true);
    			},
    
    			removeData: function(key) {
    				return this.each(function() {
    					data_user.remove(this, key);
    				});
    			}
    		});
    
    
    		jQuery.extend({
    			queue: function(elem, type, data) {
    				var queue;
    
    				if (elem) {
    					type = (type || "fx") + "queue";
    					queue = data_priv.get(elem, type);
    
    					// Speed up dequeue by getting out quickly if this is just a lookup
    					if (data) {
    						if (!queue || jQuery.isArray(data)) {
    							queue = data_priv.access(elem, type, jQuery.makeArray(data));
    						} else {
    							queue.push(data);
    						}
    					}
    					return queue || [];
    				}
    			},
    
    			dequeue: function(elem, type) {
    				type = type || "fx";
    
    				var queue = jQuery.queue(elem, type),
    					startLength = queue.length,
    					fn = queue.shift(),
    					hooks = jQuery._queueHooks(elem, type),
    					next = function() {
    						jQuery.dequeue(elem, type);
    					};
    
    				// If the fx queue is dequeued, always remove the progress sentinel
    				if (fn === "inprogress") {
    					fn = queue.shift();
    					startLength--;
    				}
    
    				if (fn) {
    
    					// Add a progress sentinel to prevent the fx queue from being
    					// automatically dequeued
    					if (type === "fx") {
    						queue.unshift("inprogress");
    					}
    
    					// Clear up the last queue stop function
    					delete hooks.stop;
    					fn.call(elem, next, hooks);
    				}
    
    				if (!startLength && hooks) {
    					hooks.empty.fire();
    				}
    			},
    
    			// Not public - generate a queueHooks object, or return the current one
    			_queueHooks: function(elem, type) {
    				var key = type + "queueHooks";
    				return data_priv.get(elem, key) || data_priv.access(elem, key, {
    					empty: jQuery.Callbacks("once memory").add(function() {
    						data_priv.remove(elem, [type + "queue", key]);
    					})
    				});
    			}
    		});
    
    		jQuery.fn.extend({
    			queue: function(type, data) {
    				var setter = 2;
    
    				if (typeof type !== "string") {
    					data = type;
    					type = "fx";
    					setter--;
    				}
    
    				if (arguments.length < setter) {
    					return jQuery.queue(this[0], type);
    				}
    
    				return data === undefined ?
    					this :
    					this.each(function() {
    						var queue = jQuery.queue(this, type, data);
    
    						// Ensure a hooks for this queue
    						jQuery._queueHooks(this, type);
    
    						if (type === "fx" && queue[0] !== "inprogress") {
    							jQuery.dequeue(this, type);
    						}
    					});
    			},
    			dequeue: function(type) {
    				return this.each(function() {
    					jQuery.dequeue(this, type);
    				});
    			},
    			clearQueue: function(type) {
    				return this.queue(type || "fx", []);
    			},
    			// Get a promise resolved when queues of a certain type
    			// are emptied (fx is the type by default)
    			promise: function(type, obj) {
    				var tmp,
    					count = 1,
    					defer = jQuery.Deferred(),
    					elements = this,
    					i = this.length,
    					resolve = function() {
    						if (!(--count)) {
    							defer.resolveWith(elements, [elements]);
    						}
    					};
    
    				if (typeof type !== "string") {
    					obj = type;
    					type = undefined;
    				}
    				type = type || "fx";
    
    				while (i--) {
    					tmp = data_priv.get(elements[i], type + "queueHooks");
    					if (tmp && tmp.empty) {
    						count++;
    						tmp.empty.add(resolve);
    					}
    				}
    				resolve();
    				return defer.promise(obj);
    			}
    		});
    		var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;
    
    		var cssExpand = ["Top", "Right", "Bottom", "Left"];
    
    		var isHidden = function(elem, el) {
    			// isHidden might be called from jQuery#filter function;
    			// in that case, element will be second argument
    			elem = el || elem;
    			return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
    		};
    
    		var rcheckableType = (/^(?:checkbox|radio)$/i);
    
    
    
    		(function() {
    			var fragment = document.createDocumentFragment(),
    				div = fragment.appendChild(document.createElement("div")),
    				input = document.createElement("input");
    
    			// Support: Safari<=5.1
    			// Check state lost if the name is set (#11217)
    			// Support: Windows Web Apps (WWA)
    			// `name` and `type` must use .setAttribute for WWA (#14901)
    			input.setAttribute("type", "radio");
    			input.setAttribute("checked", "checked");
    			input.setAttribute("name", "t");
    
    			div.appendChild(input);
    
    			// Support: Safari<=5.1, Android<4.2
    			// Older WebKit doesn't clone checked state correctly in fragments
    			support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
    
    			// Support: IE<=11+
    			// Make sure textarea (and checkbox) defaultValue is properly cloned
    			div.innerHTML = "<textarea>x</textarea>";
    			support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
    		})();
    		var strundefined = typeof undefined;
    
    
    
    		support.focusinBubbles = "onfocusin" in window;
    
    
    		var
    			rkeyEvent = /^key/,
    			rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
    			rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
    			rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
    
    		function returnTrue() {
    			return true;
    		}
    
    		function returnFalse() {
    			return false;
    		}
    
    		function safeActiveElement() {
    			try {
    				return document.activeElement;
    			} catch (err) {}
    		}
    
    		/*
    		 * Helper functions for managing events -- not part of the public interface.
    		 * Props to Dean Edwards' addEvent library for many of the ideas.
    		 */
    		jQuery.event = {
    
    			global: {},
    
    			add: function(elem, types, handler, data, selector) {
    
    				var handleObjIn, eventHandle, tmp,
    					events, t, handleObj,
    					special, handlers, type, namespaces, origType,
    					elemData = data_priv.get(elem);
    
    				// Don't attach events to noData or text/comment nodes (but allow plain objects)
    				if (!elemData) {
    					return;
    				}
    
    				// Caller can pass in an object of custom data in lieu of the handler
    				if (handler.handler) {
    					handleObjIn = handler;
    					handler = handleObjIn.handler;
    					selector = handleObjIn.selector;
    				}
    
    				// Make sure that the handler has a unique ID, used to find/remove it later
    				if (!handler.guid) {
    					handler.guid = jQuery.guid++;
    				}
    
    				// Init the element's event structure and main handler, if this is the first
    				if (!(events = elemData.events)) {
    					events = elemData.events = {};
    				}
    				if (!(eventHandle = elemData.handle)) {
    					eventHandle = elemData.handle = function(e) {
    						// Discard the second event of a jQuery.event.trigger() and
    						// when an event is called after a page has unloaded
    						return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
    							jQuery.event.dispatch.apply(elem, arguments) : undefined;
    					};
    				}
    
    				// Handle multiple events separated by a space
    				types = (types || "").match(rnotwhite) || [""];
    				t = types.length;
    				while (t--) {
    					tmp = rtypenamespace.exec(types[t]) || [];
    					type = origType = tmp[1];
    					namespaces = (tmp[2] || "").split(".").sort();
    
    					// There *must* be a type, no attaching namespace-only handlers
    					if (!type) {
    						continue;
    					}
    
    					// If event changes its type, use the special event handlers for the changed type
    					special = jQuery.event.special[type] || {};
    
    					// If selector defined, determine special event api type, otherwise given type
    					type = (selector ? special.delegateType : special.bindType) || type;
    
    					// Update special based on newly reset type
    					special = jQuery.event.special[type] || {};
    
    					// handleObj is passed to all event handlers
    					handleObj = jQuery.extend({
    						type: type,
    						origType: origType,
    						data: data,
    						handler: handler,
    						guid: handler.guid,
    						selector: selector,
    						needsContext: selector && jQuery.expr.match.needsContext.test(selector),
    						namespace: namespaces.join(".")
    					}, handleObjIn);
    
    					// Init the event handler queue if we're the first
    					if (!(handlers = events[type])) {
    						handlers = events[type] = [];
    						handlers.delegateCount = 0;
    
    						// Only use addEventListener if the special events handler returns false
    						if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
    							if (elem.addEventListener) {
    								elem.addEventListener(type, eventHandle, false);
    							}
    						}
    					}
    
    					if (special.add) {
    						special.add.call(elem, handleObj);
    
    						if (!handleObj.handler.guid) {
    							handleObj.handler.guid = handler.guid;
    						}
    					}
    
    					// Add to the element's handler list, delegates in front
    					if (selector) {
    						handlers.splice(handlers.delegateCount++, 0, handleObj);
    					} else {
    						handlers.push(handleObj);
    					}
    
    					// Keep track of which events have ever been used, for event optimization
    					jQuery.event.global[type] = true;
    				}
    
    			},
    
    			// Detach an event or set of events from an element
    			remove: function(elem, types, handler, selector, mappedTypes) {
    
    				var j, origCount, tmp,
    					events, t, handleObj,
    					special, handlers, type, namespaces, origType,
    					elemData = data_priv.hasData(elem) && data_priv.get(elem);
    
    				if (!elemData || !(events = elemData.events)) {
    					return;
    				}
    
    				// Once for each type.namespace in types; type may be omitted
    				types = (types || "").match(rnotwhite) || [""];
    				t = types.length;
    				while (t--) {
    					tmp = rtypenamespace.exec(types[t]) || [];
    					type = origType = tmp[1];
    					namespaces = (tmp[2] || "").split(".").sort();
    
    					// Unbind all events (on this namespace, if provided) for the element
    					if (!type) {
    						for (type in events) {
    							jQuery.event.remove(elem, type + types[t], handler, selector, true);
    						}
    						continue;
    					}
    
    					special = jQuery.event.special[type] || {};
    					type = (selector ? special.delegateType : special.bindType) || type;
    					handlers = events[type] || [];
    					tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
    
    					// Remove matching events
    					origCount = j = handlers.length;
    					while (j--) {
    						handleObj = handlers[j];
    
    						if ((mappedTypes || origType === handleObj.origType) &&
    							(!handler || handler.guid === handleObj.guid) &&
    							(!tmp || tmp.test(handleObj.namespace)) &&
    							(!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
    							handlers.splice(j, 1);
    
    							if (handleObj.selector) {
    								handlers.delegateCount--;
    							}
    							if (special.remove) {
    								special.remove.call(elem, handleObj);
    							}
    						}
    					}
    
    					// Remove generic event handler if we removed something and no more handlers exist
    					// (avoids potential for endless recursion during removal of special event handlers)
    					if (origCount && !handlers.length) {
    						if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
    							jQuery.removeEvent(elem, type, elemData.handle);
    						}
    
    						delete events[type];
    					}
    				}
    
    				// Remove the expando if it's no longer used
    				if (jQuery.isEmptyObject(events)) {
    					delete elemData.handle;
    					data_priv.remove(elem, "events");
    				}
    			},
    
    			trigger: function(event, data, elem, onlyHandlers) {
    
    				var i, cur, tmp, bubbleType, ontype, handle, special,
    					eventPath = [elem || document],
    					type = hasOwn.call(event, "type") ? event.type : event,
    					namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
    
    				cur = tmp = elem = elem || document;
    
    				// Don't do events on text and comment nodes
    				if (elem.nodeType === 3 || elem.nodeType === 8) {
    					return;
    				}
    
    				// focus/blur morphs to focusin/out; ensure we're not firing them right now
    				if (rfocusMorph.test(type + jQuery.event.triggered)) {
    					return;
    				}
    
    				if (type.indexOf(".") >= 0) {
    					// Namespaced trigger; create a regexp to match event type in handle()
    					namespaces = type.split(".");
    					type = namespaces.shift();
    					namespaces.sort();
    				}
    				ontype = type.indexOf(":") < 0 && "on" + type;
    
    				// Caller can pass in a jQuery.Event object, Object, or just an event type string
    				event = event[jQuery.expando] ?
    					event :
    					new jQuery.Event(type, typeof event === "object" && event);
    
    				// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
    				event.isTrigger = onlyHandlers ? 2 : 3;
    				event.namespace = namespaces.join(".");
    				event.namespace_re = event.namespace ?
    					new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") :
    					null;
    
    				// Clean up the event in case it is being reused
    				event.result = undefined;
    				if (!event.target) {
    					event.target = elem;
    				}
    
    				// Clone any incoming data and prepend the event, creating the handler arg list
    				data = data == null ?
    					[event] :
    					jQuery.makeArray(data, [event]);
    
    				// Allow special events to draw outside the lines
    				special = jQuery.event.special[type] || {};
    				if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
    					return;
    				}
    
    				// Determine event propagation path in advance, per W3C events spec (#9951)
    				// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
    				if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
    
    					bubbleType = special.delegateType || type;
    					if (!rfocusMorph.test(bubbleType + type)) {
    						cur = cur.parentNode;
    					}
    					for (; cur; cur = cur.parentNode) {
    						eventPath.push(cur);
    						tmp = cur;
    					}
    
    					// Only add window if we got to document (e.g., not plain obj or detached DOM)
    					if (tmp === (elem.ownerDocument || document)) {
    						eventPath.push(tmp.defaultView || tmp.parentWindow || window);
    					}
    				}
    
    				// Fire handlers on the event path
    				i = 0;
    				while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
    
    					event.type = i > 1 ?
    						bubbleType :
    						special.bindType || type;
    
    					// jQuery handler
    					handle = (data_priv.get(cur, "events") || {})[event.type] && data_priv.get(cur, "handle");
    					if (handle) {
    						handle.apply(cur, data);
    					}
    
    					// Native handler
    					handle = ontype && cur[ontype];
    					if (handle && handle.apply && jQuery.acceptData(cur)) {
    						event.result = handle.apply(cur, data);
    						if (event.result === false) {
    							event.preventDefault();
    						}
    					}
    				}
    				event.type = type;
    
    				// If nobody prevented the default action, do it now
    				if (!onlyHandlers && !event.isDefaultPrevented()) {
    
    					if ((!special._default || special._default.apply(eventPath.pop(), data) === false) &&
    						jQuery.acceptData(elem)) {
    
    						// Call a native DOM method on the target with the same name name as the event.
    						// Don't do default actions on window, that's where global variables be (#6170)
    						if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
    
    							// Don't re-trigger an onFOO event when we call its FOO() method
    							tmp = elem[ontype];
    
    							if (tmp) {
    								elem[ontype] = null;
    							}
    
    							// Prevent re-triggering of the same event, since we already bubbled it above
    							jQuery.event.triggered = type;
    							elem[type]();
    							jQuery.event.triggered = undefined;
    
    							if (tmp) {
    								elem[ontype] = tmp;
    							}
    						}
    					}
    				}
    
    				return event.result;
    			},
    
    			dispatch: function(event) {
    
    				// Make a writable jQuery.Event from the native event object
    				event = jQuery.event.fix(event);
    
    				var i, j, ret, matched, handleObj,
    					handlerQueue = [],
    					args = slice.call(arguments),
    					handlers = (data_priv.get(this, "events") || {})[event.type] || [],
    					special = jQuery.event.special[event.type] || {};
    
    				// Use the fix-ed jQuery.Event rather than the (read-only) native event
    				args[0] = event;
    				event.delegateTarget = this;
    
    				// Call the preDispatch hook for the mapped type, and let it bail if desired
    				if (special.preDispatch && special.preDispatch.call(this, event) === false) {
    					return;
    				}
    
    				// Determine handlers
    				handlerQueue = jQuery.event.handlers.call(this, event, handlers);
    
    				// Run delegates first; they may want to stop propagation beneath us
    				i = 0;
    				while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
    					event.currentTarget = matched.elem;
    
    					j = 0;
    					while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
    
    						// Triggered event must either 1) have no namespace, or 2) have namespace(s)
    						// a subset or equal to those in the bound event (both can have no namespace).
    						if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
    
    							event.handleObj = handleObj;
    							event.data = handleObj.data;
    
    							ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler)
    								.apply(matched.elem, args);
    
    							if (ret !== undefined) {
    								if ((event.result = ret) === false) {
    									event.preventDefault();
    									event.stopPropagation();
    								}
    							}
    						}
    					}
    				}
    
    				// Call the postDispatch hook for the mapped type
    				if (special.postDispatch) {
    					special.postDispatch.call(this, event);
    				}
    
    				return event.result;
    			},
    
    			handlers: function(event, handlers) {
    				var i, matches, sel, handleObj,
    					handlerQueue = [],
    					delegateCount = handlers.delegateCount,
    					cur = event.target;
    
    				// Find delegate handlers
    				// Black-hole SVG <use> instance trees (#13180)
    				// Avoid non-left-click bubbling in Firefox (#3861)
    				if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {
    
    					for (; cur !== this; cur = cur.parentNode || this) {
    
    						// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
    						if (cur.disabled !== true || event.type !== "click") {
    							matches = [];
    							for (i = 0; i < delegateCount; i++) {
    								handleObj = handlers[i];
    
    								// Don't conflict with Object.prototype properties (#13203)
    								sel = handleObj.selector + " ";
    
    								if (matches[sel] === undefined) {
    									matches[sel] = handleObj.needsContext ?
    										jQuery(sel, this).index(cur) >= 0 :
    										jQuery.find(sel, this, null, [cur]).length;
    								}
    								if (matches[sel]) {
    									matches.push(handleObj);
    								}
    							}
    							if (matches.length) {
    								handlerQueue.push({
    									elem: cur,
    									handlers: matches
    								});
    							}
    						}
    					}
    				}
    
    				// Add the remaining (directly-bound) handlers
    				if (delegateCount < handlers.length) {
    					handlerQueue.push({
    						elem: this,
    						handlers: handlers.slice(delegateCount)
    					});
    				}
    
    				return handlerQueue;
    			},
    
    			// Includes some event props shared by KeyEvent and MouseEvent
    			props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
    
    			fixHooks: {},
    
    			keyHooks: {
    				props: "char charCode key keyCode".split(" "),
    				filter: function(event, original) {
    
    					// Add which for key events
    					if (event.which == null) {
    						event.which = original.charCode != null ? original.charCode : original.keyCode;
    					}
    
    					return event;
    				}
    			},
    
    			mouseHooks: {
    				props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
    				filter: function(event, original) {
    					var eventDoc, doc, body,
    						button = original.button;
    
    					// Calculate pageX/Y if missing and clientX/Y available
    					if (event.pageX == null && original.clientX != null) {
    						eventDoc = event.target.ownerDocument || document;
    						doc = eventDoc.documentElement;
    						body = eventDoc.body;
    
    						event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
    						event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
    					}
    
    					// Add which for click: 1 === left; 2 === middle; 3 === right
    					// Note: button is not normalized, so don't use it
    					if (!event.which && button !== undefined) {
    						event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));
    					}
    
    					return event;
    				}
    			},
    
    			fix: function(event) {
    				if (event[jQuery.expando]) {
    					return event;
    				}
    
    				// Create a writable copy of the event object and normalize some properties
    				var i, prop, copy,
    					type = event.type,
    					originalEvent = event,
    					fixHook = this.fixHooks[type];
    
    				if (!fixHook) {
    					this.fixHooks[type] = fixHook =
    						rmouseEvent.test(type) ? this.mouseHooks :
    						rkeyEvent.test(type) ? this.keyHooks : {};
    				}
    				copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
    
    				event = new jQuery.Event(originalEvent);
    
    				i = copy.length;
    				while (i--) {
    					prop = copy[i];
    					event[prop] = originalEvent[prop];
    				}
    
    				// Support: Cordova 2.5 (WebKit) (#13255)
    				// All events should have a target; Cordova deviceready doesn't
    				if (!event.target) {
    					event.target = document;
    				}
    
    				// Support: Safari 6.0+, Chrome<28
    				// Target should not be a text node (#504, #13143)
    				if (event.target.nodeType === 3) {
    					event.target = event.target.parentNode;
    				}
    
    				return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
    			},
    
    			special: {
    				load: {
    					// Prevent triggered image.load events from bubbling to window.load
    					noBubble: true
    				},
    				focus: {
    					// Fire native event if possible so blur/focus sequence is correct
    					trigger: function() {
    						if (this !== safeActiveElement() && this.focus) {
    							this.focus();
    							return false;
    						}
    					},
    					delegateType: "focusin"
    				},
    				blur: {
    					trigger: function() {
    						if (this === safeActiveElement() && this.blur) {
    							this.blur();
    							return false;
    						}
    					},
    					delegateType: "focusout"
    				},
    				click: {
    					// For checkbox, fire native event so checked state will be right
    					trigger: function() {
    						if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
    							this.click();
    							return false;
    						}
    					},
    
    					// For cross-browser consistency, don't fire native .click() on links
    					_default: function(event) {
    						return jQuery.nodeName(event.target, "a");
    					}
    				},
    
    				beforeunload: {
    					postDispatch: function(event) {
    
    						// Support: Firefox 20+
    						// Firefox doesn't alert if the returnValue field is not set.
    						if (event.result !== undefined && event.originalEvent) {
    							event.originalEvent.returnValue = event.result;
    						}
    					}
    				}
    			},
    
    			simulate: function(type, elem, event, bubble) {
    				// Piggyback on a donor event to simulate a different one.
    				// Fake originalEvent to avoid donor's stopPropagation, but if the
    				// simulated event prevents default then we do the same on the donor.
    				var e = jQuery.extend(
    					new jQuery.Event(),
    					event, {
    						type: type,
    						isSimulated: true,
    						originalEvent: {}
    					}
    				);
    				if (bubble) {
    					jQuery.event.trigger(e, null, elem);
    				} else {
    					jQuery.event.dispatch.call(elem, e);
    				}
    				if (e.isDefaultPrevented()) {
    					event.preventDefault();
    				}
    			}
    		};
    
    		jQuery.removeEvent = function(elem, type, handle) {
    			if (elem.removeEventListener) {
    				elem.removeEventListener(type, handle, false);
    			}
    		};
    
    		jQuery.Event = function(src, props) {
    			// Allow instantiation without the 'new' keyword
    			if (!(this instanceof jQuery.Event)) {
    				return new jQuery.Event(src, props);
    			}
    
    			// Event object
    			if (src && src.type) {
    				this.originalEvent = src;
    				this.type = src.type;
    
    				// Events bubbling up the document may have been marked as prevented
    				// by a handler lower down the tree; reflect the correct value.
    				this.isDefaultPrevented = src.defaultPrevented ||
    					src.defaultPrevented === undefined &&
    					// Support: Android<4.0
    					src.returnValue === false ?
    					returnTrue :
    					returnFalse;
    
    				// Event type
    			} else {
    				this.type = src;
    			}
    
    			// Put explicitly provided properties onto the event object
    			if (props) {
    				jQuery.extend(this, props);
    			}
    
    			// Create a timestamp if incoming event doesn't have one
    			this.timeStamp = src && src.timeStamp || jQuery.now();
    
    			// Mark it as fixed
    			this[jQuery.expando] = true;
    		};
    
    		// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    		// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    		jQuery.Event.prototype = {
    			isDefaultPrevented: returnFalse,
    			isPropagationStopped: returnFalse,
    			isImmediatePropagationStopped: returnFalse,
    
    			preventDefault: function() {
    				var e = this.originalEvent;
    
    				this.isDefaultPrevented = returnTrue;
    
    				if (e && e.preventDefault) {
    					e.preventDefault();
    				}
    			},
    			stopPropagation: function() {
    				var e = this.originalEvent;
    
    				this.isPropagationStopped = returnTrue;
    
    				if (e && e.stopPropagation) {
    					e.stopPropagation();
    				}
    			},
    			stopImmediatePropagation: function() {
    				var e = this.originalEvent;
    
    				this.isImmediatePropagationStopped = returnTrue;
    
    				if (e && e.stopImmediatePropagation) {
    					e.stopImmediatePropagation();
    				}
    
    				this.stopPropagation();
    			}
    		};
    
    		// Create mouseenter/leave events using mouseover/out and event-time checks
    		// Support: Chrome 15+
    		jQuery.each({
    			mouseenter: "mouseover",
    			mouseleave: "mouseout",
    			pointerenter: "pointerover",
    			pointerleave: "pointerout"
    		}, function(orig, fix) {
    			jQuery.event.special[orig] = {
    				delegateType: fix,
    				bindType: fix,
    
    				handle: function(event) {
    					var ret,
    						target = this,
    						related = event.relatedTarget,
    						handleObj = event.handleObj;
    
    					// For mousenter/leave call the handler if related is outside the target.
    					// NB: No relatedTarget if the mouse left/entered the browser window
    					if (!related || (related !== target && !jQuery.contains(target, related))) {
    						event.type = handleObj.origType;
    						ret = handleObj.handler.apply(this, arguments);
    						event.type = fix;
    					}
    					return ret;
    				}
    			};
    		});
    
    		// Support: Firefox, Chrome, Safari
    		// Create "bubbling" focus and blur events
    		if (!support.focusinBubbles) {
    			jQuery.each({
    				focus: "focusin",
    				blur: "focusout"
    			}, function(orig, fix) {
    
    				// Attach a single capturing handler on the document while someone wants focusin/focusout
    				var handler = function(event) {
    					jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
    				};
    
    				jQuery.event.special[fix] = {
    					setup: function() {
    						var doc = this.ownerDocument || this,
    							attaches = data_priv.access(doc, fix);
    
    						if (!attaches) {
    							doc.addEventListener(orig, handler, true);
    						}
    						data_priv.access(doc, fix, (attaches || 0) + 1);
    					},
    					teardown: function() {
    						var doc = this.ownerDocument || this,
    							attaches = data_priv.access(doc, fix) - 1;
    
    						if (!attaches) {
    							doc.removeEventListener(orig, handler, true);
    							data_priv.remove(doc, fix);
    
    						} else {
    							data_priv.access(doc, fix, attaches);
    						}
    					}
    				};
    			});
    		}
    
    		jQuery.fn.extend({
    
    			on: function(types, selector, data, fn, /*INTERNAL*/ one) {
    				var origFn, type;
    
    				// Types can be a map of types/handlers
    				if (typeof types === "object") {
    					// ( types-Object, selector, data )
    					if (typeof selector !== "string") {
    						// ( types-Object, data )
    						data = data || selector;
    						selector = undefined;
    					}
    					for (type in types) {
    						this.on(type, selector, data, types[type], one);
    					}
    					return this;
    				}
    
    				if (data == null && fn == null) {
    					// ( types, fn )
    					fn = selector;
    					data = selector = undefined;
    				} else if (fn == null) {
    					if (typeof selector === "string") {
    						// ( types, selector, fn )
    						fn = data;
    						data = undefined;
    					} else {
    						// ( types, data, fn )
    						fn = data;
    						data = selector;
    						selector = undefined;
    					}
    				}
    				if (fn === false) {
    					fn = returnFalse;
    				} else if (!fn) {
    					return this;
    				}
    
    				if (one === 1) {
    					origFn = fn;
    					fn = function(event) {
    						// Can use an empty set, since event contains the info
    						jQuery().off(event);
    						return origFn.apply(this, arguments);
    					};
    					// Use same guid so caller can remove using origFn
    					fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
    				}
    				return this.each(function() {
    					jQuery.event.add(this, types, fn, data, selector);
    				});
    			},
    			one: function(types, selector, data, fn) {
    				return this.on(types, selector, data, fn, 1);
    			},
    			off: function(types, selector, fn) {
    				var handleObj, type;
    				if (types && types.preventDefault && types.handleObj) {
    					// ( event )  dispatched jQuery.Event
    					handleObj = types.handleObj;
    					jQuery(types.delegateTarget).off(
    						handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
    						handleObj.selector,
    						handleObj.handler
    					);
    					return this;
    				}
    				if (typeof types === "object") {
    					// ( types-object [, selector] )
    					for (type in types) {
    						this.off(type, selector, types[type]);
    					}
    					return this;
    				}
    				if (selector === false || typeof selector === "function") {
    					// ( types [, fn] )
    					fn = selector;
    					selector = undefined;
    				}
    				if (fn === false) {
    					fn = returnFalse;
    				}
    				return this.each(function() {
    					jQuery.event.remove(this, types, fn, selector);
    				});
    			},
    
    			trigger: function(type, data) {
    				return this.each(function() {
    					jQuery.event.trigger(type, data, this);
    				});
    			},
    			triggerHandler: function(type, data) {
    				var elem = this[0];
    				if (elem) {
    					return jQuery.event.trigger(type, data, elem, true);
    				}
    			}
    		});
    
    
    		var
    			rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
    			rtagName = /<([\w:]+)/,
    			rhtml = /<|&#?\w+;/,
    			rnoInnerhtml = /<(?:script|style|link)/i,
    			// checked="checked" or checked
    			rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
    			rscriptType = /^$|\/(?:java|ecma)script/i,
    			rscriptTypeMasked = /^true\/(.*)/,
    			rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
    
    			// We have to close these tags to support XHTML (#13200)
    			wrapMap = {
    
    				// Support: IE9
    				option: [1, "<select multiple='multiple'>", "</select>"],
    
    				thead: [1, "<table>", "</table>"],
    				col: [2, "<table><colgroup>", "</colgroup></table>"],
    				tr: [2, "<table><tbody>", "</tbody></table>"],
    				td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    
    				_default: [0, "", ""]
    			};
    
    		// Support: IE9
    		wrapMap.optgroup = wrapMap.option;
    
    		wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    		wrapMap.th = wrapMap.td;
    
    		// Support: 1.x compatibility
    		// Manipulating tables requires a tbody
    		function manipulationTarget(elem, content) {
    			return jQuery.nodeName(elem, "table") &&
    				jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ?
    
    				elem.getElementsByTagName("tbody")[0] ||
    				elem.appendChild(elem.ownerDocument.createElement("tbody")) :
    				elem;
    		}
    
    		// Replace/restore the type attribute of script elements for safe DOM manipulation
    		function disableScript(elem) {
    			elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
    			return elem;
    		}
    
    		function restoreScript(elem) {
    			var match = rscriptTypeMasked.exec(elem.type);
    
    			if (match) {
    				elem.type = match[1];
    			} else {
    				elem.removeAttribute("type");
    			}
    
    			return elem;
    		}
    
    		// Mark scripts as having already been evaluated
    		function setGlobalEval(elems, refElements) {
    			var i = 0,
    				l = elems.length;
    
    			for (; i < l; i++) {
    				data_priv.set(
    					elems[i], "globalEval", !refElements || data_priv.get(refElements[i], "globalEval")
    				);
    			}
    		}
    
    		function cloneCopyEvent(src, dest) {
    			var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
    
    			if (dest.nodeType !== 1) {
    				return;
    			}
    
    			// 1. Copy private data: events, handlers, etc.
    			if (data_priv.hasData(src)) {
    				pdataOld = data_priv.access(src);
    				pdataCur = data_priv.set(dest, pdataOld);
    				events = pdataOld.events;
    
    				if (events) {
    					delete pdataCur.handle;
    					pdataCur.events = {};
    
    					for (type in events) {
    						for (i = 0, l = events[type].length; i < l; i++) {
    							jQuery.event.add(dest, type, events[type][i]);
    						}
    					}
    				}
    			}
    
    			// 2. Copy user data
    			if (data_user.hasData(src)) {
    				udataOld = data_user.access(src);
    				udataCur = jQuery.extend({}, udataOld);
    
    				data_user.set(dest, udataCur);
    			}
    		}
    
    		function getAll(context, tag) {
    			var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || "*") :
    				context.querySelectorAll ? context.querySelectorAll(tag || "*") :
    				[];
    
    			return tag === undefined || tag && jQuery.nodeName(context, tag) ?
    				jQuery.merge([context], ret) :
    				ret;
    		}
    
    		// Fix IE bugs, see support tests
    		function fixInput(src, dest) {
    			var nodeName = dest.nodeName.toLowerCase();
    
    			// Fails to persist the checked state of a cloned checkbox or radio button.
    			if (nodeName === "input" && rcheckableType.test(src.type)) {
    				dest.checked = src.checked;
    
    				// Fails to return the selected option to the default selected state when cloning options
    			} else if (nodeName === "input" || nodeName === "textarea") {
    				dest.defaultValue = src.defaultValue;
    			}
    		}
    
    		jQuery.extend({
    			clone: function(elem, dataAndEvents, deepDataAndEvents) {
    				var i, l, srcElements, destElements,
    					clone = elem.cloneNode(true),
    					inPage = jQuery.contains(elem.ownerDocument, elem);
    
    				// Fix IE cloning issues
    				if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) &&
    					!jQuery.isXMLDoc(elem)) {
    
    					// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
    					destElements = getAll(clone);
    					srcElements = getAll(elem);
    
    					for (i = 0, l = srcElements.length; i < l; i++) {
    						fixInput(srcElements[i], destElements[i]);
    					}
    				}
    
    				// Copy the events from the original to the clone
    				if (dataAndEvents) {
    					if (deepDataAndEvents) {
    						srcElements = srcElements || getAll(elem);
    						destElements = destElements || getAll(clone);
    
    						for (i = 0, l = srcElements.length; i < l; i++) {
    							cloneCopyEvent(srcElements[i], destElements[i]);
    						}
    					} else {
    						cloneCopyEvent(elem, clone);
    					}
    				}
    
    				// Preserve script evaluation history
    				destElements = getAll(clone, "script");
    				if (destElements.length > 0) {
    					setGlobalEval(destElements, !inPage && getAll(elem, "script"));
    				}
    
    				// Return the cloned set
    				return clone;
    			},
    
    			buildFragment: function(elems, context, scripts, selection) {
    				var elem, tmp, tag, wrap, contains, j,
    					fragment = context.createDocumentFragment(),
    					nodes = [],
    					i = 0,
    					l = elems.length;
    
    				for (; i < l; i++) {
    					elem = elems[i];
    
    					if (elem || elem === 0) {
    
    						// Add nodes directly
    						if (jQuery.type(elem) === "object") {
    							// Support: QtWebKit, PhantomJS
    							// push.apply(_, arraylike) throws on ancient WebKit
    							jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
    
    							// Convert non-html into a text node
    						} else if (!rhtml.test(elem)) {
    							nodes.push(context.createTextNode(elem));
    
    							// Convert html into DOM nodes
    						} else {
    							tmp = tmp || fragment.appendChild(context.createElement("div"));
    
    							// Deserialize a standard representation
    							tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
    							wrap = wrapMap[tag] || wrapMap._default;
    							tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
    
    							// Descend through wrappers to the right content
    							j = wrap[0];
    							while (j--) {
    								tmp = tmp.lastChild;
    							}
    
    							// Support: QtWebKit, PhantomJS
    							// push.apply(_, arraylike) throws on ancient WebKit
    							jQuery.merge(nodes, tmp.childNodes);
    
    							// Remember the top-level container
    							tmp = fragment.firstChild;
    
    							// Ensure the created nodes are orphaned (#12392)
    							tmp.textContent = "";
    						}
    					}
    				}
    
    				// Remove wrapper from fragment
    				fragment.textContent = "";
    
    				i = 0;
    				while ((elem = nodes[i++])) {
    
    					// #4087 - If origin and destination elements are the same, and this is
    					// that element, do not do anything
    					if (selection && jQuery.inArray(elem, selection) !== -1) {
    						continue;
    					}
    
    					contains = jQuery.contains(elem.ownerDocument, elem);
    
    					// Append to fragment
    					tmp = getAll(fragment.appendChild(elem), "script");
    
    					// Preserve script evaluation history
    					if (contains) {
    						setGlobalEval(tmp);
    					}
    
    					// Capture executables
    					if (scripts) {
    						j = 0;
    						while ((elem = tmp[j++])) {
    							if (rscriptType.test(elem.type || "")) {
    								scripts.push(elem);
    							}
    						}
    					}
    				}
    
    				return fragment;
    			},
    
    			cleanData: function(elems) {
    				var data, elem, type, key,
    					special = jQuery.event.special,
    					i = 0;
    
    				for (;
    					(elem = elems[i]) !== undefined; i++) {
    					if (jQuery.acceptData(elem)) {
    						key = elem[data_priv.expando];
    
    						if (key && (data = data_priv.cache[key])) {
    							if (data.events) {
    								for (type in data.events) {
    									if (special[type]) {
    										jQuery.event.remove(elem, type);
    
    										// This is a shortcut to avoid jQuery.event.remove's overhead
    									} else {
    										jQuery.removeEvent(elem, type, data.handle);
    									}
    								}
    							}
    							if (data_priv.cache[key]) {
    								// Discard any remaining `private` data
    								delete data_priv.cache[key];
    							}
    						}
    					}
    					// Discard any remaining `user` data
    					delete data_user.cache[elem[data_user.expando]];
    				}
    			}
    		});
    
    		jQuery.fn.extend({
    			text: function(value) {
    				return access(this, function(value) {
    					return value === undefined ?
    						jQuery.text(this) :
    						this.empty().each(function() {
    							if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
    								this.textContent = value;
    							}
    						});
    				}, null, value, arguments.length);
    			},
    
    			append: function() {
    				return this.domManip(arguments, function(elem) {
    					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
    						var target = manipulationTarget(this, elem);
    						target.appendChild(elem);
    					}
    				});
    			},
    
    			prepend: function() {
    				return this.domManip(arguments, function(elem) {
    					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
    						var target = manipulationTarget(this, elem);
    						target.insertBefore(elem, target.firstChild);
    					}
    				});
    			},
    
    			before: function() {
    				return this.domManip(arguments, function(elem) {
    					if (this.parentNode) {
    						this.parentNode.insertBefore(elem, this);
    					}
    				});
    			},
    
    			after: function() {
    				return this.domManip(arguments, function(elem) {
    					if (this.parentNode) {
    						this.parentNode.insertBefore(elem, this.nextSibling);
    					}
    				});
    			},
    
    			remove: function(selector, keepData /* Internal Use Only */ ) {
    				var elem,
    					elems = selector ? jQuery.filter(selector, this) : this,
    					i = 0;
    
    				for (;
    					(elem = elems[i]) != null; i++) {
    					if (!keepData && elem.nodeType === 1) {
    						jQuery.cleanData(getAll(elem));
    					}
    
    					if (elem.parentNode) {
    						if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
    							setGlobalEval(getAll(elem, "script"));
    						}
    						elem.parentNode.removeChild(elem);
    					}
    				}
    
    				return this;
    			},
    
    			empty: function() {
    				var elem,
    					i = 0;
    
    				for (;
    					(elem = this[i]) != null; i++) {
    					if (elem.nodeType === 1) {
    
    						// Prevent memory leaks
    						jQuery.cleanData(getAll(elem, false));
    
    						// Remove any remaining nodes
    						elem.textContent = "";
    					}
    				}
    
    				return this;
    			},
    
    			clone: function(dataAndEvents, deepDataAndEvents) {
    				dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
    				deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
    
    				return this.map(function() {
    					return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
    				});
    			},
    
    			html: function(value) {
    				return access(this, function(value) {
    					var elem = this[0] || {},
    						i = 0,
    						l = this.length;
    
    					if (value === undefined && elem.nodeType === 1) {
    						return elem.innerHTML;
    					}
    
    					// See if we can take a shortcut and just use innerHTML
    					if (typeof value === "string" && !rnoInnerhtml.test(value) &&
    						!wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
    
    						value = value.replace(rxhtmlTag, "<$1></$2>");
    
    						try {
    							for (; i < l; i++) {
    								elem = this[i] || {};
    
    								// Remove element nodes and prevent memory leaks
    								if (elem.nodeType === 1) {
    									jQuery.cleanData(getAll(elem, false));
    									elem.innerHTML = value;
    								}
    							}
    
    							elem = 0;
    
    							// If using innerHTML throws an exception, use the fallback method
    						} catch (e) {}
    					}
    
    					if (elem) {
    						this.empty().append(value);
    					}
    				}, null, value, arguments.length);
    			},
    
    			replaceWith: function() {
    				var arg = arguments[0];
    
    				// Make the changes, replacing each context element with the new content
    				this.domManip(arguments, function(elem) {
    					arg = this.parentNode;
    
    					jQuery.cleanData(getAll(this));
    
    					if (arg) {
    						arg.replaceChild(elem, this);
    					}
    				});
    
    				// Force removal if there was no new content (e.g., from empty arguments)
    				return arg && (arg.length || arg.nodeType) ? this : this.remove();
    			},
    
    			detach: function(selector) {
    				return this.remove(selector, true);
    			},
    
    			domManip: function(args, callback) {
    
    				// Flatten any nested arrays
    				args = concat.apply([], args);
    
    				var fragment, first, scripts, hasScripts, node, doc,
    					i = 0,
    					l = this.length,
    					set = this,
    					iNoClone = l - 1,
    					value = args[0],
    					isFunction = jQuery.isFunction(value);
    
    				// We can't cloneNode fragments that contain checked, in WebKit
    				if (isFunction ||
    					(l > 1 && typeof value === "string" &&
    						!support.checkClone && rchecked.test(value))) {
    					return this.each(function(index) {
    						var self = set.eq(index);
    						if (isFunction) {
    							args[0] = value.call(this, index, self.html());
    						}
    						self.domManip(args, callback);
    					});
    				}
    
    				if (l) {
    					fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
    					first = fragment.firstChild;
    
    					if (fragment.childNodes.length === 1) {
    						fragment = first;
    					}
    
    					if (first) {
    						scripts = jQuery.map(getAll(fragment, "script"), disableScript);
    						hasScripts = scripts.length;
    
    						// Use the original fragment for the last item instead of the first because it can end up
    						// being emptied incorrectly in certain situations (#8070).
    						for (; i < l; i++) {
    							node = fragment;
    
    							if (i !== iNoClone) {
    								node = jQuery.clone(node, true, true);
    
    								// Keep references to cloned scripts for later restoration
    								if (hasScripts) {
    									// Support: QtWebKit
    									// jQuery.merge because push.apply(_, arraylike) throws
    									jQuery.merge(scripts, getAll(node, "script"));
    								}
    							}
    
    							callback.call(this[i], node, i);
    						}
    
    						if (hasScripts) {
    							doc = scripts[scripts.length - 1].ownerDocument;
    
    							// Reenable scripts
    							jQuery.map(scripts, restoreScript);
    
    							// Evaluate executable scripts on first document insertion
    							for (i = 0; i < hasScripts; i++) {
    								node = scripts[i];
    								if (rscriptType.test(node.type || "") &&
    									!data_priv.access(node, "globalEval") && jQuery.contains(doc, node)) {
    
    									if (node.src) {
    										// Optional AJAX dependency, but won't run scripts if not present
    										if (jQuery._evalUrl) {
    											jQuery._evalUrl(node.src);
    										}
    									} else {
    										jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
    									}
    								}
    							}
    						}
    					}
    				}
    
    				return this;
    			}
    		});
    
    		jQuery.each({
    			appendTo: "append",
    			prependTo: "prepend",
    			insertBefore: "before",
    			insertAfter: "after",
    			replaceAll: "replaceWith"
    		}, function(name, original) {
    			jQuery.fn[name] = function(selector) {
    				var elems,
    					ret = [],
    					insert = jQuery(selector),
    					last = insert.length - 1,
    					i = 0;
    
    				for (; i <= last; i++) {
    					elems = i === last ? this : this.clone(true);
    					jQuery(insert[i])[original](elems);
    
    					// Support: QtWebKit
    					// .get() because push.apply(_, arraylike) throws
    					push.apply(ret, elems.get());
    				}
    
    				return this.pushStack(ret);
    			};
    		});
    
    
    		var iframe,
    			elemdisplay = {};
    
    		/**
    		 * Retrieve the actual display of a element
    		 * @param {String} name nodeName of the element
    		 * @param {Object} doc Document object
    		 */
    		// Called only from within defaultDisplay
    		function actualDisplay(name, doc) {
    			var style,
    				elem = jQuery(doc.createElement(name)).appendTo(doc.body),
    
    				// getDefaultComputedStyle might be reliably used only on attached element
    				display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ?
    
    				// Use of this method is a temporary fix (more like optimization) until something better comes along,
    				// since it was removed from specification and supported only in FF
    				style.display : jQuery.css(elem[0], "display");
    
    			// We don't have any data stored on the element,
    			// so use "detach" method as fast way to get rid of the element
    			elem.detach();
    
    			return display;
    		}
    
    		/**
    		 * Try to determine the default display value of an element
    		 * @param {String} nodeName
    		 */
    		function defaultDisplay(nodeName) {
    			var doc = document,
    				display = elemdisplay[nodeName];
    
    			if (!display) {
    				display = actualDisplay(nodeName, doc);
    
    				// If the simple way fails, read from inside an iframe
    				if (display === "none" || !display) {
    
    					// Use the already-created iframe if possible
    					iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);
    
    					// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
    					doc = iframe[0].contentDocument;
    
    					// Support: IE
    					doc.write();
    					doc.close();
    
    					display = actualDisplay(nodeName, doc);
    					iframe.detach();
    				}
    
    				// Store the correct default display
    				elemdisplay[nodeName] = display;
    			}
    
    			return display;
    		}
    		var rmargin = (/^margin/);
    
    		var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
    
    		var getStyles = function(elem) {
    			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
    			// IE throws on elements created in popups
    			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    			if (elem.ownerDocument.defaultView.opener) {
    				return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
    			}
    
    			return window.getComputedStyle(elem, null);
    		};
    
    
    
    		function curCSS(elem, name, computed) {
    			var width, minWidth, maxWidth, ret,
    				style = elem.style;
    
    			computed = computed || getStyles(elem);
    
    			// Support: IE9
    			// getPropertyValue is only needed for .css('filter') (#12537)
    			if (computed) {
    				ret = computed.getPropertyValue(name) || computed[name];
    			}
    
    			if (computed) {
    
    				if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
    					ret = jQuery.style(elem, name);
    				}
    
    				// Support: iOS < 6
    				// A tribute to the "awesome hack by Dean Edwards"
    				// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
    				// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
    				if (rnumnonpx.test(ret) && rmargin.test(name)) {
    
    					// Remember the original values
    					width = style.width;
    					minWidth = style.minWidth;
    					maxWidth = style.maxWidth;
    
    					// Put in the new values to get a computed value out
    					style.minWidth = style.maxWidth = style.width = ret;
    					ret = computed.width;
    
    					// Revert the changed values
    					style.width = width;
    					style.minWidth = minWidth;
    					style.maxWidth = maxWidth;
    				}
    			}
    
    			return ret !== undefined ?
    				// Support: IE
    				// IE returns zIndex value as an integer.
    				ret + "" :
    				ret;
    		}
    
    
    		function addGetHookIf(conditionFn, hookFn) {
    			// Define the hook, we'll check on the first run if it's really needed.
    			return {
    				get: function() {
    					if (conditionFn()) {
    						// Hook not needed (or it's not possible to use it due
    						// to missing dependency), remove it.
    						delete this.get;
    						return;
    					}
    
    					// Hook needed; redefine it so that the support test is not executed again.
    					return (this.get = hookFn).apply(this, arguments);
    				}
    			};
    		}
    
    
    		(function() {
    			var pixelPositionVal, boxSizingReliableVal,
    				docElem = document.documentElement,
    				container = document.createElement("div"),
    				div = document.createElement("div");
    
    			if (!div.style) {
    				return;
    			}
    
    			// Support: IE9-11+
    			// Style of cloned element affects source element cloned (#8908)
    			div.style.backgroundClip = "content-box";
    			div.cloneNode(true).style.backgroundClip = "";
    			support.clearCloneStyle = div.style.backgroundClip === "content-box";
    
    			container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
    				"position:absolute";
    			container.appendChild(div);
    
    			// Executing both pixelPosition & boxSizingReliable tests require only one layout
    			// so they're executed at the same time to save the second computation.
    			function computePixelPositionAndBoxSizingReliable() {
    				div.style.cssText =
    					// Support: Firefox<29, Android 2.3
    					// Vendor-prefix box-sizing
    					"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
    					"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
    					"border:1px;padding:1px;width:4px;position:absolute";
    				div.innerHTML = "";
    				docElem.appendChild(container);
    
    				var divStyle = window.getComputedStyle(div, null);
    				pixelPositionVal = divStyle.top !== "1%";
    				boxSizingReliableVal = divStyle.width === "4px";
    
    				docElem.removeChild(container);
    			}
    
    			// Support: node.js jsdom
    			// Don't assume that getComputedStyle is a property of the global object
    			if (window.getComputedStyle) {
    				jQuery.extend(support, {
    					pixelPosition: function() {
    
    						// This test is executed only once but we still do memoizing
    						// since we can use the boxSizingReliable pre-computing.
    						// No need to check if the test was already performed, though.
    						computePixelPositionAndBoxSizingReliable();
    						return pixelPositionVal;
    					},
    					boxSizingReliable: function() {
    						if (boxSizingReliableVal == null) {
    							computePixelPositionAndBoxSizingReliable();
    						}
    						return boxSizingReliableVal;
    					},
    					reliableMarginRight: function() {
    
    						// Support: Android 2.3
    						// Check if div with explicit width and no margin-right incorrectly
    						// gets computed margin-right based on width of container. (#3333)
    						// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
    						// This support function is only executed once so no memoizing is needed.
    						var ret,
    							marginDiv = div.appendChild(document.createElement("div"));
    
    						// Reset CSS: box-sizing; display; margin; border; padding
    						marginDiv.style.cssText = div.style.cssText =
    							// Support: Firefox<29, Android 2.3
    							// Vendor-prefix box-sizing
    							"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
    							"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
    						marginDiv.style.marginRight = marginDiv.style.width = "0";
    						div.style.width = "1px";
    						docElem.appendChild(container);
    
    						ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);
    
    						docElem.removeChild(container);
    						div.removeChild(marginDiv);
    
    						return ret;
    					}
    				});
    			}
    		})();
    
    
    		// A method for quickly swapping in/out CSS properties to get correct calculations.
    		jQuery.swap = function(elem, options, callback, args) {
    			var ret, name,
    				old = {};
    
    			// Remember the old values, and insert the new ones
    			for (name in options) {
    				old[name] = elem.style[name];
    				elem.style[name] = options[name];
    			}
    
    			ret = callback.apply(elem, args || []);
    
    			// Revert the old values
    			for (name in options) {
    				elem.style[name] = old[name];
    			}
    
    			return ret;
    		};
    
    
    		var
    		// Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
    		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    			rdisplayswap = /^(none|table(?!-c[ea]).+)/,
    			rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"),
    			rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"),
    
    			cssShow = {
    				position: "absolute",
    				visibility: "hidden",
    				display: "block"
    			},
    			cssNormalTransform = {
    				letterSpacing: "0",
    				fontWeight: "400"
    			},
    
    			cssPrefixes = ["Webkit", "O", "Moz", "ms"];
    
    		// Return a css property mapped to a potentially vendor prefixed property
    		function vendorPropName(style, name) {
    
    			// Shortcut for names that are not vendor prefixed
    			if (name in style) {
    				return name;
    			}
    
    			// Check for vendor prefixed names
    			var capName = name[0].toUpperCase() + name.slice(1),
    				origName = name,
    				i = cssPrefixes.length;
    
    			while (i--) {
    				name = cssPrefixes[i] + capName;
    				if (name in style) {
    					return name;
    				}
    			}
    
    			return origName;
    		}
    
    		function setPositiveNumber(elem, value, subtract) {
    			var matches = rnumsplit.exec(value);
    			return matches ?
    				// Guard against undefined "subtract", e.g., when used as in cssHooks
    				Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") :
    				value;
    		}
    
    		function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
    			var i = extra === (isBorderBox ? "border" : "content") ?
    				// If we already have the right measurement, avoid augmentation
    				4 :
    				// Otherwise initialize for horizontal or vertical properties
    				name === "width" ? 1 : 0,
    
    				val = 0;
    
    			for (; i < 4; i += 2) {
    				// Both box models exclude margin, so add it if we want it
    				if (extra === "margin") {
    					val += jQuery.css(elem, extra + cssExpand[i], true, styles);
    				}
    
    				if (isBorderBox) {
    					// border-box includes padding, so remove it if we want content
    					if (extra === "content") {
    						val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
    					}
    
    					// At this point, extra isn't border nor margin, so remove border
    					if (extra !== "margin") {
    						val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
    					}
    				} else {
    					// At this point, extra isn't content, so add padding
    					val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
    
    					// At this point, extra isn't content nor padding, so add border
    					if (extra !== "padding") {
    						val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
    					}
    				}
    			}
    
    			return val;
    		}
    
    		function getWidthOrHeight(elem, name, extra) {
    
    			// Start with offset property, which is equivalent to the border-box value
    			var valueIsBorderBox = true,
    				val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
    				styles = getStyles(elem),
    				isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";
    
    			// Some non-html elements return undefined for offsetWidth, so check for null/undefined
    			// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
    			// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
    			if (val <= 0 || val == null) {
    				// Fall back to computed then uncomputed css if necessary
    				val = curCSS(elem, name, styles);
    				if (val < 0 || val == null) {
    					val = elem.style[name];
    				}
    
    				// Computed unit is not pixels. Stop here and return.
    				if (rnumnonpx.test(val)) {
    					return val;
    				}
    
    				// Check for style in case a browser which returns unreliable values
    				// for getComputedStyle silently falls back to the reliable elem.style
    				valueIsBorderBox = isBorderBox &&
    					(support.boxSizingReliable() || val === elem.style[name]);
    
    				// Normalize "", auto, and prepare for extra
    				val = parseFloat(val) || 0;
    			}
    
    			// Use the active box-sizing model to add/subtract irrelevant styles
    			return (val +
    				augmentWidthOrHeight(
    					elem,
    					name,
    					extra || (isBorderBox ? "border" : "content"),
    					valueIsBorderBox,
    					styles
    				)
    			) + "px";
    		}
    
    		function showHide(elements, show) {
    			var display, elem, hidden,
    				values = [],
    				index = 0,
    				length = elements.length;
    
    			for (; index < length; index++) {
    				elem = elements[index];
    				if (!elem.style) {
    					continue;
    				}
    
    				values[index] = data_priv.get(elem, "olddisplay");
    				display = elem.style.display;
    				if (show) {
    					// Reset the inline display of this element to learn if it is
    					// being hidden by cascaded rules or not
    					if (!values[index] && display === "none") {
    						elem.style.display = "";
    					}
    
    					// Set elements which have been overridden with display: none
    					// in a stylesheet to whatever the default browser style is
    					// for such an element
    					if (elem.style.display === "" && isHidden(elem)) {
    						values[index] = data_priv.access(elem, "olddisplay", defaultDisplay(elem.nodeName));
    					}
    				} else {
    					hidden = isHidden(elem);
    
    					if (display !== "none" || !hidden) {
    						data_priv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
    					}
    				}
    			}
    
    			// Set the display of most of the elements in a second loop
    			// to avoid the constant reflow
    			for (index = 0; index < length; index++) {
    				elem = elements[index];
    				if (!elem.style) {
    					continue;
    				}
    				if (!show || elem.style.display === "none" || elem.style.display === "") {
    					elem.style.display = show ? values[index] || "" : "none";
    				}
    			}
    
    			return elements;
    		}
    
    		jQuery.extend({
    
    			// Add in style property hooks for overriding the default
    			// behavior of getting and setting a style property
    			cssHooks: {
    				opacity: {
    					get: function(elem, computed) {
    						if (computed) {
    
    							// We should always get a number back from opacity
    							var ret = curCSS(elem, "opacity");
    							return ret === "" ? "1" : ret;
    						}
    					}
    				}
    			},
    
    			// Don't automatically add "px" to these possibly-unitless properties
    			cssNumber: {
    				"columnCount": true,
    				"fillOpacity": true,
    				"flexGrow": true,
    				"flexShrink": true,
    				"fontWeight": true,
    				"lineHeight": true,
    				"opacity": true,
    				"order": true,
    				"orphans": true,
    				"widows": true,
    				"zIndex": true,
    				"zoom": true
    			},
    
    			// Add in properties whose names you wish to fix before
    			// setting or getting the value
    			cssProps: {
    				"float": "cssFloat"
    			},
    
    			// Get and set the style property on a DOM Node
    			style: function(elem, name, value, extra) {
    
    				// Don't set styles on text and comment nodes
    				if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
    					return;
    				}
    
    				// Make sure that we're working with the right name
    				var ret, type, hooks,
    					origName = jQuery.camelCase(name),
    					style = elem.style;
    
    				name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
    
    				// Gets hook for the prefixed version, then unprefixed version
    				hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
    
    				// Check if we're setting a value
    				if (value !== undefined) {
    					type = typeof value;
    
    					// Convert "+=" or "-=" to relative numbers (#7345)
    					if (type === "string" && (ret = rrelNum.exec(value))) {
    						value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
    						// Fixes bug #9237
    						type = "number";
    					}
    
    					// Make sure that null and NaN values aren't set (#7116)
    					if (value == null || value !== value) {
    						return;
    					}
    
    					// If a number, add 'px' to the (except for certain CSS properties)
    					if (type === "number" && !jQuery.cssNumber[origName]) {
    						value += "px";
    					}
    
    					// Support: IE9-11+
    					// background-* props affect original clone's values
    					if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
    						style[name] = "inherit";
    					}
    
    					// If a hook was provided, use that value, otherwise just set the specified value
    					if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
    						style[name] = value;
    					}
    
    				} else {
    					// If a hook was provided get the non-computed value from there
    					if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
    						return ret;
    					}
    
    					// Otherwise just get the value from the style object
    					return style[name];
    				}
    			},
    
    			css: function(elem, name, extra, styles) {
    				var val, num, hooks,
    					origName = jQuery.camelCase(name);
    
    				// Make sure that we're working with the right name
    				name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
    
    				// Try prefixed name followed by the unprefixed name
    				hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
    
    				// If a hook was provided get the computed value from there
    				if (hooks && "get" in hooks) {
    					val = hooks.get(elem, true, extra);
    				}
    
    				// Otherwise, if a way to get the computed value exists, use that
    				if (val === undefined) {
    					val = curCSS(elem, name, styles);
    				}
    
    				// Convert "normal" to computed value
    				if (val === "normal" && name in cssNormalTransform) {
    					val = cssNormalTransform[name];
    				}
    
    				// Make numeric if forced or a qualifier was provided and val looks numeric
    				if (extra === "" || extra) {
    					num = parseFloat(val);
    					return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
    				}
    				return val;
    			}
    		});
    
    		jQuery.each(["height", "width"], function(i, name) {
    			jQuery.cssHooks[name] = {
    				get: function(elem, computed, extra) {
    					if (computed) {
    
    						// Certain elements can have dimension info if we invisibly show them
    						// but it must have a current display style that would benefit
    						return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ?
    							jQuery.swap(elem, cssShow, function() {
    								return getWidthOrHeight(elem, name, extra);
    							}) :
    							getWidthOrHeight(elem, name, extra);
    					}
    				},
    
    				set: function(elem, value, extra) {
    					var styles = extra && getStyles(elem);
    					return setPositiveNumber(elem, value, extra ?
    						augmentWidthOrHeight(
    							elem,
    							name,
    							extra,
    							jQuery.css(elem, "boxSizing", false, styles) === "border-box",
    							styles
    						) : 0
    					);
    				}
    			};
    		});
    
    		// Support: Android 2.3
    		jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight,
    			function(elem, computed) {
    				if (computed) {
    					return jQuery.swap(elem, {
    							"display": "inline-block"
    						},
    						curCSS, [elem, "marginRight"]);
    				}
    			}
    		);
    
    		// These hooks are used by animate to expand properties
    		jQuery.each({
    			margin: "",
    			padding: "",
    			border: "Width"
    		}, function(prefix, suffix) {
    			jQuery.cssHooks[prefix + suffix] = {
    				expand: function(value) {
    					var i = 0,
    						expanded = {},
    
    						// Assumes a single number if not a string
    						parts = typeof value === "string" ? value.split(" ") : [value];
    
    					for (; i < 4; i++) {
    						expanded[prefix + cssExpand[i] + suffix] =
    							parts[i] || parts[i - 2] || parts[0];
    					}
    
    					return expanded;
    				}
    			};
    
    			if (!rmargin.test(prefix)) {
    				jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    			}
    		});
    
    		jQuery.fn.extend({
    			css: function(name, value) {
    				return access(this, function(elem, name, value) {
    					var styles, len,
    						map = {},
    						i = 0;
    
    					if (jQuery.isArray(name)) {
    						styles = getStyles(elem);
    						len = name.length;
    
    						for (; i < len; i++) {
    							map[name[i]] = jQuery.css(elem, name[i], false, styles);
    						}
    
    						return map;
    					}
    
    					return value !== undefined ?
    						jQuery.style(elem, name, value) :
    						jQuery.css(elem, name);
    				}, name, value, arguments.length > 1);
    			},
    			show: function() {
    				return showHide(this, true);
    			},
    			hide: function() {
    				return showHide(this);
    			},
    			toggle: function(state) {
    				if (typeof state === "boolean") {
    					return state ? this.show() : this.hide();
    				}
    
    				return this.each(function() {
    					if (isHidden(this)) {
    						jQuery(this).show();
    					} else {
    						jQuery(this).hide();
    					}
    				});
    			}
    		});
    
    
    		function Tween(elem, options, prop, end, easing) {
    			return new Tween.prototype.init(elem, options, prop, end, easing);
    		}
    		jQuery.Tween = Tween;
    
    		Tween.prototype = {
    			constructor: Tween,
    			init: function(elem, options, prop, end, easing, unit) {
    				this.elem = elem;
    				this.prop = prop;
    				this.easing = easing || "swing";
    				this.options = options;
    				this.start = this.now = this.cur();
    				this.end = end;
    				this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
    			},
    			cur: function() {
    				var hooks = Tween.propHooks[this.prop];
    
    				return hooks && hooks.get ?
    					hooks.get(this) :
    					Tween.propHooks._default.get(this);
    			},
    			run: function(percent) {
    				var eased,
    					hooks = Tween.propHooks[this.prop];
    
    				if (this.options.duration) {
    					this.pos = eased = jQuery.easing[this.easing](
    						percent, this.options.duration * percent, 0, 1, this.options.duration
    					);
    				} else {
    					this.pos = eased = percent;
    				}
    				this.now = (this.end - this.start) * eased + this.start;
    
    				if (this.options.step) {
    					this.options.step.call(this.elem, this.now, this);
    				}
    
    				if (hooks && hooks.set) {
    					hooks.set(this);
    				} else {
    					Tween.propHooks._default.set(this);
    				}
    				return this;
    			}
    		};
    
    		Tween.prototype.init.prototype = Tween.prototype;
    
    		Tween.propHooks = {
    			_default: {
    				get: function(tween) {
    					var result;
    
    					if (tween.elem[tween.prop] != null &&
    						(!tween.elem.style || tween.elem.style[tween.prop] == null)) {
    						return tween.elem[tween.prop];
    					}
    
    					// Passing an empty string as a 3rd parameter to .css will automatically
    					// attempt a parseFloat and fallback to a string if the parse fails.
    					// Simple values such as "10px" are parsed to Float;
    					// complex values such as "rotate(1rad)" are returned as-is.
    					result = jQuery.css(tween.elem, tween.prop, "");
    					// Empty strings, null, undefined and "auto" are converted to 0.
    					return !result || result === "auto" ? 0 : result;
    				},
    				set: function(tween) {
    					// Use step hook for back compat.
    					// Use cssHook if its there.
    					// Use .style if available and use plain properties where available.
    					if (jQuery.fx.step[tween.prop]) {
    						jQuery.fx.step[tween.prop](tween);
    					} else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
    						jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
    					} else {
    						tween.elem[tween.prop] = tween.now;
    					}
    				}
    			}
    		};
    
    		// Support: IE9
    		// Panic based approach to setting things on disconnected nodes
    		Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    			set: function(tween) {
    				if (tween.elem.nodeType && tween.elem.parentNode) {
    					tween.elem[tween.prop] = tween.now;
    				}
    			}
    		};
    
    		jQuery.easing = {
    			linear: function(p) {
    				return p;
    			},
    			swing: function(p) {
    				return 0.5 - Math.cos(p * Math.PI) / 2;
    			}
    		};
    
    		jQuery.fx = Tween.prototype.init;
    
    		// Back Compat <1.8 extension point
    		jQuery.fx.step = {};
    
    
    
    		var
    			fxNow, timerId,
    			rfxtypes = /^(?:toggle|show|hide)$/,
    			rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"),
    			rrun = /queueHooks$/,
    			animationPrefilters = [defaultPrefilter],
    			tweeners = {
    				"*": [function(prop, value) {
    					var tween = this.createTween(prop, value),
    						target = tween.cur(),
    						parts = rfxnum.exec(value),
    						unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
    
    						// Starting value computation is required for potential unit mismatches
    						start = (jQuery.cssNumber[prop] || unit !== "px" && +target) &&
    						rfxnum.exec(jQuery.css(tween.elem, prop)),
    						scale = 1,
    						maxIterations = 20;
    
    					if (start && start[3] !== unit) {
    						// Trust units reported by jQuery.css
    						unit = unit || start[3];
    
    						// Make sure we update the tween properties later on
    						parts = parts || [];
    
    						// Iteratively approximate from a nonzero starting point
    						start = +target || 1;
    
    						do {
    							// If previous iteration zeroed out, double until we get *something*.
    							// Use string for doubling so we don't accidentally see scale as unchanged below
    							scale = scale || ".5";
    
    							// Adjust and apply
    							start = start / scale;
    							jQuery.style(tween.elem, prop, start + unit);
    
    							// Update scale, tolerating zero or NaN from tween.cur(),
    							// break the loop if scale is unchanged or perfect, or if we've just had enough
    						} while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
    					}
    
    					// Update tween properties
    					if (parts) {
    						start = tween.start = +start || +target || 0;
    						tween.unit = unit;
    						// If a +=/-= token was provided, we're doing a relative animation
    						tween.end = parts[1] ?
    							start + (parts[1] + 1) * parts[2] :
    							+parts[2];
    					}
    
    					return tween;
    				}]
    			};
    
    		// Animations created synchronously will run synchronously
    		function createFxNow() {
    			setTimeout(function() {
    				fxNow = undefined;
    			});
    			return (fxNow = jQuery.now());
    		}
    
    		// Generate parameters to create a standard animation
    		function genFx(type, includeWidth) {
    			var which,
    				i = 0,
    				attrs = {
    					height: type
    				};
    
    			// If we include width, step value is 1 to do all cssExpand values,
    			// otherwise step value is 2 to skip over Left and Right
    			includeWidth = includeWidth ? 1 : 0;
    			for (; i < 4; i += 2 - includeWidth) {
    				which = cssExpand[i];
    				attrs["margin" + which] = attrs["padding" + which] = type;
    			}
    
    			if (includeWidth) {
    				attrs.opacity = attrs.width = type;
    			}
    
    			return attrs;
    		}
    
    		function createTween(value, prop, animation) {
    			var tween,
    				collection = (tweeners[prop] || []).concat(tweeners["*"]),
    				index = 0,
    				length = collection.length;
    			for (; index < length; index++) {
    				if ((tween = collection[index].call(animation, prop, value))) {
    
    					// We're done with this property
    					return tween;
    				}
    			}
    		}
    
    		function defaultPrefilter(elem, props, opts) {
    			/* jshint validthis: true */
    			var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
    				anim = this,
    				orig = {},
    				style = elem.style,
    				hidden = elem.nodeType && isHidden(elem),
    				dataShow = data_priv.get(elem, "fxshow");
    
    			// Handle queue: false promises
    			if (!opts.queue) {
    				hooks = jQuery._queueHooks(elem, "fx");
    				if (hooks.unqueued == null) {
    					hooks.unqueued = 0;
    					oldfire = hooks.empty.fire;
    					hooks.empty.fire = function() {
    						if (!hooks.unqueued) {
    							oldfire();
    						}
    					};
    				}
    				hooks.unqueued++;
    
    				anim.always(function() {
    					// Ensure the complete handler is called before this completes
    					anim.always(function() {
    						hooks.unqueued--;
    						if (!jQuery.queue(elem, "fx").length) {
    							hooks.empty.fire();
    						}
    					});
    				});
    			}
    
    			// Height/width overflow pass
    			if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
    				// Make sure that nothing sneaks out
    				// Record all 3 overflow attributes because IE9-10 do not
    				// change the overflow attribute when overflowX and
    				// overflowY are set to the same value
    				opts.overflow = [style.overflow, style.overflowX, style.overflowY];
    
    				// Set display property to inline-block for height/width
    				// animations on inline elements that are having width/height animated
    				display = jQuery.css(elem, "display");
    
    				// Test default display if display is currently "none"
    				checkDisplay = display === "none" ?
    					data_priv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;
    
    				if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
    					style.display = "inline-block";
    				}
    			}
    
    			if (opts.overflow) {
    				style.overflow = "hidden";
    				anim.always(function() {
    					style.overflow = opts.overflow[0];
    					style.overflowX = opts.overflow[1];
    					style.overflowY = opts.overflow[2];
    				});
    			}
    
    			// show/hide pass
    			for (prop in props) {
    				value = props[prop];
    				if (rfxtypes.exec(value)) {
    					delete props[prop];
    					toggle = toggle || value === "toggle";
    					if (value === (hidden ? "hide" : "show")) {
    
    						// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
    						if (value === "show" && dataShow && dataShow[prop] !== undefined) {
    							hidden = true;
    						} else {
    							continue;
    						}
    					}
    					orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
    
    					// Any non-fx value stops us from restoring the original display value
    				} else {
    					display = undefined;
    				}
    			}
    
    			if (!jQuery.isEmptyObject(orig)) {
    				if (dataShow) {
    					if ("hidden" in dataShow) {
    						hidden = dataShow.hidden;
    					}
    				} else {
    					dataShow = data_priv.access(elem, "fxshow", {});
    				}
    
    				// Store state if its toggle - enables .stop().toggle() to "reverse"
    				if (toggle) {
    					dataShow.hidden = !hidden;
    				}
    				if (hidden) {
    					jQuery(elem).show();
    				} else {
    					anim.done(function() {
    						jQuery(elem).hide();
    					});
    				}
    				anim.done(function() {
    					var prop;
    
    					data_priv.remove(elem, "fxshow");
    					for (prop in orig) {
    						jQuery.style(elem, prop, orig[prop]);
    					}
    				});
    				for (prop in orig) {
    					tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
    
    					if (!(prop in dataShow)) {
    						dataShow[prop] = tween.start;
    						if (hidden) {
    							tween.end = tween.start;
    							tween.start = prop === "width" || prop === "height" ? 1 : 0;
    						}
    					}
    				}
    
    				// If this is a noop like .hide().hide(), restore an overwritten display value
    			} else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
    				style.display = display;
    			}
    		}
    
    		function propFilter(props, specialEasing) {
    			var index, name, easing, value, hooks;
    
    			// camelCase, specialEasing and expand cssHook pass
    			for (index in props) {
    				name = jQuery.camelCase(index);
    				easing = specialEasing[name];
    				value = props[index];
    				if (jQuery.isArray(value)) {
    					easing = value[1];
    					value = props[index] = value[0];
    				}
    
    				if (index !== name) {
    					props[name] = value;
    					delete props[index];
    				}
    
    				hooks = jQuery.cssHooks[name];
    				if (hooks && "expand" in hooks) {
    					value = hooks.expand(value);
    					delete props[name];
    
    					// Not quite $.extend, this won't overwrite existing keys.
    					// Reusing 'index' because we have the correct "name"
    					for (index in value) {
    						if (!(index in props)) {
    							props[index] = value[index];
    							specialEasing[index] = easing;
    						}
    					}
    				} else {
    					specialEasing[name] = easing;
    				}
    			}
    		}
    
    		function Animation(elem, properties, options) {
    			var result,
    				stopped,
    				index = 0,
    				length = animationPrefilters.length,
    				deferred = jQuery.Deferred().always(function() {
    					// Don't match elem in the :animated selector
    					delete tick.elem;
    				}),
    				tick = function() {
    					if (stopped) {
    						return false;
    					}
    					var currentTime = fxNow || createFxNow(),
    						remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
    						// Support: Android 2.3
    						// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
    						temp = remaining / animation.duration || 0,
    						percent = 1 - temp,
    						index = 0,
    						length = animation.tweens.length;
    
    					for (; index < length; index++) {
    						animation.tweens[index].run(percent);
    					}
    
    					deferred.notifyWith(elem, [animation, percent, remaining]);
    
    					if (percent < 1 && length) {
    						return remaining;
    					} else {
    						deferred.resolveWith(elem, [animation]);
    						return false;
    					}
    				},
    				animation = deferred.promise({
    					elem: elem,
    					props: jQuery.extend({}, properties),
    					opts: jQuery.extend(true, {
    						specialEasing: {}
    					}, options),
    					originalProperties: properties,
    					originalOptions: options,
    					startTime: fxNow || createFxNow(),
    					duration: options.duration,
    					tweens: [],
    					createTween: function(prop, end) {
    						var tween = jQuery.Tween(elem, animation.opts, prop, end,
    							animation.opts.specialEasing[prop] || animation.opts.easing);
    						animation.tweens.push(tween);
    						return tween;
    					},
    					stop: function(gotoEnd) {
    						var index = 0,
    							// If we are going to the end, we want to run all the tweens
    							// otherwise we skip this part
    							length = gotoEnd ? animation.tweens.length : 0;
    						if (stopped) {
    							return this;
    						}
    						stopped = true;
    						for (; index < length; index++) {
    							animation.tweens[index].run(1);
    						}
    
    						// Resolve when we played the last frame; otherwise, reject
    						if (gotoEnd) {
    							deferred.resolveWith(elem, [animation, gotoEnd]);
    						} else {
    							deferred.rejectWith(elem, [animation, gotoEnd]);
    						}
    						return this;
    					}
    				}),
    				props = animation.props;
    
    			propFilter(props, animation.opts.specialEasing);
    
    			for (; index < length; index++) {
    				result = animationPrefilters[index].call(animation, elem, props, animation.opts);
    				if (result) {
    					return result;
    				}
    			}
    
    			jQuery.map(props, createTween, animation);
    
    			if (jQuery.isFunction(animation.opts.start)) {
    				animation.opts.start.call(elem, animation);
    			}
    
    			jQuery.fx.timer(
    				jQuery.extend(tick, {
    					elem: elem,
    					anim: animation,
    					queue: animation.opts.queue
    				})
    			);
    
    			// attach callbacks from options
    			return animation.progress(animation.opts.progress)
    				.done(animation.opts.done, animation.opts.complete)
    				.fail(animation.opts.fail)
    				.always(animation.opts.always);
    		}
    
    		jQuery.Animation = jQuery.extend(Animation, {
    
    			tweener: function(props, callback) {
    				if (jQuery.isFunction(props)) {
    					callback = props;
    					props = ["*"];
    				} else {
    					props = props.split(" ");
    				}
    
    				var prop,
    					index = 0,
    					length = props.length;
    
    				for (; index < length; index++) {
    					prop = props[index];
    					tweeners[prop] = tweeners[prop] || [];
    					tweeners[prop].unshift(callback);
    				}
    			},
    
    			prefilter: function(callback, prepend) {
    				if (prepend) {
    					animationPrefilters.unshift(callback);
    				} else {
    					animationPrefilters.push(callback);
    				}
    			}
    		});
    
    		jQuery.speed = function(speed, easing, fn) {
    			var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
    				complete: fn || !fn && easing ||
    					jQuery.isFunction(speed) && speed,
    				duration: speed,
    				easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
    			};
    
    			opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
    				opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
    
    			// Normalize opt.queue - true/undefined/null -> "fx"
    			if (opt.queue == null || opt.queue === true) {
    				opt.queue = "fx";
    			}
    
    			// Queueing
    			opt.old = opt.complete;
    
    			opt.complete = function() {
    				if (jQuery.isFunction(opt.old)) {
    					opt.old.call(this);
    				}
    
    				if (opt.queue) {
    					jQuery.dequeue(this, opt.queue);
    				}
    			};
    
    			return opt;
    		};
    
    		jQuery.fn.extend({
    			fadeTo: function(speed, to, easing, callback) {
    
    				// Show any hidden elements after setting opacity to 0
    				return this.filter(isHidden).css("opacity", 0).show()
    
    				// Animate to the value specified
    				.end().animate({
    					opacity: to
    				}, speed, easing, callback);
    			},
    			animate: function(prop, speed, easing, callback) {
    				var empty = jQuery.isEmptyObject(prop),
    					optall = jQuery.speed(speed, easing, callback),
    					doAnimation = function() {
    						// Operate on a copy of prop so per-property easing won't be lost
    						var anim = Animation(this, jQuery.extend({}, prop), optall);
    
    						// Empty animations, or finishing resolves immediately
    						if (empty || data_priv.get(this, "finish")) {
    							anim.stop(true);
    						}
    					};
    				doAnimation.finish = doAnimation;
    
    				return empty || optall.queue === false ?
    					this.each(doAnimation) :
    					this.queue(optall.queue, doAnimation);
    			},
    			stop: function(type, clearQueue, gotoEnd) {
    				var stopQueue = function(hooks) {
    					var stop = hooks.stop;
    					delete hooks.stop;
    					stop(gotoEnd);
    				};
    
    				if (typeof type !== "string") {
    					gotoEnd = clearQueue;
    					clearQueue = type;
    					type = undefined;
    				}
    				if (clearQueue && type !== false) {
    					this.queue(type || "fx", []);
    				}
    
    				return this.each(function() {
    					var dequeue = true,
    						index = type != null && type + "queueHooks",
    						timers = jQuery.timers,
    						data = data_priv.get(this);
    
    					if (index) {
    						if (data[index] && data[index].stop) {
    							stopQueue(data[index]);
    						}
    					} else {
    						for (index in data) {
    							if (data[index] && data[index].stop && rrun.test(index)) {
    								stopQueue(data[index]);
    							}
    						}
    					}
    
    					for (index = timers.length; index--;) {
    						if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
    							timers[index].anim.stop(gotoEnd);
    							dequeue = false;
    							timers.splice(index, 1);
    						}
    					}
    
    					// Start the next in the queue if the last step wasn't forced.
    					// Timers currently will call their complete callbacks, which
    					// will dequeue but only if they were gotoEnd.
    					if (dequeue || !gotoEnd) {
    						jQuery.dequeue(this, type);
    					}
    				});
    			},
    			finish: function(type) {
    				if (type !== false) {
    					type = type || "fx";
    				}
    				return this.each(function() {
    					var index,
    						data = data_priv.get(this),
    						queue = data[type + "queue"],
    						hooks = data[type + "queueHooks"],
    						timers = jQuery.timers,
    						length = queue ? queue.length : 0;
    
    					// Enable finishing flag on private data
    					data.finish = true;
    
    					// Empty the queue first
    					jQuery.queue(this, type, []);
    
    					if (hooks && hooks.stop) {
    						hooks.stop.call(this, true);
    					}
    
    					// Look for any active animations, and finish them
    					for (index = timers.length; index--;) {
    						if (timers[index].elem === this && timers[index].queue === type) {
    							timers[index].anim.stop(true);
    							timers.splice(index, 1);
    						}
    					}
    
    					// Look for any animations in the old queue and finish them
    					for (index = 0; index < length; index++) {
    						if (queue[index] && queue[index].finish) {
    							queue[index].finish.call(this);
    						}
    					}
    
    					// Turn off finishing flag
    					delete data.finish;
    				});
    			}
    		});
    
    		jQuery.each(["toggle", "show", "hide"], function(i, name) {
    			var cssFn = jQuery.fn[name];
    			jQuery.fn[name] = function(speed, easing, callback) {
    				return speed == null || typeof speed === "boolean" ?
    					cssFn.apply(this, arguments) :
    					this.animate(genFx(name, true), speed, easing, callback);
    			};
    		});
    
    		// Generate shortcuts for custom animations
    		jQuery.each({
    			slideDown: genFx("show"),
    			slideUp: genFx("hide"),
    			slideToggle: genFx("toggle"),
    			fadeIn: {
    				opacity: "show"
    			},
    			fadeOut: {
    				opacity: "hide"
    			},
    			fadeToggle: {
    				opacity: "toggle"
    			}
    		}, function(name, props) {
    			jQuery.fn[name] = function(speed, easing, callback) {
    				return this.animate(props, speed, easing, callback);
    			};
    		});
    
    		jQuery.timers = [];
    		jQuery.fx.tick = function() {
    			var timer,
    				i = 0,
    				timers = jQuery.timers;
    
    			fxNow = jQuery.now();
    
    			for (; i < timers.length; i++) {
    				timer = timers[i];
    				// Checks the timer has not already been removed
    				if (!timer() && timers[i] === timer) {
    					timers.splice(i--, 1);
    				}
    			}
    
    			if (!timers.length) {
    				jQuery.fx.stop();
    			}
    			fxNow = undefined;
    		};
    
    		jQuery.fx.timer = function(timer) {
    			jQuery.timers.push(timer);
    			if (timer()) {
    				jQuery.fx.start();
    			} else {
    				jQuery.timers.pop();
    			}
    		};
    
    		jQuery.fx.interval = 13;
    
    		jQuery.fx.start = function() {
    			if (!timerId) {
    				timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
    			}
    		};
    
    		jQuery.fx.stop = function() {
    			clearInterval(timerId);
    			timerId = null;
    		};
    
    		jQuery.fx.speeds = {
    			slow: 600,
    			fast: 200,
    			// Default speed
    			_default: 400
    		};
    
    
    		// Based off of the plugin by Clint Helfers, with permission.
    		// http://blindsignals.com/index.php/2009/07/jquery-delay/
    		jQuery.fn.delay = function(time, type) {
    			time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    			type = type || "fx";
    
    			return this.queue(type, function(next, hooks) {
    				var timeout = setTimeout(next, time);
    				hooks.stop = function() {
    					clearTimeout(timeout);
    				};
    			});
    		};
    
    
    		(function() {
    			var input = document.createElement("input"),
    				select = document.createElement("select"),
    				opt = select.appendChild(document.createElement("option"));
    
    			input.type = "checkbox";
    
    			// Support: iOS<=5.1, Android<=4.2+
    			// Default value for a checkbox should be "on"
    			support.checkOn = input.value !== "";
    
    			// Support: IE<=11+
    			// Must access selectedIndex to make default options select
    			support.optSelected = opt.selected;
    
    			// Support: Android<=2.3
    			// Options inside disabled selects are incorrectly marked as disabled
    			select.disabled = true;
    			support.optDisabled = !opt.disabled;
    
    			// Support: IE<=11+
    			// An input loses its value after becoming a radio
    			input = document.createElement("input");
    			input.value = "t";
    			input.type = "radio";
    			support.radioValue = input.value === "t";
    		})();
    
    
    		var nodeHook, boolHook,
    			attrHandle = jQuery.expr.attrHandle;
    
    		jQuery.fn.extend({
    			attr: function(name, value) {
    				return access(this, jQuery.attr, name, value, arguments.length > 1);
    			},
    
    			removeAttr: function(name) {
    				return this.each(function() {
    					jQuery.removeAttr(this, name);
    				});
    			}
    		});
    
    		jQuery.extend({
    			attr: function(elem, name, value) {
    				var hooks, ret,
    					nType = elem.nodeType;
    
    				// don't get/set attributes on text, comment and attribute nodes
    				if (!elem || nType === 3 || nType === 8 || nType === 2) {
    					return;
    				}
    
    				// Fallback to prop when attributes are not supported
    				if (typeof elem.getAttribute === strundefined) {
    					return jQuery.prop(elem, name, value);
    				}
    
    				// All attributes are lowercase
    				// Grab necessary hook if one is defined
    				if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
    					name = name.toLowerCase();
    					hooks = jQuery.attrHooks[name] ||
    						(jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
    				}
    
    				if (value !== undefined) {
    
    					if (value === null) {
    						jQuery.removeAttr(elem, name);
    
    					} else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
    						return ret;
    
    					} else {
    						elem.setAttribute(name, value + "");
    						return value;
    					}
    
    				} else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
    					return ret;
    
    				} else {
    					ret = jQuery.find.attr(elem, name);
    
    					// Non-existent attributes return null, we normalize to undefined
    					return ret == null ?
    						undefined :
    						ret;
    				}
    			},
    
    			removeAttr: function(elem, value) {
    				var name, propName,
    					i = 0,
    					attrNames = value && value.match(rnotwhite);
    
    				if (attrNames && elem.nodeType === 1) {
    					while ((name = attrNames[i++])) {
    						propName = jQuery.propFix[name] || name;
    
    						// Boolean attributes get special treatment (#10870)
    						if (jQuery.expr.match.bool.test(name)) {
    							// Set corresponding property to false
    							elem[propName] = false;
    						}
    
    						elem.removeAttribute(name);
    					}
    				}
    			},
    
    			attrHooks: {
    				type: {
    					set: function(elem, value) {
    						if (!support.radioValue && value === "radio" &&
    							jQuery.nodeName(elem, "input")) {
    							var val = elem.value;
    							elem.setAttribute("type", value);
    							if (val) {
    								elem.value = val;
    							}
    							return value;
    						}
    					}
    				}
    			}
    		});
    
    		// Hooks for boolean attributes
    		boolHook = {
    			set: function(elem, value, name) {
    				if (value === false) {
    					// Remove boolean attributes when set to false
    					jQuery.removeAttr(elem, name);
    				} else {
    					elem.setAttribute(name, name);
    				}
    				return name;
    			}
    		};
    		jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
    			var getter = attrHandle[name] || jQuery.find.attr;
    
    			attrHandle[name] = function(elem, name, isXML) {
    				var ret, handle;
    				if (!isXML) {
    					// Avoid an infinite loop by temporarily removing this function from the getter
    					handle = attrHandle[name];
    					attrHandle[name] = ret;
    					ret = getter(elem, name, isXML) != null ?
    						name.toLowerCase() :
    						null;
    					attrHandle[name] = handle;
    				}
    				return ret;
    			};
    		});
    
    
    
    		var rfocusable = /^(?:input|select|textarea|button)$/i;
    
    		jQuery.fn.extend({
    			prop: function(name, value) {
    				return access(this, jQuery.prop, name, value, arguments.length > 1);
    			},
    
    			removeProp: function(name) {
    				return this.each(function() {
    					delete this[jQuery.propFix[name] || name];
    				});
    			}
    		});
    
    		jQuery.extend({
    			propFix: {
    				"for": "htmlFor",
    				"class": "className"
    			},
    
    			prop: function(elem, name, value) {
    				var ret, hooks, notxml,
    					nType = elem.nodeType;
    
    				// Don't get/set properties on text, comment and attribute nodes
    				if (!elem || nType === 3 || nType === 8 || nType === 2) {
    					return;
    				}
    
    				notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
    
    				if (notxml) {
    					// Fix name and attach hooks
    					name = jQuery.propFix[name] || name;
    					hooks = jQuery.propHooks[name];
    				}
    
    				if (value !== undefined) {
    					return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ?
    						ret :
    						(elem[name] = value);
    
    				} else {
    					return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ?
    						ret :
    						elem[name];
    				}
    			},
    
    			propHooks: {
    				tabIndex: {
    					get: function(elem) {
    						return elem.hasAttribute("tabindex") || rfocusable.test(elem.nodeName) || elem.href ?
    							elem.tabIndex :
    							-1;
    					}
    				}
    			}
    		});
    
    		if (!support.optSelected) {
    			jQuery.propHooks.selected = {
    				get: function(elem) {
    					var parent = elem.parentNode;
    					if (parent && parent.parentNode) {
    						parent.parentNode.selectedIndex;
    					}
    					return null;
    				}
    			};
    		}
    
    		jQuery.each([
    			"tabIndex",
    			"readOnly",
    			"maxLength",
    			"cellSpacing",
    			"cellPadding",
    			"rowSpan",
    			"colSpan",
    			"useMap",
    			"frameBorder",
    			"contentEditable"
    		], function() {
    			jQuery.propFix[this.toLowerCase()] = this;
    		});
    
    
    
    		var rclass = /[\t\r\n\f]/g;
    
    		jQuery.fn.extend({
    			addClass: function(value) {
    				var classes, elem, cur, clazz, j, finalValue,
    					proceed = typeof value === "string" && value,
    					i = 0,
    					len = this.length;
    
    				if (jQuery.isFunction(value)) {
    					return this.each(function(j) {
    						jQuery(this).addClass(value.call(this, j, this.className));
    					});
    				}
    
    				if (proceed) {
    					// The disjunction here is for better compressibility (see removeClass)
    					classes = (value || "").match(rnotwhite) || [];
    
    					for (; i < len; i++) {
    						elem = this[i];
    						cur = elem.nodeType === 1 && (elem.className ?
    							(" " + elem.className + " ").replace(rclass, " ") :
    							" "
    						);
    
    						if (cur) {
    							j = 0;
    							while ((clazz = classes[j++])) {
    								if (cur.indexOf(" " + clazz + " ") < 0) {
    									cur += clazz + " ";
    								}
    							}
    
    							// only assign if different to avoid unneeded rendering.
    							finalValue = jQuery.trim(cur);
    							if (elem.className !== finalValue) {
    								elem.className = finalValue;
    							}
    						}
    					}
    				}
    
    				return this;
    			},
    
    			removeClass: function(value) {
    				var classes, elem, cur, clazz, j, finalValue,
    					proceed = arguments.length === 0 || typeof value === "string" && value,
    					i = 0,
    					len = this.length;
    
    				if (jQuery.isFunction(value)) {
    					return this.each(function(j) {
    						jQuery(this).removeClass(value.call(this, j, this.className));
    					});
    				}
    				if (proceed) {
    					classes = (value || "").match(rnotwhite) || [];
    
    					for (; i < len; i++) {
    						elem = this[i];
    						// This expression is here for better compressibility (see addClass)
    						cur = elem.nodeType === 1 && (elem.className ?
    							(" " + elem.className + " ").replace(rclass, " ") :
    							""
    						);
    
    						if (cur) {
    							j = 0;
    							while ((clazz = classes[j++])) {
    								// Remove *all* instances
    								while (cur.indexOf(" " + clazz + " ") >= 0) {
    									cur = cur.replace(" " + clazz + " ", " ");
    								}
    							}
    
    							// Only assign if different to avoid unneeded rendering.
    							finalValue = value ? jQuery.trim(cur) : "";
    							if (elem.className !== finalValue) {
    								elem.className = finalValue;
    							}
    						}
    					}
    				}
    
    				return this;
    			},
    
    			toggleClass: function(value, stateVal) {
    				var type = typeof value;
    
    				if (typeof stateVal === "boolean" && type === "string") {
    					return stateVal ? this.addClass(value) : this.removeClass(value);
    				}
    
    				if (jQuery.isFunction(value)) {
    					return this.each(function(i) {
    						jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
    					});
    				}
    
    				return this.each(function() {
    					if (type === "string") {
    						// Toggle individual class names
    						var className,
    							i = 0,
    							self = jQuery(this),
    							classNames = value.match(rnotwhite) || [];
    
    						while ((className = classNames[i++])) {
    							// Check each className given, space separated list
    							if (self.hasClass(className)) {
    								self.removeClass(className);
    							} else {
    								self.addClass(className);
    							}
    						}
    
    						// Toggle whole class name
    					} else if (type === strundefined || type === "boolean") {
    						if (this.className) {
    							// store className if set
    							data_priv.set(this, "__className__", this.className);
    						}
    
    						// If the element has a class name or if we're passed `false`,
    						// then remove the whole classname (if there was one, the above saved it).
    						// Otherwise bring back whatever was previously saved (if anything),
    						// falling back to the empty string if nothing was stored.
    						this.className = this.className || value === false ? "" : data_priv.get(this, "__className__") || "";
    					}
    				});
    			},
    
    			hasClass: function(selector) {
    				var className = " " + selector + " ",
    					i = 0,
    					l = this.length;
    				for (; i < l; i++) {
    					if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
    						return true;
    					}
    				}
    
    				return false;
    			}
    		});
    
    
    
    		var rreturn = /\r/g;
    
    		jQuery.fn.extend({
    			val: function(value) {
    				var hooks, ret, isFunction,
    					elem = this[0];
    
    				if (!arguments.length) {
    					if (elem) {
    						hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
    
    						if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
    							return ret;
    						}
    
    						ret = elem.value;
    
    						return typeof ret === "string" ?
    							// Handle most common string cases
    							ret.replace(rreturn, "") :
    							// Handle cases where value is null/undef or number
    							ret == null ? "" : ret;
    					}
    
    					return;
    				}
    
    				isFunction = jQuery.isFunction(value);
    
    				return this.each(function(i) {
    					var val;
    
    					if (this.nodeType !== 1) {
    						return;
    					}
    
    					if (isFunction) {
    						val = value.call(this, i, jQuery(this).val());
    					} else {
    						val = value;
    					}
    
    					// Treat null/undefined as ""; convert numbers to string
    					if (val == null) {
    						val = "";
    
    					} else if (typeof val === "number") {
    						val += "";
    
    					} else if (jQuery.isArray(val)) {
    						val = jQuery.map(val, function(value) {
    							return value == null ? "" : value + "";
    						});
    					}
    
    					hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
    
    					// If set returns undefined, fall back to normal setting
    					if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
    						this.value = val;
    					}
    				});
    			}
    		});
    
    		jQuery.extend({
    			valHooks: {
    				option: {
    					get: function(elem) {
    						var val = jQuery.find.attr(elem, "value");
    						return val != null ?
    							val :
    							// Support: IE10-11+
    							// option.text throws exceptions (#14686, #14858)
    							jQuery.trim(jQuery.text(elem));
    					}
    				},
    				select: {
    					get: function(elem) {
    						var value, option,
    							options = elem.options,
    							index = elem.selectedIndex,
    							one = elem.type === "select-one" || index < 0,
    							values = one ? null : [],
    							max = one ? index + 1 : options.length,
    							i = index < 0 ?
    							max :
    							one ? index : 0;
    
    						// Loop through all the selected options
    						for (; i < max; i++) {
    							option = options[i];
    
    							// IE6-9 doesn't update selected after form reset (#2551)
    							if ((option.selected || i === index) &&
    								// Don't return options that are disabled or in a disabled optgroup
    								(support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
    								(!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
    
    								// Get the specific value for the option
    								value = jQuery(option).val();
    
    								// We don't need an array for one selects
    								if (one) {
    									return value;
    								}
    
    								// Multi-Selects return an array
    								values.push(value);
    							}
    						}
    
    						return values;
    					},
    
    					set: function(elem, value) {
    						var optionSet, option,
    							options = elem.options,
    							values = jQuery.makeArray(value),
    							i = options.length;
    
    						while (i--) {
    							option = options[i];
    							if ((option.selected = jQuery.inArray(option.value, values) >= 0)) {
    								optionSet = true;
    							}
    						}
    
    						// Force browsers to behave consistently when non-matching value is set
    						if (!optionSet) {
    							elem.selectedIndex = -1;
    						}
    						return values;
    					}
    				}
    			}
    		});
    
    		// Radios and checkboxes getter/setter
    		jQuery.each(["radio", "checkbox"], function() {
    			jQuery.valHooks[this] = {
    				set: function(elem, value) {
    					if (jQuery.isArray(value)) {
    						return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0);
    					}
    				}
    			};
    			if (!support.checkOn) {
    				jQuery.valHooks[this].get = function(elem) {
    					return elem.getAttribute("value") === null ? "on" : elem.value;
    				};
    			}
    		});
    
    
    
    		// Return jQuery for attributes-only inclusion
    
    
    		jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " +
    			"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
    			"change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name) {
    
    			// Handle event binding
    			jQuery.fn[name] = function(data, fn) {
    				return arguments.length > 0 ?
    					this.on(name, null, data, fn) :
    					this.trigger(name);
    			};
    		});
    
    		jQuery.fn.extend({
    			hover: function(fnOver, fnOut) {
    				return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    			},
    
    			bind: function(types, data, fn) {
    				return this.on(types, null, data, fn);
    			},
    			unbind: function(types, fn) {
    				return this.off(types, null, fn);
    			},
    
    			delegate: function(selector, types, data, fn) {
    				return this.on(types, selector, data, fn);
    			},
    			undelegate: function(selector, types, fn) {
    				// ( namespace ) or ( selector, types [, fn] )
    				return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
    			}
    		});
    
    
    		var nonce = jQuery.now();
    
    		var rquery = (/\?/);
    
    
    
    		// Support: Android 2.3
    		// Workaround failure to string-cast null input
    		jQuery.parseJSON = function(data) {
    			return JSON.parse(data + "");
    		};
    
    
    		// Cross-browser xml parsing
    		jQuery.parseXML = function(data) {
    			var xml, tmp;
    			if (!data || typeof data !== "string") {
    				return null;
    			}
    
    			// Support: IE9
    			try {
    				tmp = new DOMParser();
    				xml = tmp.parseFromString(data, "text/xml");
    			} catch (e) {
    				xml = undefined;
    			}
    
    			if (!xml || xml.getElementsByTagName("parsererror").length) {
    				jQuery.error("Invalid XML: " + data);
    			}
    			return xml;
    		};
    
    
    		var
    			rhash = /#.*$/,
    			rts = /([?&])_=[^&]*/,
    			rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
    			// #7653, #8125, #8152: local protocol detection
    			rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
    			rnoContent = /^(?:GET|HEAD)$/,
    			rprotocol = /^\/\//,
    			rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
    
    			/* Prefilters
    			 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
    			 * 2) These are called:
    			 *    - BEFORE asking for a transport
    			 *    - AFTER param serialization (s.data is a string if s.processData is true)
    			 * 3) key is the dataType
    			 * 4) the catchall symbol "*" can be used
    			 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
    			 */
    			prefilters = {},
    
    			/* Transports bindings
    			 * 1) key is the dataType
    			 * 2) the catchall symbol "*" can be used
    			 * 3) selection will start with transport dataType and THEN go to "*" if needed
    			 */
    			transports = {},
    
    			// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    			allTypes = "*/".concat("*"),
    
    			// Document location
    			ajaxLocation = window.location.href,
    
    			// Segment location into parts
    			ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
    
    		// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    		function addToPrefiltersOrTransports(structure) {
    
    			// dataTypeExpression is optional and defaults to "*"
    			return function(dataTypeExpression, func) {
    
    				if (typeof dataTypeExpression !== "string") {
    					func = dataTypeExpression;
    					dataTypeExpression = "*";
    				}
    
    				var dataType,
    					i = 0,
    					dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
    
    				if (jQuery.isFunction(func)) {
    					// For each dataType in the dataTypeExpression
    					while ((dataType = dataTypes[i++])) {
    						// Prepend if requested
    						if (dataType[0] === "+") {
    							dataType = dataType.slice(1) || "*";
    							(structure[dataType] = structure[dataType] || []).unshift(func);
    
    							// Otherwise append
    						} else {
    							(structure[dataType] = structure[dataType] || []).push(func);
    						}
    					}
    				}
    			};
    		}
    
    		// Base inspection function for prefilters and transports
    		function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
    
    			var inspected = {},
    				seekingTransport = (structure === transports);
    
    			function inspect(dataType) {
    				var selected;
    				inspected[dataType] = true;
    				jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
    					var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
    					if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
    						options.dataTypes.unshift(dataTypeOrTransport);
    						inspect(dataTypeOrTransport);
    						return false;
    					} else if (seekingTransport) {
    						return !(selected = dataTypeOrTransport);
    					}
    				});
    				return selected;
    			}
    
    			return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    		}
    
    		// A special extend for ajax options
    		// that takes "flat" options (not to be deep extended)
    		// Fixes #9887
    		function ajaxExtend(target, src) {
    			var key, deep,
    				flatOptions = jQuery.ajaxSettings.flatOptions || {};
    
    			for (key in src) {
    				if (src[key] !== undefined) {
    					(flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
    				}
    			}
    			if (deep) {
    				jQuery.extend(true, target, deep);
    			}
    
    			return target;
    		}
    
    		/* Handles responses to an ajax request:
    		 * - finds the right dataType (mediates between content-type and expected dataType)
    		 * - returns the corresponding response
    		 */
    		function ajaxHandleResponses(s, jqXHR, responses) {
    
    			var ct, type, finalDataType, firstDataType,
    				contents = s.contents,
    				dataTypes = s.dataTypes;
    
    			// Remove auto dataType and get content-type in the process
    			while (dataTypes[0] === "*") {
    				dataTypes.shift();
    				if (ct === undefined) {
    					ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
    				}
    			}
    
    			// Check if we're dealing with a known content-type
    			if (ct) {
    				for (type in contents) {
    					if (contents[type] && contents[type].test(ct)) {
    						dataTypes.unshift(type);
    						break;
    					}
    				}
    			}
    
    			// Check to see if we have a response for the expected dataType
    			if (dataTypes[0] in responses) {
    				finalDataType = dataTypes[0];
    			} else {
    				// Try convertible dataTypes
    				for (type in responses) {
    					if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
    						finalDataType = type;
    						break;
    					}
    					if (!firstDataType) {
    						firstDataType = type;
    					}
    				}
    				// Or just use first one
    				finalDataType = finalDataType || firstDataType;
    			}
    
    			// If we found a dataType
    			// We add the dataType to the list if needed
    			// and return the corresponding response
    			if (finalDataType) {
    				if (finalDataType !== dataTypes[0]) {
    					dataTypes.unshift(finalDataType);
    				}
    				return responses[finalDataType];
    			}
    		}
    
    		/* Chain conversions given the request and the original response
    		 * Also sets the responseXXX fields on the jqXHR instance
    		 */
    		function ajaxConvert(s, response, jqXHR, isSuccess) {
    			var conv2, current, conv, tmp, prev,
    				converters = {},
    				// Work with a copy of dataTypes in case we need to modify it for conversion
    				dataTypes = s.dataTypes.slice();
    
    			// Create converters map with lowercased keys
    			if (dataTypes[1]) {
    				for (conv in s.converters) {
    					converters[conv.toLowerCase()] = s.converters[conv];
    				}
    			}
    
    			current = dataTypes.shift();
    
    			// Convert to each sequential dataType
    			while (current) {
    
    				if (s.responseFields[current]) {
    					jqXHR[s.responseFields[current]] = response;
    				}
    
    				// Apply the dataFilter if provided
    				if (!prev && isSuccess && s.dataFilter) {
    					response = s.dataFilter(response, s.dataType);
    				}
    
    				prev = current;
    				current = dataTypes.shift();
    
    				if (current) {
    
    					// There's only work to do if current dataType is non-auto
    					if (current === "*") {
    
    						current = prev;
    
    						// Convert response if prev dataType is non-auto and differs from current
    					} else if (prev !== "*" && prev !== current) {
    
    						// Seek a direct converter
    						conv = converters[prev + " " + current] || converters["* " + current];
    
    						// If none found, seek a pair
    						if (!conv) {
    							for (conv2 in converters) {
    
    								// If conv2 outputs current
    								tmp = conv2.split(" ");
    								if (tmp[1] === current) {
    
    									// If prev can be converted to accepted input
    									conv = converters[prev + " " + tmp[0]] ||
    										converters["* " + tmp[0]];
    									if (conv) {
    										// Condense equivalence converters
    										if (conv === true) {
    											conv = converters[conv2];
    
    											// Otherwise, insert the intermediate dataType
    										} else if (converters[conv2] !== true) {
    											current = tmp[0];
    											dataTypes.unshift(tmp[1]);
    										}
    										break;
    									}
    								}
    							}
    						}
    
    						// Apply converter (if not an equivalence)
    						if (conv !== true) {
    
    							// Unless errors are allowed to bubble, catch and return them
    							if (conv && s["throws"]) {
    								response = conv(response);
    							} else {
    								try {
    									response = conv(response);
    								} catch (e) {
    									return {
    										state: "parsererror",
    										error: conv ? e : "No conversion from " + prev + " to " + current
    									};
    								}
    							}
    						}
    					}
    				}
    			}
    
    			return {
    				state: "success",
    				data: response
    			};
    		}
    
    		jQuery.extend({
    
    			// Counter for holding the number of active queries
    			active: 0,
    
    			// Last-Modified header cache for next request
    			lastModified: {},
    			etag: {},
    
    			ajaxSettings: {
    				url: ajaxLocation,
    				type: "GET",
    				isLocal: rlocalProtocol.test(ajaxLocParts[1]),
    				global: true,
    				processData: true,
    				async: true,
    				contentType: "application/x-www-form-urlencoded; charset=UTF-8",
    				/*
    				timeout: 0,
    				data: null,
    				dataType: null,
    				username: null,
    				password: null,
    				cache: null,
    				throws: false,
    				traditional: false,
    				headers: {},
    				*/
    
    				accepts: {
    					"*": allTypes,
    					text: "text/plain",
    					html: "text/html",
    					xml: "application/xml, text/xml",
    					json: "application/json, text/javascript"
    				},
    
    				contents: {
    					xml: /xml/,
    					html: /html/,
    					json: /json/
    				},
    
    				responseFields: {
    					xml: "responseXML",
    					text: "responseText",
    					json: "responseJSON"
    				},
    
    				// Data converters
    				// Keys separate source (or catchall "*") and destination types with a single space
    				converters: {
    
    					// Convert anything to text
    					"* text": String,
    
    					// Text to html (true = no transformation)
    					"text html": true,
    
    					// Evaluate text as a json expression
    					"text json": jQuery.parseJSON,
    
    					// Parse text as xml
    					"text xml": jQuery.parseXML
    				},
    
    				// For options that shouldn't be deep extended:
    				// you can add your own custom options here if
    				// and when you create one that shouldn't be
    				// deep extended (see ajaxExtend)
    				flatOptions: {
    					url: true,
    					context: true
    				}
    			},
    
    			// Creates a full fledged settings object into target
    			// with both ajaxSettings and settings fields.
    			// If target is omitted, writes into ajaxSettings.
    			ajaxSetup: function(target, settings) {
    				return settings ?
    
    					// Building a settings object
    					ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :
    
    					// Extending ajaxSettings
    					ajaxExtend(jQuery.ajaxSettings, target);
    			},
    
    			ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    			ajaxTransport: addToPrefiltersOrTransports(transports),
    
    			// Main method
    			ajax: function(url, options) {
    
    				// If url is an object, simulate pre-1.5 signature
    				if (typeof url === "object") {
    					options = url;
    					url = undefined;
    				}
    
    				// Force options to be an object
    				options = options || {};
    
    				var transport,
    					// URL without anti-cache param
    					cacheURL,
    					// Response headers
    					responseHeadersString,
    					responseHeaders,
    					// timeout handle
    					timeoutTimer,
    					// Cross-domain detection vars
    					parts,
    					// To know if global events are to be dispatched
    					fireGlobals,
    					// Loop variable
    					i,
    					// Create the final options object
    					s = jQuery.ajaxSetup({}, options),
    					// Callbacks context
    					callbackContext = s.context || s,
    					// Context for global events is callbackContext if it is a DOM node or jQuery collection
    					globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ?
    					jQuery(callbackContext) :
    					jQuery.event,
    					// Deferreds
    					deferred = jQuery.Deferred(),
    					completeDeferred = jQuery.Callbacks("once memory"),
    					// Status-dependent callbacks
    					statusCode = s.statusCode || {},
    					// Headers (they are sent all at once)
    					requestHeaders = {},
    					requestHeadersNames = {},
    					// The jqXHR state
    					state = 0,
    					// Default abort message
    					strAbort = "canceled",
    					// Fake xhr
    					jqXHR = {
    						readyState: 0,
    
    						// Builds headers hashtable if needed
    						getResponseHeader: function(key) {
    							var match;
    							if (state === 2) {
    								if (!responseHeaders) {
    									responseHeaders = {};
    									while ((match = rheaders.exec(responseHeadersString))) {
    										responseHeaders[match[1].toLowerCase()] = match[2];
    									}
    								}
    								match = responseHeaders[key.toLowerCase()];
    							}
    							return match == null ? null : match;
    						},
    
    						// Raw string
    						getAllResponseHeaders: function() {
    							return state === 2 ? responseHeadersString : null;
    						},
    
    						// Caches the header
    						setRequestHeader: function(name, value) {
    							var lname = name.toLowerCase();
    							if (!state) {
    								name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
    								requestHeaders[name] = value;
    							}
    							return this;
    						},
    
    						// Overrides response content-type header
    						overrideMimeType: function(type) {
    							if (!state) {
    								s.mimeType = type;
    							}
    							return this;
    						},
    
    						// Status-dependent callbacks
    						statusCode: function(map) {
    							var code;
    							if (map) {
    								if (state < 2) {
    									for (code in map) {
    										// Lazy-add the new callback in a way that preserves old ones
    										statusCode[code] = [statusCode[code], map[code]];
    									}
    								} else {
    									// Execute the appropriate callbacks
    									jqXHR.always(map[jqXHR.status]);
    								}
    							}
    							return this;
    						},
    
    						// Cancel the request
    						abort: function(statusText) {
    							var finalText = statusText || strAbort;
    							if (transport) {
    								transport.abort(finalText);
    							}
    							done(0, finalText);
    							return this;
    						}
    					};
    
    				// Attach deferreds
    				deferred.promise(jqXHR).complete = completeDeferred.add;
    				jqXHR.success = jqXHR.done;
    				jqXHR.error = jqXHR.fail;
    
    				// Remove hash character (#7531: and string promotion)
    				// Add protocol if not provided (prefilters might expect it)
    				// Handle falsy url in the settings object (#10093: consistency with old signature)
    				// We also use the url parameter if available
    				s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "")
    					.replace(rprotocol, ajaxLocParts[1] + "//");
    
    				// Alias method option to type as per ticket #12004
    				s.type = options.method || options.type || s.method || s.type;
    
    				// Extract dataTypes list
    				s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];
    
    				// A cross-domain request is in order when we have a protocol:host:port mismatch
    				if (s.crossDomain == null) {
    					parts = rurl.exec(s.url.toLowerCase());
    					s.crossDomain = !!(parts &&
    						(parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] ||
    							(parts[3] || (parts[1] === "http:" ? "80" : "443")) !==
    							(ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443")))
    					);
    				}
    
    				// Convert data if not already a string
    				if (s.data && s.processData && typeof s.data !== "string") {
    					s.data = jQuery.param(s.data, s.traditional);
    				}
    
    				// Apply prefilters
    				inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
    
    				// If request was aborted inside a prefilter, stop there
    				if (state === 2) {
    					return jqXHR;
    				}
    
    				// We can fire global events as of now if asked to
    				// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
    				fireGlobals = jQuery.event && s.global;
    
    				// Watch for a new set of requests
    				if (fireGlobals && jQuery.active++ === 0) {
    					jQuery.event.trigger("ajaxStart");
    				}
    
    				// Uppercase the type
    				s.type = s.type.toUpperCase();
    
    				// Determine if request has content
    				s.hasContent = !rnoContent.test(s.type);
    
    				// Save the URL in case we're toying with the If-Modified-Since
    				// and/or If-None-Match header later on
    				cacheURL = s.url;
    
    				// More options handling for requests with no content
    				if (!s.hasContent) {
    
    					// If data is available, append data to url
    					if (s.data) {
    						cacheURL = (s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data);
    						// #9682: remove data so that it's not used in an eventual retry
    						delete s.data;
    					}
    
    					// Add anti-cache in url if needed
    					if (s.cache === false) {
    						s.url = rts.test(cacheURL) ?
    
    							// If there is already a '_' parameter, set its value
    							cacheURL.replace(rts, "$1_=" + nonce++) :
    
    							// Otherwise add one to the end
    							cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
    					}
    				}
    
    				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
    				if (s.ifModified) {
    					if (jQuery.lastModified[cacheURL]) {
    						jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
    					}
    					if (jQuery.etag[cacheURL]) {
    						jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
    					}
    				}
    
    				// Set the correct header, if data is being sent
    				if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
    					jqXHR.setRequestHeader("Content-Type", s.contentType);
    				}
    
    				// Set the Accepts header for the server, depending on the dataType
    				jqXHR.setRequestHeader(
    					"Accept",
    					s.dataTypes[0] && s.accepts[s.dataTypes[0]] ?
    					s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") :
    					s.accepts["*"]
    				);
    
    				// Check for headers option
    				for (i in s.headers) {
    					jqXHR.setRequestHeader(i, s.headers[i]);
    				}
    
    				// Allow custom headers/mimetypes and early abort
    				if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
    					// Abort if not done already and return
    					return jqXHR.abort();
    				}
    
    				// Aborting is no longer a cancellation
    				strAbort = "abort";
    
    				// Install callbacks on deferreds
    				for (i in {
    						success: 1,
    						error: 1,
    						complete: 1
    					}) {
    					jqXHR[i](s[i]);
    				}
    
    				// Get transport
    				transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
    
    				// If no transport, we auto-abort
    				if (!transport) {
    					done(-1, "No Transport");
    				} else {
    					jqXHR.readyState = 1;
    
    					// Send global event
    					if (fireGlobals) {
    						globalEventContext.trigger("ajaxSend", [jqXHR, s]);
    					}
    					// Timeout
    					if (s.async && s.timeout > 0) {
    						timeoutTimer = setTimeout(function() {
    							jqXHR.abort("timeout");
    						}, s.timeout);
    					}
    
    					try {
    						state = 1;
    						transport.send(requestHeaders, done);
    					} catch (e) {
    						// Propagate exception as error if not done
    						if (state < 2) {
    							done(-1, e);
    							// Simply rethrow otherwise
    						} else {
    							throw e;
    						}
    					}
    				}
    
    				// Callback for when everything is done
    				function done(status, nativeStatusText, responses, headers) {
    					var isSuccess, success, error, response, modified,
    						statusText = nativeStatusText;
    
    					// Called once
    					if (state === 2) {
    						return;
    					}
    
    					// State is "done" now
    					state = 2;
    
    					// Clear timeout if it exists
    					if (timeoutTimer) {
    						clearTimeout(timeoutTimer);
    					}
    
    					// Dereference transport for early garbage collection
    					// (no matter how long the jqXHR object will be used)
    					transport = undefined;
    
    					// Cache response headers
    					responseHeadersString = headers || "";
    
    					// Set readyState
    					jqXHR.readyState = status > 0 ? 4 : 0;
    
    					// Determine if successful
    					isSuccess = status >= 200 && status < 300 || status === 304;
    
    					// Get response data
    					if (responses) {
    						response = ajaxHandleResponses(s, jqXHR, responses);
    					}
    
    					// Convert no matter what (that way responseXXX fields are always set)
    					response = ajaxConvert(s, response, jqXHR, isSuccess);
    
    					// If successful, handle type chaining
    					if (isSuccess) {
    
    						// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
    						if (s.ifModified) {
    							modified = jqXHR.getResponseHeader("Last-Modified");
    							if (modified) {
    								jQuery.lastModified[cacheURL] = modified;
    							}
    							modified = jqXHR.getResponseHeader("etag");
    							if (modified) {
    								jQuery.etag[cacheURL] = modified;
    							}
    						}
    
    						// if no content
    						if (status === 204 || s.type === "HEAD") {
    							statusText = "nocontent";
    
    							// if not modified
    						} else if (status === 304) {
    							statusText = "notmodified";
    
    							// If we have data, let's convert it
    						} else {
    							statusText = response.state;
    							success = response.data;
    							error = response.error;
    							isSuccess = !error;
    						}
    					} else {
    						// Extract error from statusText and normalize for non-aborts
    						error = statusText;
    						if (status || !statusText) {
    							statusText = "error";
    							if (status < 0) {
    								status = 0;
    							}
    						}
    					}
    
    					// Set data for the fake xhr object
    					jqXHR.status = status;
    					jqXHR.statusText = (nativeStatusText || statusText) + "";
    
    					// Success/Error
    					if (isSuccess) {
    						deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
    					} else {
    						deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
    					}
    
    					// Status-dependent callbacks
    					jqXHR.statusCode(statusCode);
    					statusCode = undefined;
    
    					if (fireGlobals) {
    						globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
    					}
    
    					// Complete
    					completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
    
    					if (fireGlobals) {
    						globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
    						// Handle the global AJAX counter
    						if (!(--jQuery.active)) {
    							jQuery.event.trigger("ajaxStop");
    						}
    					}
    				}
    
    				return jqXHR;
    			},
    
    			getJSON: function(url, data, callback) {
    				return jQuery.get(url, data, callback, "json");
    			},
    
    			getScript: function(url, callback) {
    				return jQuery.get(url, undefined, callback, "script");
    			}
    		});
    
    		jQuery.each(["get", "post"], function(i, method) {
    			jQuery[method] = function(url, data, callback, type) {
    				// Shift arguments if data argument was omitted
    				if (jQuery.isFunction(data)) {
    					type = type || callback;
    					callback = data;
    					data = undefined;
    				}
    
    				return jQuery.ajax({
    					url: url,
    					type: method,
    					dataType: type,
    					data: data,
    					success: callback
    				});
    			};
    		});
    
    
    		jQuery._evalUrl = function(url) {
    			return jQuery.ajax({
    				url: url,
    				type: "GET",
    				dataType: "script",
    				async: false,
    				global: false,
    				"throws": true
    			});
    		};
    
    
    		jQuery.fn.extend({
    			wrapAll: function(html) {
    				var wrap;
    
    				if (jQuery.isFunction(html)) {
    					return this.each(function(i) {
    						jQuery(this).wrapAll(html.call(this, i));
    					});
    				}
    
    				if (this[0]) {
    
    					// The elements to wrap the target around
    					wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
    
    					if (this[0].parentNode) {
    						wrap.insertBefore(this[0]);
    					}
    
    					wrap.map(function() {
    						var elem = this;
    
    						while (elem.firstElementChild) {
    							elem = elem.firstElementChild;
    						}
    
    						return elem;
    					}).append(this);
    				}
    
    				return this;
    			},
    
    			wrapInner: function(html) {
    				if (jQuery.isFunction(html)) {
    					return this.each(function(i) {
    						jQuery(this).wrapInner(html.call(this, i));
    					});
    				}
    
    				return this.each(function() {
    					var self = jQuery(this),
    						contents = self.contents();
    
    					if (contents.length) {
    						contents.wrapAll(html);
    
    					} else {
    						self.append(html);
    					}
    				});
    			},
    
    			wrap: function(html) {
    				var isFunction = jQuery.isFunction(html);
    
    				return this.each(function(i) {
    					jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
    				});
    			},
    
    			unwrap: function() {
    				return this.parent().each(function() {
    					if (!jQuery.nodeName(this, "body")) {
    						jQuery(this).replaceWith(this.childNodes);
    					}
    				}).end();
    			}
    		});
    
    
    		jQuery.expr.filters.hidden = function(elem) {
    			// Support: Opera <= 12.12
    			// Opera reports offsetWidths and offsetHeights less than zero on some elements
    			return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
    		};
    		jQuery.expr.filters.visible = function(elem) {
    			return !jQuery.expr.filters.hidden(elem);
    		};
    
    
    
    		var r20 = /%20/g,
    			rbracket = /\[\]$/,
    			rCRLF = /\r?\n/g,
    			rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
    			rsubmittable = /^(?:input|select|textarea|keygen)/i;
    
    		function buildParams(prefix, obj, traditional, add) {
    			var name;
    
    			if (jQuery.isArray(obj)) {
    				// Serialize array item.
    				jQuery.each(obj, function(i, v) {
    					if (traditional || rbracket.test(prefix)) {
    						// Treat each array item as a scalar.
    						add(prefix, v);
    
    					} else {
    						// Item is non-scalar (array or object), encode its numeric index.
    						buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
    					}
    				});
    
    			} else if (!traditional && jQuery.type(obj) === "object") {
    				// Serialize object item.
    				for (name in obj) {
    					buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
    				}
    
    			} else {
    				// Serialize scalar item.
    				add(prefix, obj);
    			}
    		}
    
    		// Serialize an array of form elements or a set of
    		// key/values into a query string
    		jQuery.param = function(a, traditional) {
    			var prefix,
    				s = [],
    				add = function(key, value) {
    					// If value is a function, invoke it and return its value
    					value = jQuery.isFunction(value) ? value() : (value == null ? "" : value);
    					s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
    				};
    
    			// Set traditional to true for jQuery <= 1.3.2 behavior.
    			if (traditional === undefined) {
    				traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
    			}
    
    			// If an array was passed in, assume that it is an array of form elements.
    			if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
    				// Serialize the form elements
    				jQuery.each(a, function() {
    					add(this.name, this.value);
    				});
    
    			} else {
    				// If traditional, encode the "old" way (the way 1.3.2 or older
    				// did it), otherwise encode params recursively.
    				for (prefix in a) {
    					buildParams(prefix, a[prefix], traditional, add);
    				}
    			}
    
    			// Return the resulting serialization
    			return s.join("&").replace(r20, "+");
    		};
    
    		jQuery.fn.extend({
    			serialize: function() {
    				return jQuery.param(this.serializeArray());
    			},
    			serializeArray: function() {
    				return this.map(function() {
    						// Can add propHook for "elements" to filter or add form elements
    						var elements = jQuery.prop(this, "elements");
    						return elements ? jQuery.makeArray(elements) : this;
    					})
    					.filter(function() {
    						var type = this.type;
    
    						// Use .is( ":disabled" ) so that fieldset[disabled] works
    						return this.name && !jQuery(this).is(":disabled") &&
    							rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) &&
    							(this.checked || !rcheckableType.test(type));
    					})
    					.map(function(i, elem) {
    						var val = jQuery(this).val();
    
    						return val == null ?
    							null :
    							jQuery.isArray(val) ?
    							jQuery.map(val, function(val) {
    								return {
    									name: elem.name,
    									value: val.replace(rCRLF, "\r\n")
    								};
    							}) : {
    								name: elem.name,
    								value: val.replace(rCRLF, "\r\n")
    							};
    					}).get();
    			}
    		});
    
    
    		jQuery.ajaxSettings.xhr = function() {
    			try {
    				return new XMLHttpRequest();
    			} catch (e) {}
    		};
    
    		var xhrId = 0,
    			xhrCallbacks = {},
    			xhrSuccessStatus = {
    				// file protocol always yields status code 0, assume 200
    				0: 200,
    				// Support: IE9
    				// #1450: sometimes IE returns 1223 when it should be 204
    				1223: 204
    			},
    			xhrSupported = jQuery.ajaxSettings.xhr();
    
    		// Support: IE9
    		// Open requests must be manually aborted on unload (#5280)
    		// See https://support.microsoft.com/kb/2856746 for more info
    		if (window.attachEvent) {
    			window.attachEvent("onunload", function() {
    				for (var key in xhrCallbacks) {
    					xhrCallbacks[key]();
    				}
    			});
    		}
    
    		support.cors = !!xhrSupported && ("withCredentials" in xhrSupported);
    		support.ajax = xhrSupported = !!xhrSupported;
    
    		jQuery.ajaxTransport(function(options) {
    			var callback;
    
    			// Cross domain only allowed if supported through XMLHttpRequest
    			if (support.cors || xhrSupported && !options.crossDomain) {
    				return {
    					send: function(headers, complete) {
    						var i,
    							xhr = options.xhr(),
    							id = ++xhrId;
    
    						xhr.open(options.type, options.url, options.async, options.username, options.password);
    
    						// Apply custom fields if provided
    						if (options.xhrFields) {
    							for (i in options.xhrFields) {
    								xhr[i] = options.xhrFields[i];
    							}
    						}
    
    						// Override mime type if needed
    						if (options.mimeType && xhr.overrideMimeType) {
    							xhr.overrideMimeType(options.mimeType);
    						}
    
    						// X-Requested-With header
    						// For cross-domain requests, seeing as conditions for a preflight are
    						// akin to a jigsaw puzzle, we simply never set it to be sure.
    						// (it can always be set on a per-request basis or even using ajaxSetup)
    						// For same-domain requests, won't change header if already provided.
    						if (!options.crossDomain && !headers["X-Requested-With"]) {
    							headers["X-Requested-With"] = "XMLHttpRequest";
    						}
    
    						// Set headers
    						for (i in headers) {
    							xhr.setRequestHeader(i, headers[i]);
    						}
    
    						// Callback
    						callback = function(type) {
    							return function() {
    								if (callback) {
    									delete xhrCallbacks[id];
    									callback = xhr.onload = xhr.onerror = null;
    
    									if (type === "abort") {
    										xhr.abort();
    									} else if (type === "error") {
    										complete(
    											// file: protocol always yields status 0; see #8605, #14207
    											xhr.status,
    											xhr.statusText
    										);
    									} else {
    										complete(
    											xhrSuccessStatus[xhr.status] || xhr.status,
    											xhr.statusText,
    											// Support: IE9
    											// Accessing binary-data responseText throws an exception
    											// (#11426)
    											typeof xhr.responseText === "string" ? {
    												text: xhr.responseText
    											} : undefined,
    											xhr.getAllResponseHeaders()
    										);
    									}
    								}
    							};
    						};
    
    						// Listen to events
    						xhr.onload = callback();
    						xhr.onerror = callback("error");
    
    						// Create the abort callback
    						callback = xhrCallbacks[id] = callback("abort");
    
    						try {
    							// Do send the request (this may raise an exception)
    							xhr.send(options.hasContent && options.data || null);
    						} catch (e) {
    							// #14683: Only rethrow if this hasn't been notified as an error yet
    							if (callback) {
    								throw e;
    							}
    						}
    					},
    
    					abort: function() {
    						if (callback) {
    							callback();
    						}
    					}
    				};
    			}
    		});
    
    
    
    		// Install script dataType
    		jQuery.ajaxSetup({
    			accepts: {
    				script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
    			},
    			contents: {
    				script: /(?:java|ecma)script/
    			},
    			converters: {
    				"text script": function(text) {
    					jQuery.globalEval(text);
    					return text;
    				}
    			}
    		});
    
    		// Handle cache's special case and crossDomain
    		jQuery.ajaxPrefilter("script", function(s) {
    			if (s.cache === undefined) {
    				s.cache = false;
    			}
    			if (s.crossDomain) {
    				s.type = "GET";
    			}
    		});
    
    		// Bind script tag hack transport
    		jQuery.ajaxTransport("script", function(s) {
    			// This transport only deals with cross domain requests
    			if (s.crossDomain) {
    				var script, callback;
    				return {
    					send: function(_, complete) {
    						script = jQuery("<script>").prop({
    							async: true,
    							charset: s.scriptCharset,
    							src: s.url
    						}).on(
    							"load error",
    							callback = function(evt) {
    								script.remove();
    								callback = null;
    								if (evt) {
    									complete(evt.type === "error" ? 404 : 200, evt.type);
    								}
    							}
    						);
    						document.head.appendChild(script[0]);
    					},
    					abort: function() {
    						if (callback) {
    							callback();
    						}
    					}
    				};
    			}
    		});
    
    
    
    		var oldCallbacks = [],
    			rjsonp = /(=)\?(?=&|$)|\?\?/;
    
    		// Default jsonp settings
    		jQuery.ajaxSetup({
    			jsonp: "callback",
    			jsonpCallback: function() {
    				var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (nonce++));
    				this[callback] = true;
    				return callback;
    			}
    		});
    
    		// Detect, normalize options and install callbacks for jsonp requests
    		jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
    
    			var callbackName, overwritten, responseContainer,
    				jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ?
    					"url" :
    					typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data"
    				);
    
    			// Handle iff the expected data type is "jsonp" or we have a parameter to set
    			if (jsonProp || s.dataTypes[0] === "jsonp") {
    
    				// Get callback name, remembering preexisting value associated with it
    				callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ?
    					s.jsonpCallback() :
    					s.jsonpCallback;
    
    				// Insert callback into url or form data
    				if (jsonProp) {
    					s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
    				} else if (s.jsonp !== false) {
    					s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
    				}
    
    				// Use data converter to retrieve json after script execution
    				s.converters["script json"] = function() {
    					if (!responseContainer) {
    						jQuery.error(callbackName + " was not called");
    					}
    					return responseContainer[0];
    				};
    
    				// force json dataType
    				s.dataTypes[0] = "json";
    
    				// Install callback
    				overwritten = window[callbackName];
    				window[callbackName] = function() {
    					responseContainer = arguments;
    				};
    
    				// Clean-up function (fires after converters)
    				jqXHR.always(function() {
    					// Restore preexisting value
    					window[callbackName] = overwritten;
    
    					// Save back as free
    					if (s[callbackName]) {
    						// make sure that re-using the options doesn't screw things around
    						s.jsonpCallback = originalSettings.jsonpCallback;
    
    						// save the callback name for future use
    						oldCallbacks.push(callbackName);
    					}
    
    					// Call if it was a function and we have a response
    					if (responseContainer && jQuery.isFunction(overwritten)) {
    						overwritten(responseContainer[0]);
    					}
    
    					responseContainer = overwritten = undefined;
    				});
    
    				// Delegate to script
    				return "script";
    			}
    		});
    
    
    
    		// data: string of html
    		// context (optional): If specified, the fragment will be created in this context, defaults to document
    		// keepScripts (optional): If true, will include scripts passed in the html string
    		jQuery.parseHTML = function(data, context, keepScripts) {
    			if (!data || typeof data !== "string") {
    				return null;
    			}
    			if (typeof context === "boolean") {
    				keepScripts = context;
    				context = false;
    			}
    			context = context || document;
    
    			var parsed = rsingleTag.exec(data),
    				scripts = !keepScripts && [];
    
    			// Single tag
    			if (parsed) {
    				return [context.createElement(parsed[1])];
    			}
    
    			parsed = jQuery.buildFragment([data], context, scripts);
    
    			if (scripts && scripts.length) {
    				jQuery(scripts).remove();
    			}
    
    			return jQuery.merge([], parsed.childNodes);
    		};
    
    
    		// Keep a copy of the old load method
    		var _load = jQuery.fn.load;
    
    		/**
    		 * Load a url into a page
    		 */
    		jQuery.fn.load = function(url, params, callback) {
    			if (typeof url !== "string" && _load) {
    				return _load.apply(this, arguments);
    			}
    
    			var selector, type, response,
    				self = this,
    				off = url.indexOf(" ");
    
    			if (off >= 0) {
    				selector = jQuery.trim(url.slice(off));
    				url = url.slice(0, off);
    			}
    
    			// If it's a function
    			if (jQuery.isFunction(params)) {
    
    				// We assume that it's the callback
    				callback = params;
    				params = undefined;
    
    				// Otherwise, build a param string
    			} else if (params && typeof params === "object") {
    				type = "POST";
    			}
    
    			// If we have elements to modify, make the request
    			if (self.length > 0) {
    				jQuery.ajax({
    					url: url,
    
    					// if "type" variable is undefined, then "GET" method will be used
    					type: type,
    					dataType: "html",
    					data: params
    				}).done(function(responseText) {
    
    					// Save response for use in complete callback
    					response = arguments;
    
    					self.html(selector ?
    
    						// If a selector was specified, locate the right elements in a dummy div
    						// Exclude scripts to avoid IE 'Permission Denied' errors
    						jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :
    
    						// Otherwise use the full result
    						responseText);
    
    				}).complete(callback && function(jqXHR, status) {
    					self.each(callback, response || [jqXHR.responseText, status, jqXHR]);
    				});
    			}
    
    			return this;
    		};
    
    
    
    		// Attach a bunch of functions for handling common AJAX events
    		jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(i, type) {
    			jQuery.fn[type] = function(fn) {
    				return this.on(type, fn);
    			};
    		});
    
    
    
    		jQuery.expr.filters.animated = function(elem) {
    			return jQuery.grep(jQuery.timers, function(fn) {
    				return elem === fn.elem;
    			}).length;
    		};
    
    
    
    		var docElem = window.document.documentElement;
    
    		/**
    		 * Gets a window from an element
    		 */
    		function getWindow(elem) {
    			return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
    		}
    
    		jQuery.offset = {
    			setOffset: function(elem, options, i) {
    				var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
    					position = jQuery.css(elem, "position"),
    					curElem = jQuery(elem),
    					props = {};
    
    				// Set position first, in-case top/left are set even on static elem
    				if (position === "static") {
    					elem.style.position = "relative";
    				}
    
    				curOffset = curElem.offset();
    				curCSSTop = jQuery.css(elem, "top");
    				curCSSLeft = jQuery.css(elem, "left");
    				calculatePosition = (position === "absolute" || position === "fixed") &&
    					(curCSSTop + curCSSLeft).indexOf("auto") > -1;
    
    				// Need to be able to calculate position if either
    				// top or left is auto and position is either absolute or fixed
    				if (calculatePosition) {
    					curPosition = curElem.position();
    					curTop = curPosition.top;
    					curLeft = curPosition.left;
    
    				} else {
    					curTop = parseFloat(curCSSTop) || 0;
    					curLeft = parseFloat(curCSSLeft) || 0;
    				}
    
    				if (jQuery.isFunction(options)) {
    					options = options.call(elem, i, curOffset);
    				}
    
    				if (options.top != null) {
    					props.top = (options.top - curOffset.top) + curTop;
    				}
    				if (options.left != null) {
    					props.left = (options.left - curOffset.left) + curLeft;
    				}
    
    				if ("using" in options) {
    					options.using.call(elem, props);
    
    				} else {
    					curElem.css(props);
    				}
    			}
    		};
    
    		jQuery.fn.extend({
    			offset: function(options) {
    				if (arguments.length) {
    					return options === undefined ?
    						this :
    						this.each(function(i) {
    							jQuery.offset.setOffset(this, options, i);
    						});
    				}
    
    				var docElem, win,
    					elem = this[0],
    					box = {
    						top: 0,
    						left: 0
    					},
    					doc = elem && elem.ownerDocument;
    
    				if (!doc) {
    					return;
    				}
    
    				docElem = doc.documentElement;
    
    				// Make sure it's not a disconnected DOM node
    				if (!jQuery.contains(docElem, elem)) {
    					return box;
    				}
    
    				// Support: BlackBerry 5, iOS 3 (original iPhone)
    				// If we don't have gBCR, just use 0,0 rather than error
    				if (typeof elem.getBoundingClientRect !== strundefined) {
    					box = elem.getBoundingClientRect();
    				}
    				win = getWindow(doc);
    				return {
    					top: box.top + win.pageYOffset - docElem.clientTop,
    					left: box.left + win.pageXOffset - docElem.clientLeft
    				};
    			},
    
    			position: function() {
    				if (!this[0]) {
    					return;
    				}
    
    				var offsetParent, offset,
    					elem = this[0],
    					parentOffset = {
    						top: 0,
    						left: 0
    					};
    
    				// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
    				if (jQuery.css(elem, "position") === "fixed") {
    					// Assume getBoundingClientRect is there when computed position is fixed
    					offset = elem.getBoundingClientRect();
    
    				} else {
    					// Get *real* offsetParent
    					offsetParent = this.offsetParent();
    
    					// Get correct offsets
    					offset = this.offset();
    					if (!jQuery.nodeName(offsetParent[0], "html")) {
    						parentOffset = offsetParent.offset();
    					}
    
    					// Add offsetParent borders
    					parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
    					parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
    				}
    
    				// Subtract parent offsets and element margins
    				return {
    					top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
    					left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
    				};
    			},
    
    			offsetParent: function() {
    				return this.map(function() {
    					var offsetParent = this.offsetParent || docElem;
    
    					while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static")) {
    						offsetParent = offsetParent.offsetParent;
    					}
    
    					return offsetParent || docElem;
    				});
    			}
    		});
    
    		// Create scrollLeft and scrollTop methods
    		jQuery.each({
    			scrollLeft: "pageXOffset",
    			scrollTop: "pageYOffset"
    		}, function(method, prop) {
    			var top = "pageYOffset" === prop;
    
    			jQuery.fn[method] = function(val) {
    				return access(this, function(elem, method, val) {
    					var win = getWindow(elem);
    
    					if (val === undefined) {
    						return win ? win[prop] : elem[method];
    					}
    
    					if (win) {
    						win.scrollTo(!top ? val : window.pageXOffset,
    							top ? val : window.pageYOffset
    						);
    
    					} else {
    						elem[method] = val;
    					}
    				}, method, val, arguments.length, null);
    			};
    		});
    
    		// Support: Safari<7+, Chrome<37+
    		// Add the top/left cssHooks using jQuery.fn.position
    		// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
    		// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
    		// getComputedStyle returns percent when specified for top/left/bottom/right;
    		// rather than make the css module depend on the offset module, just check for it here
    		jQuery.each(["top", "left"], function(i, prop) {
    			jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition,
    				function(elem, computed) {
    					if (computed) {
    						computed = curCSS(elem, prop);
    						// If curCSS returns percentage, fallback to offset
    						return rnumnonpx.test(computed) ?
    							jQuery(elem).position()[prop] + "px" :
    							computed;
    					}
    				}
    			);
    		});
    
    
    		// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    		jQuery.each({
    			Height: "height",
    			Width: "width"
    		}, function(name, type) {
    			jQuery.each({
    				padding: "inner" + name,
    				content: type,
    				"": "outer" + name
    			}, function(defaultExtra, funcName) {
    				// Margin is only for outerHeight, outerWidth
    				jQuery.fn[funcName] = function(margin, value) {
    					var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
    						extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
    
    					return access(this, function(elem, type, value) {
    						var doc;
    
    						if (jQuery.isWindow(elem)) {
    							// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
    							// isn't a whole lot we can do. See pull request at this URL for discussion:
    							// https://github.com/jquery/jquery/pull/764
    							return elem.document.documentElement["client" + name];
    						}
    
    						// Get document width or height
    						if (elem.nodeType === 9) {
    							doc = elem.documentElement;
    
    							// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
    							// whichever is greatest
    							return Math.max(
    								elem.body["scroll" + name], doc["scroll" + name],
    								elem.body["offset" + name], doc["offset" + name],
    								doc["client" + name]
    							);
    						}
    
    						return value === undefined ?
    							// Get width or height on the element, requesting but not forcing parseFloat
    							jQuery.css(elem, type, extra) :
    
    							// Set width or height on the element
    							jQuery.style(elem, type, value, extra);
    					}, type, chainable ? margin : undefined, chainable, null);
    				};
    			});
    		});
    
    
    		// The number of elements contained in the matched element set
    		jQuery.fn.size = function() {
    			return this.length;
    		};
    
    		jQuery.fn.andSelf = jQuery.fn.addBack;
    
    
    
    		// Register as a named AMD module, since jQuery can be concatenated with other
    		// files that may use define, but not via a proper concatenation script that
    		// understands anonymous AMD modules. A named AMD is safest and most robust
    		// way to register. Lowercase jquery is used because AMD module names are
    		// derived from file names, and jQuery is normally delivered in a lowercase
    		// file name. Do this after creating the global so that if an AMD module wants
    		// to call noConflict to hide this version of jQuery, it will work.
    
    		// Note that for maximum portability, libraries that are not jQuery should
    		// declare themselves as anonymous modules, and avoid setting a global if an
    		// AMD loader is present. jQuery is a special case. For more information, see
    		// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
    
    		if (typeof define === "function" && define.amd) {
    			define("jquery", [], function() {
    				return jQuery;
    			});
    		}
    
    
    
    		var
    		// Map over jQuery in case of overwrite
    			_jQuery = window.jQuery,
    
    			// Map over the $ in case of overwrite
    			_$ = window.$;
    
    		jQuery.noConflict = function(deep) {
    			if (window.$ === jQuery) {
    				window.$ = _$;
    			}
    
    			if (deep && window.jQuery === jQuery) {
    				window.jQuery = _jQuery;
    			}
    
    			return jQuery;
    		};
    
    		// Expose jQuery and $ identifiers, even in AMD
    		// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
    		// and CommonJS for browser emulators (#13566)
    		if (typeof noGlobal === strundefined) {
    			window.jQuery = window.$ = jQuery;
    		}
    
    
    
    		return jQuery;
    
    	})(window, true);
    });
    //     Underscore.js 1.7.0
    //     http://underscorejs.org
    //     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
    //     Underscore may be freely distributed under the MIT license.
    define('lib/underscore',function() {
    
      // Baseline setup
      // --------------
    
      // Establish the root object, `window` in the browser, or `exports` on the server.
      var root = this;
    
      // Save the previous value of the `_` variable.
      var previousUnderscore = root._;
    
      // Save bytes in the minified (but not gzipped) version:
      var ArrayProto = Array.prototype,
        ObjProto = Object.prototype,
        FuncProto = Function.prototype;
    
      // Create quick reference variables for speed access to core prototypes.
      var
        push = ArrayProto.push,
        slice = ArrayProto.slice,
        concat = ArrayProto.concat,
        toString = ObjProto.toString,
        hasOwnProperty = ObjProto.hasOwnProperty;
    
      // All **ECMAScript 5** native function implementations that we hope to use
      // are declared here.
      var
        nativeIsArray = Array.isArray,
        nativeKeys = Object.keys,
        nativeBind = FuncProto.bind;
    
      // Create a safe reference to the Underscore object for use below.
      var _ = function(obj) {
        if (obj instanceof _) return obj;
        if (!(this instanceof _)) return new _(obj);
        this._wrapped = obj;
      };
    
      // Export the Underscore object for **Node.js**, with
      // backwards-compatibility for the old `require()` API. If we're in
      // the browser, add `_` as a global object.
      if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
          exports = module.exports = _;
        }
        exports._ = _;
      } else {
        root._ = _;
      }
    
      // Current version.
      _.VERSION = '1.7.0';
    
      // Internal function that returns an efficient (for current engines) version
      // of the passed-in callback, to be repeatedly applied in other Underscore
      // functions.
      var createCallback = function(func, context, argCount) {
        if (context === void 0) return func;
        switch (argCount == null ? 3 : argCount) {
          case 1:
            return function(value) {
              return func.call(context, value);
            };
          case 2:
            return function(value, other) {
              return func.call(context, value, other);
            };
          case 3:
            return function(value, index, collection) {
              return func.call(context, value, index, collection);
            };
          case 4:
            return function(accumulator, value, index, collection) {
              return func.call(context, accumulator, value, index, collection);
            };
        }
        return function() {
          return func.apply(context, arguments);
        };
      };
    
      // A mostly-internal function to generate callbacks that can be applied
      // to each element in a collection, returning the desired result — either
      // identity, an arbitrary callback, a property matcher, or a property accessor.
      _.iteratee = function(value, context, argCount) {
        if (value == null) return _.identity;
        if (_.isFunction(value)) return createCallback(value, context, argCount);
        if (_.isObject(value)) return _.matches(value);
        return _.property(value);
      };
    
      // Collection Functions
      // --------------------
    
      // The cornerstone, an `each` implementation, aka `forEach`.
      // Handles raw objects in addition to array-likes. Treats all
      // sparse array-likes as if they were dense.
      _.each = _.forEach = function(obj, iteratee, context) {
        if (obj == null) return obj;
        iteratee = createCallback(iteratee, context);
        var i, length = obj.length;
        if (length === +length) {
          for (i = 0; i < length; i++) {
            iteratee(obj[i], i, obj);
          }
        } else {
          var keys = _.keys(obj);
          for (i = 0, length = keys.length; i < length; i++) {
            iteratee(obj[keys[i]], keys[i], obj);
          }
        }
        return obj;
      };
    
      // Return the results of applying the iteratee to each element.
      _.map = _.collect = function(obj, iteratee, context) {
        if (obj == null) return [];
        iteratee = _.iteratee(iteratee, context);
        var keys = obj.length !== +obj.length && _.keys(obj),
          length = (keys || obj).length,
          results = Array(length),
          currentKey;
        for (var index = 0; index < length; index++) {
          currentKey = keys ? keys[index] : index;
          results[index] = iteratee(obj[currentKey], currentKey, obj);
        }
        return results;
      };
    
      var reduceError = 'Reduce of empty array with no initial value';
    
      // **Reduce** builds up a single result from a list of values, aka `inject`,
      // or `foldl`.
      _.reduce = _.foldl = _.inject = function(obj, iteratee, memo, context) {
        if (obj == null) obj = [];
        iteratee = createCallback(iteratee, context, 4);
        var keys = obj.length !== +obj.length && _.keys(obj),
          length = (keys || obj).length,
          index = 0,
          currentKey;
        if (arguments.length < 3) {
          if (!length) throw new TypeError(reduceError);
          memo = obj[keys ? keys[index++] : index++];
        }
        for (; index < length; index++) {
          currentKey = keys ? keys[index] : index;
          memo = iteratee(memo, obj[currentKey], currentKey, obj);
        }
        return memo;
      };
    
      // The right-associative version of reduce, also known as `foldr`.
      _.reduceRight = _.foldr = function(obj, iteratee, memo, context) {
        if (obj == null) obj = [];
        iteratee = createCallback(iteratee, context, 4);
        var keys = obj.length !== +obj.length && _.keys(obj),
          index = (keys || obj).length,
          currentKey;
        if (arguments.length < 3) {
          if (!index) throw new TypeError(reduceError);
          memo = obj[keys ? keys[--index] : --index];
        }
        while (index--) {
          currentKey = keys ? keys[index] : index;
          memo = iteratee(memo, obj[currentKey], currentKey, obj);
        }
        return memo;
      };
    
      // Return the first value which passes a truth test. Aliased as `detect`.
      _.find = _.detect = function(obj, predicate, context) {
        var result;
        predicate = _.iteratee(predicate, context);
        _.some(obj, function(value, index, list) {
          if (predicate(value, index, list)) {
            result = value;
            return true;
          }
        });
        return result;
      };
    
      // Return all the elements that pass a truth test.
      // Aliased as `select`.
      _.filter = _.select = function(obj, predicate, context) {
        var results = [];
        if (obj == null) return results;
        predicate = _.iteratee(predicate, context);
        _.each(obj, function(value, index, list) {
          if (predicate(value, index, list)) results.push(value);
        });
        return results;
      };
    
      // Return all the elements for which a truth test fails.
      _.reject = function(obj, predicate, context) {
        return _.filter(obj, _.negate(_.iteratee(predicate)), context);
      };
    
      // Determine whether all of the elements match a truth test.
      // Aliased as `all`.
      _.every = _.all = function(obj, predicate, context) {
        if (obj == null) return true;
        predicate = _.iteratee(predicate, context);
        var keys = obj.length !== +obj.length && _.keys(obj),
          length = (keys || obj).length,
          index, currentKey;
        for (index = 0; index < length; index++) {
          currentKey = keys ? keys[index] : index;
          if (!predicate(obj[currentKey], currentKey, obj)) return false;
        }
        return true;
      };
    
      // Determine if at least one element in the object matches a truth test.
      // Aliased as `any`.
      _.some = _.any = function(obj, predicate, context) {
        if (obj == null) return false;
        predicate = _.iteratee(predicate, context);
        var keys = obj.length !== +obj.length && _.keys(obj),
          length = (keys || obj).length,
          index, currentKey;
        for (index = 0; index < length; index++) {
          currentKey = keys ? keys[index] : index;
          if (predicate(obj[currentKey], currentKey, obj)) return true;
        }
        return false;
      };
    
      // Determine if the array or object contains a given value (using `===`).
      // Aliased as `include`.
      _.contains = _.include = function(obj, target) {
        if (obj == null) return false;
        if (obj.length !== +obj.length) obj = _.values(obj);
        return _.indexOf(obj, target) >= 0;
      };
    
      // Invoke a method (with arguments) on every item in a collection.
      _.invoke = function(obj, method) {
        var args = slice.call(arguments, 2);
        var isFunc = _.isFunction(method);
        return _.map(obj, function(value) {
          return (isFunc ? method : value[method]).apply(value, args);
        });
      };
    
      // Convenience version of a common use case of `map`: fetching a property.
      _.pluck = function(obj, key) {
        return _.map(obj, _.property(key));
      };
    
      // Convenience version of a common use case of `filter`: selecting only objects
      // containing specific `key:value` pairs.
      _.where = function(obj, attrs) {
        return _.filter(obj, _.matches(attrs));
      };
    
      // Convenience version of a common use case of `find`: getting the first object
      // containing specific `key:value` pairs.
      _.findWhere = function(obj, attrs) {
        return _.find(obj, _.matches(attrs));
      };
    
      // Return the maximum element (or element-based computation).
      _.max = function(obj, iteratee, context) {
        var result = -Infinity,
          lastComputed = -Infinity,
          value, computed;
        if (iteratee == null && obj != null) {
          obj = obj.length === +obj.length ? obj : _.values(obj);
          for (var i = 0, length = obj.length; i < length; i++) {
            value = obj[i];
            if (value > result) {
              result = value;
            }
          }
        } else {
          iteratee = _.iteratee(iteratee, context);
          _.each(obj, function(value, index, list) {
            computed = iteratee(value, index, list);
            if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
              result = value;
              lastComputed = computed;
            }
          });
        }
        return result;
      };
    
      // Return the minimum element (or element-based computation).
      _.min = function(obj, iteratee, context) {
        var result = Infinity,
          lastComputed = Infinity,
          value, computed;
        if (iteratee == null && obj != null) {
          obj = obj.length === +obj.length ? obj : _.values(obj);
          for (var i = 0, length = obj.length; i < length; i++) {
            value = obj[i];
            if (value < result) {
              result = value;
            }
          }
        } else {
          iteratee = _.iteratee(iteratee, context);
          _.each(obj, function(value, index, list) {
            computed = iteratee(value, index, list);
            if (computed < lastComputed || computed === Infinity && result === Infinity) {
              result = value;
              lastComputed = computed;
            }
          });
        }
        return result;
      };
    
      // Shuffle a collection, using the modern version of the
      // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
      _.shuffle = function(obj) {
        var set = obj && obj.length === +obj.length ? obj : _.values(obj);
        var length = set.length;
        var shuffled = Array(length);
        for (var index = 0, rand; index < length; index++) {
          rand = _.random(0, index);
          if (rand !== index) shuffled[index] = shuffled[rand];
          shuffled[rand] = set[index];
        }
        return shuffled;
      };
    
      // Sample **n** random values from a collection.
      // If **n** is not specified, returns a single random element.
      // The internal `guard` argument allows it to work with `map`.
      _.sample = function(obj, n, guard) {
        if (n == null || guard) {
          if (obj.length !== +obj.length) obj = _.values(obj);
          return obj[_.random(obj.length - 1)];
        }
        return _.shuffle(obj).slice(0, Math.max(0, n));
      };
    
      // Sort the object's values by a criterion produced by an iteratee.
      _.sortBy = function(obj, iteratee, context) {
        iteratee = _.iteratee(iteratee, context);
        return _.pluck(_.map(obj, function(value, index, list) {
          return {
            value: value,
            index: index,
            criteria: iteratee(value, index, list)
          };
        }).sort(function(left, right) {
          var a = left.criteria;
          var b = right.criteria;
          if (a !== b) {
            if (a > b || a === void 0) return 1;
            if (a < b || b === void 0) return -1;
          }
          return left.index - right.index;
        }), 'value');
      };
    
      // An internal function used for aggregate "group by" operations.
      var group = function(behavior) {
        return function(obj, iteratee, context) {
          var result = {};
          iteratee = _.iteratee(iteratee, context);
          _.each(obj, function(value, index) {
            var key = iteratee(value, index, obj);
            behavior(result, value, key);
          });
          return result;
        };
      };
    
      // Groups the object's values by a criterion. Pass either a string attribute
      // to group by, or a function that returns the criterion.
      _.groupBy = group(function(result, value, key) {
        if (_.has(result, key)) result[key].push(value);
        else result[key] = [value];
      });
    
      // Indexes the object's values by a criterion, similar to `groupBy`, but for
      // when you know that your index values will be unique.
      _.indexBy = group(function(result, value, key) {
        result[key] = value;
      });
    
      // Counts instances of an object that group by a certain criterion. Pass
      // either a string attribute to count by, or a function that returns the
      // criterion.
      _.countBy = group(function(result, value, key) {
        if (_.has(result, key)) result[key]++;
        else result[key] = 1;
      });
    
      // Use a comparator function to figure out the smallest index at which
      // an object should be inserted so as to maintain order. Uses binary search.
      _.sortedIndex = function(array, obj, iteratee, context) {
        iteratee = _.iteratee(iteratee, context, 1);
        var value = iteratee(obj);
        var low = 0,
          high = array.length;
        while (low < high) {
          var mid = low + high >>> 1;
          if (iteratee(array[mid]) < value) low = mid + 1;
          else high = mid;
        }
        return low;
      };
    
      // Safely create a real, live array from anything iterable.
      _.toArray = function(obj) {
        if (!obj) return [];
        if (_.isArray(obj)) return slice.call(obj);
        if (obj.length === +obj.length) return _.map(obj, _.identity);
        return _.values(obj);
      };
    
      // Return the number of elements in an object.
      _.size = function(obj) {
        if (obj == null) return 0;
        return obj.length === +obj.length ? obj.length : _.keys(obj).length;
      };
    
      // Split a collection into two arrays: one whose elements all satisfy the given
      // predicate, and one whose elements all do not satisfy the predicate.
      _.partition = function(obj, predicate, context) {
        predicate = _.iteratee(predicate, context);
        var pass = [],
          fail = [];
        _.each(obj, function(value, key, obj) {
          (predicate(value, key, obj) ? pass : fail).push(value);
        });
        return [pass, fail];
      };
    
      // Array Functions
      // ---------------
    
      // Get the first element of an array. Passing **n** will return the first N
      // values in the array. Aliased as `head` and `take`. The **guard** check
      // allows it to work with `_.map`.
      _.first = _.head = _.take = function(array, n, guard) {
        if (array == null) return void 0;
        if (n == null || guard) return array[0];
        if (n < 0) return [];
        return slice.call(array, 0, n);
      };
    
      // Returns everything but the last entry of the array. Especially useful on
      // the arguments object. Passing **n** will return all the values in
      // the array, excluding the last N. The **guard** check allows it to work with
      // `_.map`.
      _.initial = function(array, n, guard) {
        return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
      };
    
      // Get the last element of an array. Passing **n** will return the last N
      // values in the array. The **guard** check allows it to work with `_.map`.
      _.last = function(array, n, guard) {
        if (array == null) return void 0;
        if (n == null || guard) return array[array.length - 1];
        return slice.call(array, Math.max(array.length - n, 0));
      };
    
      // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
      // Especially useful on the arguments object. Passing an **n** will return
      // the rest N values in the array. The **guard**
      // check allows it to work with `_.map`.
      _.rest = _.tail = _.drop = function(array, n, guard) {
        return slice.call(array, n == null || guard ? 1 : n);
      };
    
      // Trim out all falsy values from an array.
      _.compact = function(array) {
        return _.filter(array, _.identity);
      };
    
      // Internal implementation of a recursive `flatten` function.
      var flatten = function(input, shallow, strict, output) {
        if (shallow && _.every(input, _.isArray)) {
          return concat.apply(output, input);
        }
        for (var i = 0, length = input.length; i < length; i++) {
          var value = input[i];
          if (!_.isArray(value) && !_.isArguments(value)) {
            if (!strict) output.push(value);
          } else if (shallow) {
            push.apply(output, value);
          } else {
            flatten(value, shallow, strict, output);
          }
        }
        return output;
      };
    
      // Flatten out an array, either recursively (by default), or just one level.
      _.flatten = function(array, shallow) {
        return flatten(array, shallow, false, []);
      };
    
      // Return a version of the array that does not contain the specified value(s).
      _.without = function(array) {
        return _.difference(array, slice.call(arguments, 1));
      };
    
      // Produce a duplicate-free version of the array. If the array has already
      // been sorted, you have the option of using a faster algorithm.
      // Aliased as `unique`.
      _.uniq = _.unique = function(array, isSorted, iteratee, context) {
        if (array == null) return [];
        if (!_.isBoolean(isSorted)) {
          context = iteratee;
          iteratee = isSorted;
          isSorted = false;
        }
        if (iteratee != null) iteratee = _.iteratee(iteratee, context);
        var result = [];
        var seen = [];
        for (var i = 0, length = array.length; i < length; i++) {
          var value = array[i];
          if (isSorted) {
            if (!i || seen !== value) result.push(value);
            seen = value;
          } else if (iteratee) {
            var computed = iteratee(value, i, array);
            if (_.indexOf(seen, computed) < 0) {
              seen.push(computed);
              result.push(value);
            }
          } else if (_.indexOf(result, value) < 0) {
            result.push(value);
          }
        }
        return result;
      };
    
      // Produce an array that contains the union: each distinct element from all of
      // the passed-in arrays.
      _.union = function() {
        return _.uniq(flatten(arguments, true, true, []));
      };
    
      // Produce an array that contains every item shared between all the
      // passed-in arrays.
      _.intersection = function(array) {
        if (array == null) return [];
        var result = [];
        var argsLength = arguments.length;
        for (var i = 0, length = array.length; i < length; i++) {
          var item = array[i];
          if (_.contains(result, item)) continue;
          for (var j = 1; j < argsLength; j++) {
            if (!_.contains(arguments[j], item)) break;
          }
          if (j === argsLength) result.push(item);
        }
        return result;
      };
    
      // Take the difference between one array and a number of other arrays.
      // Only the elements present in just the first array will remain.
      _.difference = function(array) {
        var rest = flatten(slice.call(arguments, 1), true, true, []);
        return _.filter(array, function(value) {
          return !_.contains(rest, value);
        });
      };
    
      // Zip together multiple lists into a single array -- elements that share
      // an index go together.
      _.zip = function(array) {
        if (array == null) return [];
        var length = _.max(arguments, 'length').length;
        var results = Array(length);
        for (var i = 0; i < length; i++) {
          results[i] = _.pluck(arguments, i);
        }
        return results;
      };
    
      // Converts lists into objects. Pass either a single array of `[key, value]`
      // pairs, or two parallel arrays of the same length -- one of keys, and one of
      // the corresponding values.
      _.object = function(list, values) {
        if (list == null) return {};
        var result = {};
        for (var i = 0, length = list.length; i < length; i++) {
          if (values) {
            result[list[i]] = values[i];
          } else {
            result[list[i][0]] = list[i][1];
          }
        }
        return result;
      };
    
      // Return the position of the first occurrence of an item in an array,
      // or -1 if the item is not included in the array.
      // If the array is large and already in sort order, pass `true`
      // for **isSorted** to use binary search.
      _.indexOf = function(array, item, isSorted) {
        if (array == null) return -1;
        var i = 0,
          length = array.length;
        if (isSorted) {
          if (typeof isSorted == 'number') {
            i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
          } else {
            i = _.sortedIndex(array, item);
            return array[i] === item ? i : -1;
          }
        }
        for (; i < length; i++)
          if (array[i] === item) return i;
        return -1;
      };
    
      _.lastIndexOf = function(array, item, from) {
        if (array == null) return -1;
        var idx = array.length;
        if (typeof from == 'number') {
          idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);
        }
        while (--idx >= 0)
          if (array[idx] === item) return idx;
        return -1;
      };
    
      // Generate an integer Array containing an arithmetic progression. A port of
      // the native Python `range()` function. See
      // [the Python documentation](http://docs.python.org/library/functions.html#range).
      _.range = function(start, stop, step) {
        if (arguments.length <= 1) {
          stop = start || 0;
          start = 0;
        }
        step = step || 1;
    
        var length = Math.max(Math.ceil((stop - start) / step), 0);
        var range = Array(length);
    
        for (var idx = 0; idx < length; idx++, start += step) {
          range[idx] = start;
        }
    
        return range;
      };
    
      // Function (ahem) Functions
      // ------------------
    
      // Reusable constructor function for prototype setting.
      var Ctor = function() {};
    
      // Create a function bound to a given object (assigning `this`, and arguments,
      // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
      // available.
      _.bind = function(func, context) {
        var args, bound;
        if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
        args = slice.call(arguments, 2);
        bound = function() {
          if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
          Ctor.prototype = func.prototype;
          var self = new Ctor;
          Ctor.prototype = null;
          var result = func.apply(self, args.concat(slice.call(arguments)));
          if (_.isObject(result)) return result;
          return self;
        };
        return bound;
      };
    
      // Partially apply a function by creating a version that has had some of its
      // arguments pre-filled, without changing its dynamic `this` context. _ acts
      // as a placeholder, allowing any combination of arguments to be pre-filled.
      _.partial = function(func) {
        var boundArgs = slice.call(arguments, 1);
        return function() {
          var position = 0;
          var args = boundArgs.slice();
          for (var i = 0, length = args.length; i < length; i++) {
            if (args[i] === _) args[i] = arguments[position++];
          }
          while (position < arguments.length) args.push(arguments[position++]);
          return func.apply(this, args);
        };
      };
    
      // Bind a number of an object's methods to that object. Remaining arguments
      // are the method names to be bound. Useful for ensuring that all callbacks
      // defined on an object belong to it.
      _.bindAll = function(obj) {
        var i, length = arguments.length,
          key;
        if (length <= 1) throw new Error('bindAll must be passed function names');
        for (i = 1; i < length; i++) {
          key = arguments[i];
          obj[key] = _.bind(obj[key], obj);
        }
        return obj;
      };
    
      // Memoize an expensive function by storing its results.
      _.memoize = function(func, hasher) {
        var memoize = function(key) {
          var cache = memoize.cache;
          var address = hasher ? hasher.apply(this, arguments) : key;
          if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
          return cache[address];
        };
        memoize.cache = {};
        return memoize;
      };
    
      // Delays a function for the given number of milliseconds, and then calls
      // it with the arguments supplied.
      _.delay = function(func, wait) {
        var args = slice.call(arguments, 2);
        return setTimeout(function() {
          return func.apply(null, args);
        }, wait);
      };
    
      // Defers a function, scheduling it to run after the current call stack has
      // cleared.
      _.defer = function(func) {
        return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
      };
    
      // Returns a function, that, when invoked, will only be triggered at most once
      // during a given window of time. Normally, the throttled function will run
      // as much as it can, without ever going more than once per `wait` duration;
      // but if you'd like to disable the execution on the leading edge, pass
      // `{leading: false}`. To disable execution on the trailing edge, ditto.
      _.throttle = function(func, wait, options) {
        var context, args, result;
        var timeout = null;
        var previous = 0;
        if (!options) options = {};
        var later = function() {
          previous = options.leading === false ? 0 : _.now();
          timeout = null;
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        };
        return function() {
          var now = _.now();
          if (!previous && options.leading === false) previous = now;
          var remaining = wait - (now - previous);
          context = this;
          args = arguments;
          if (remaining <= 0 || remaining > wait) {
            clearTimeout(timeout);
            timeout = null;
            previous = now;
            result = func.apply(context, args);
            if (!timeout) context = args = null;
          } else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
          }
          return result;
        };
      };
    
      // Returns a function, that, as long as it continues to be invoked, will not
      // be triggered. The function will be called after it stops being called for
      // N milliseconds. If `immediate` is passed, trigger the function on the
      // leading edge, instead of the trailing.
      _.debounce = function(func, wait, immediate) {
        var timeout, args, context, timestamp, result;
    
        var later = function() {
          var last = _.now() - timestamp;
    
          if (last < wait && last > 0) {
            timeout = setTimeout(later, wait - last);
          } else {
            timeout = null;
            if (!immediate) {
              result = func.apply(context, args);
              if (!timeout) context = args = null;
            }
          }
        };
    
        return function() {
          context = this;
          args = arguments;
          timestamp = _.now();
          var callNow = immediate && !timeout;
          if (!timeout) timeout = setTimeout(later, wait);
          if (callNow) {
            result = func.apply(context, args);
            context = args = null;
          }
    
          return result;
        };
      };
    
      // Returns the first function passed as an argument to the second,
      // allowing you to adjust arguments, run code before and after, and
      // conditionally execute the original function.
      _.wrap = function(func, wrapper) {
        return _.partial(wrapper, func);
      };
    
      // Returns a negated version of the passed-in predicate.
      _.negate = function(predicate) {
        return function() {
          return !predicate.apply(this, arguments);
        };
      };
    
      // Returns a function that is the composition of a list of functions, each
      // consuming the return value of the function that follows.
      _.compose = function() {
        var args = arguments;
        var start = args.length - 1;
        return function() {
          var i = start;
          var result = args[start].apply(this, arguments);
          while (i--) result = args[i].call(this, result);
          return result;
        };
      };
    
      // Returns a function that will only be executed after being called N times.
      _.after = function(times, func) {
        return function() {
          if (--times < 1) {
            return func.apply(this, arguments);
          }
        };
      };
    
      // Returns a function that will only be executed before being called N times.
      _.before = function(times, func) {
        var memo;
        return function() {
          if (--times > 0) {
            memo = func.apply(this, arguments);
          } else {
            func = null;
          }
          return memo;
        };
      };
    
      // Returns a function that will be executed at most one time, no matter how
      // often you call it. Useful for lazy initialization.
      _.once = _.partial(_.before, 2);
    
      // Object Functions
      // ----------------
    
      // Retrieve the names of an object's properties.
      // Delegates to **ECMAScript 5**'s native `Object.keys`
      _.keys = function(obj) {
        if (!_.isObject(obj)) return [];
        if (nativeKeys) return nativeKeys(obj);
        var keys = [];
        for (var key in obj)
          if (_.has(obj, key)) keys.push(key);
        return keys;
      };
    
      // Retrieve the values of an object's properties.
      _.values = function(obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var values = Array(length);
        for (var i = 0; i < length; i++) {
          values[i] = obj[keys[i]];
        }
        return values;
      };
    
      // Convert an object into a list of `[key, value]` pairs.
      _.pairs = function(obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var pairs = Array(length);
        for (var i = 0; i < length; i++) {
          pairs[i] = [keys[i], obj[keys[i]]];
        }
        return pairs;
      };
    
      // Invert the keys and values of an object. The values must be serializable.
      _.invert = function(obj) {
        var result = {};
        var keys = _.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) {
          result[obj[keys[i]]] = keys[i];
        }
        return result;
      };
    
      // Return a sorted list of the function names available on the object.
      // Aliased as `methods`
      _.functions = _.methods = function(obj) {
        var names = [];
        for (var key in obj) {
          if (_.isFunction(obj[key])) names.push(key);
        }
        return names.sort();
      };
    
      // Extend a given object with all the properties in passed-in object(s).
      _.extend = function(obj) {
        if (!_.isObject(obj)) return obj;
        var source, prop;
        for (var i = 1, length = arguments.length; i < length; i++) {
          source = arguments[i];
          for (prop in source) {
            if (hasOwnProperty.call(source, prop)) {
              obj[prop] = source[prop];
            }
          }
        }
        return obj;
      };
    
      // Return a copy of the object only containing the whitelisted properties.
      _.pick = function(obj, iteratee, context) {
        var result = {},
          key;
        if (obj == null) return result;
        if (_.isFunction(iteratee)) {
          iteratee = createCallback(iteratee, context);
          for (key in obj) {
            var value = obj[key];
            if (iteratee(value, key, obj)) result[key] = value;
          }
        } else {
          var keys = concat.apply([], slice.call(arguments, 1));
          obj = new Object(obj);
          for (var i = 0, length = keys.length; i < length; i++) {
            key = keys[i];
            if (key in obj) result[key] = obj[key];
          }
        }
        return result;
      };
    
      // Return a copy of the object without the blacklisted properties.
      _.omit = function(obj, iteratee, context) {
        if (_.isFunction(iteratee)) {
          iteratee = _.negate(iteratee);
        } else {
          var keys = _.map(concat.apply([], slice.call(arguments, 1)), String);
          iteratee = function(value, key) {
            return !_.contains(keys, key);
          };
        }
        return _.pick(obj, iteratee, context);
      };
    
      // Fill in a given object with default properties.
      _.defaults = function(obj) {
        if (!_.isObject(obj)) return obj;
        for (var i = 1, length = arguments.length; i < length; i++) {
          var source = arguments[i];
          for (var prop in source) {
            if (obj[prop] === void 0) obj[prop] = source[prop];
          }
        }
        return obj;
      };
    
      // Create a (shallow-cloned) duplicate of an object.
      _.clone = function(obj) {
        if (!_.isObject(obj)) return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
      };
    
      // Invokes interceptor with the obj, and then returns obj.
      // The primary purpose of this method is to "tap into" a method chain, in
      // order to perform operations on intermediate results within the chain.
      _.tap = function(obj, interceptor) {
        interceptor(obj);
        return obj;
      };
    
      // Internal recursive comparison function for `isEqual`.
      var eq = function(a, b, aStack, bStack) {
        // Identical objects are equal. `0 === -0`, but they aren't identical.
        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
        if (a === b) return a !== 0 || 1 / a === 1 / b;
        // A strict comparison is necessary because `null == undefined`.
        if (a == null || b == null) return a === b;
        // Unwrap any wrapped objects.
        if (a instanceof _) a = a._wrapped;
        if (b instanceof _) b = b._wrapped;
        // Compare `[[Class]]` names.
        var className = toString.call(a);
        if (className !== toString.call(b)) return false;
        switch (className) {
          // Strings, numbers, regular expressions, dates, and booleans are compared by value.
          case '[object RegExp]':
            // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
          case '[object String]':
            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
            // equivalent to `new String("5")`.
            return '' + a === '' + b;
          case '[object Number]':
            // `NaN`s are equivalent, but non-reflexive.
            // Object(NaN) is equivalent to NaN
            if (+a !== +a) return +b !== +b;
            // An `egal` comparison is performed for other numeric values.
            return +a === 0 ? 1 / +a === 1 / b : +a === +b;
          case '[object Date]':
          case '[object Boolean]':
            // Coerce dates and booleans to numeric primitive values. Dates are compared by their
            // millisecond representations. Note that invalid dates with millisecond representations
            // of `NaN` are not equivalent.
            return +a === +b;
        }
        if (typeof a != 'object' || typeof b != 'object') return false;
        // Assume equality for cyclic structures. The algorithm for detecting cyclic
        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
        var length = aStack.length;
        while (length--) {
          // Linear search. Performance is inversely proportional to the number of
          // unique nested structures.
          if (aStack[length] === a) return bStack[length] === b;
        }
        // Objects with different constructors are not equivalent, but `Object`s
        // from different frames are.
        var aCtor = a.constructor,
          bCtor = b.constructor;
        if (
          aCtor !== bCtor &&
          // Handle Object.create(x) cases
          'constructor' in a && 'constructor' in b &&
          !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
            _.isFunction(bCtor) && bCtor instanceof bCtor)
        ) {
          return false;
        }
        // Add the first object to the stack of traversed objects.
        aStack.push(a);
        bStack.push(b);
        var size, result;
        // Recursively compare objects and arrays.
        if (className === '[object Array]') {
          // Compare array lengths to determine if a deep comparison is necessary.
          size = a.length;
          result = size === b.length;
          if (result) {
            // Deep compare the contents, ignoring non-numeric properties.
            while (size--) {
              if (!(result = eq(a[size], b[size], aStack, bStack))) break;
            }
          }
        } else {
          // Deep compare objects.
          var keys = _.keys(a),
            key;
          size = keys.length;
          // Ensure that both objects contain the same number of properties before comparing deep equality.
          result = _.keys(b).length === size;
          if (result) {
            while (size--) {
              // Deep compare each member
              key = keys[size];
              if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
            }
          }
        }
        // Remove the first object from the stack of traversed objects.
        aStack.pop();
        bStack.pop();
        return result;
      };
    
      // Perform a deep comparison to check if two objects are equal.
      _.isEqual = function(a, b) {
        return eq(a, b, [], []);
      };
    
      // Is a given array, string, or object empty?
      // An "empty" object has no enumerable own-properties.
      _.isEmpty = function(obj) {
        if (obj == null) return true;
        if (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)) return obj.length === 0;
        for (var key in obj)
          if (_.has(obj, key)) return false;
        return true;
      };
    
      // Is a given value a DOM element?
      _.isElement = function(obj) {
        return !!(obj && obj.nodeType === 1);
      };
    
      // Is a given value an array?
      // Delegates to ECMA5's native Array.isArray
      _.isArray = nativeIsArray || function(obj) {
        return toString.call(obj) === '[object Array]';
      };
    
      // Is a given variable an object?
      _.isObject = function(obj) {
        var type = typeof obj;
        return type === 'function' || type === 'object' && !!obj;
      };
    
      // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
      _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
        _['is' + name] = function(obj) {
          return toString.call(obj) === '[object ' + name + ']';
        };
      });
    
      // Define a fallback version of the method in browsers (ahem, IE), where
      // there isn't any inspectable "Arguments" type.
      if (!_.isArguments(arguments)) {
        _.isArguments = function(obj) {
          return _.has(obj, 'callee');
        };
      }
    
      // Optimize `isFunction` if appropriate. Work around an IE 11 bug.
      if (typeof /./ !== 'function') {
        _.isFunction = function(obj) {
          return typeof obj == 'function' || false;
        };
      }
    
      // Is a given object a finite number?
      _.isFinite = function(obj) {
        return isFinite(obj) && !isNaN(parseFloat(obj));
      };
    
      // Is the given value `NaN`? (NaN is the only number which does not equal itself).
      _.isNaN = function(obj) {
        return _.isNumber(obj) && obj !== +obj;
      };
    
      // Is a given value a boolean?
      _.isBoolean = function(obj) {
        return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
      };
    
      // Is a given value equal to null?
      _.isNull = function(obj) {
        return obj === null;
      };
    
      // Is a given variable undefined?
      _.isUndefined = function(obj) {
        return obj === void 0;
      };
    
      // Shortcut function for checking if an object has a given property directly
      // on itself (in other words, not on a prototype).
      _.has = function(obj, key) {
        return obj != null && hasOwnProperty.call(obj, key);
      };
    
      // Utility Functions
      // -----------------
    
      // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
      // previous owner. Returns a reference to the Underscore object.
      _.noConflict = function() {
        root._ = previousUnderscore;
        return this;
      };
    
      // Keep the identity function around for default iteratees.
      _.identity = function(value) {
        return value;
      };
    
      _.constant = function(value) {
        return function() {
          return value;
        };
      };
    
      _.noop = function() {};
    
      _.property = function(key) {
        return function(obj) {
          return obj[key];
        };
      };
    
      // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
      _.matches = function(attrs) {
        var pairs = _.pairs(attrs),
          length = pairs.length;
        return function(obj) {
          if (obj == null) return !length;
          obj = new Object(obj);
          for (var i = 0; i < length; i++) {
            var pair = pairs[i],
              key = pair[0];
            if (pair[1] !== obj[key] || !(key in obj)) return false;
          }
          return true;
        };
      };
    
      // Run a function **n** times.
      _.times = function(n, iteratee, context) {
        var accum = Array(Math.max(0, n));
        iteratee = createCallback(iteratee, context, 1);
        for (var i = 0; i < n; i++) accum[i] = iteratee(i);
        return accum;
      };
    
      // Return a random integer between min and max (inclusive).
      _.random = function(min, max) {
        if (max == null) {
          max = min;
          min = 0;
        }
        return min + Math.floor(Math.random() * (max - min + 1));
      };
    
      // A (possibly faster) way to get the current timestamp as an integer.
      _.now = Date.now || function() {
        return new Date().getTime();
      };
    
      // List of HTML entities for escaping.
      var escapeMap = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#x27;',
        '`': '&#x60;'
      };
      var unescapeMap = _.invert(escapeMap);
    
      // Functions for escaping and unescaping strings to/from HTML interpolation.
      var createEscaper = function(map) {
        var escaper = function(match) {
          return map[match];
        };
        // Regexes for identifying a key that needs to be escaped
        var source = '(?:' + _.keys(map).join('|') + ')';
        var testRegexp = RegExp(source);
        var replaceRegexp = RegExp(source, 'g');
        return function(string) {
          string = string == null ? '' : '' + string;
          return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
        };
      };
      _.escape = createEscaper(escapeMap);
      _.unescape = createEscaper(unescapeMap);
    
      // If the value of the named `property` is a function then invoke it with the
      // `object` as context; otherwise, return it.
      _.result = function(object, property) {
        if (object == null) return void 0;
        var value = object[property];
        return _.isFunction(value) ? object[property]() : value;
      };
    
      // Generate a unique integer id (unique within the entire client session).
      // Useful for temporary DOM ids.
      var idCounter = 0;
      _.uniqueId = function(prefix) {
        var id = ++idCounter + '';
        return prefix ? prefix + id : id;
      };
    
      // By default, Underscore uses ERB-style template delimiters, change the
      // following template settings to use alternative delimiters.
      _.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
      };
    
      // When customizing `templateSettings`, if you don't want to define an
      // interpolation, evaluation or escaping regex, we need one that is
      // guaranteed not to match.
      var noMatch = /(.)^/;
    
      // Certain characters need to be escaped so that they can be put into a
      // string literal.
      var escapes = {
        "'": "'",
        '\\': '\\',
        '\r': 'r',
        '\n': 'n',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
      };
    
      var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
    
      var escapeChar = function(match) {
        return '\\' + escapes[match];
      };
    
      // JavaScript micro-templating, similar to John Resig's implementation.
      // Underscore templating handles arbitrary delimiters, preserves whitespace,
      // and correctly escapes quotes within interpolated code.
      // NB: `oldSettings` only exists for backwards compatibility.
      _.template = function(text, settings, oldSettings) {
        if (!settings && oldSettings) settings = oldSettings;
        settings = _.defaults({}, settings, _.templateSettings);
    
        // Combine delimiters into one regular expression via alternation.
        var matcher = RegExp([
          (settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source
        ].join('|') + '|$', 'g');
    
        // Compile the template source, escaping string literals appropriately.
        var index = 0;
        var source = "__p+='";
        text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
          source += text.slice(index, offset).replace(escaper, escapeChar);
          index = offset + match.length;
    
          if (escape) {
            source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
          } else if (interpolate) {
            source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
          } else if (evaluate) {
            source += "';\n" + evaluate + "\n__p+='";
          }
    
          // Adobe VMs need the match returned to produce the correct offest.
          return match;
        });
        source += "';\n";
    
        // If a variable is not specified, place data values in local scope.
        if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';
    
        source = "var __t,__p='',__j=Array.prototype.join," +
          "print=function(){__p+=__j.call(arguments,'');};\n" +
          source + 'return __p;\n';
    
        try {
          var render = new Function(settings.variable || 'obj', '_', source);
        } catch (e) {
          e.source = source;
          throw e;
        }
    
        var template = function(data) {
          return render.call(this, data, _);
        };
    
        // Provide the compiled source as a convenience for precompilation.
        var argument = settings.variable || 'obj';
        template.source = 'function(' + argument + '){\n' + source + '}';
    
        return template;
      };
    
      // Add a "chain" function. Start chaining a wrapped Underscore object.
      _.chain = function(obj) {
        var instance = _(obj);
        instance._chain = true;
        return instance;
      };
    
      // OOP
      // ---------------
      // If Underscore is called as a function, it returns a wrapped object that
      // can be used OO-style. This wrapper holds altered versions of all the
      // underscore functions. Wrapped objects may be chained.
    
      // Helper function to continue chaining intermediate results.
      var result = function(obj) {
        return this._chain ? _(obj).chain() : obj;
      };
    
      // Add your own custom functions to the Underscore object.
      _.mixin = function(obj) {
        _.each(_.functions(obj), function(name) {
          var func = _[name] = obj[name];
          _.prototype[name] = function() {
            var args = [this._wrapped];
            push.apply(args, arguments);
            return result.call(this, func.apply(_, args));
          };
        });
      };
    
      // Add all of the Underscore functions to the wrapper object.
      _.mixin(_);
    
      // Add all mutator Array functions to the wrapper.
      _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
          var obj = this._wrapped;
          method.apply(obj, arguments);
          if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
          return result.call(this, obj);
        };
      });
    
      // Add all accessor Array functions to the wrapper.
      _.each(['concat', 'join', 'slice'], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
          return result.call(this, method.apply(this._wrapped, arguments));
        };
      });
    
      // Extracts the result from a wrapped and chained object.
      _.prototype.value = function() {
        return this._wrapped;
      };
      return _;
    });
    //     Backbone.js 1.1.2
    
    //     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
    //     Backbone may be freely distributed under the MIT license.
    //     For all details and documentation:
    //     http://backbonejs.org
    define('lib/backbone',function() {
      var _ = require('lib/underscore'),
        $ = require('lib/jquery'),
        root = window,
        Backbone = {};
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      // Initial Setup
      // -------------
    
      // Save the previous value of the `Backbone` variable, so that it can be
      // restored later on, if `noConflict` is used.
      var previousBackbone = root.Backbone;
    
      // Create local references to array methods we'll want to use later.
      var array = [];
      var push = array.push;
      var slice = array.slice;
      var splice = array.splice;
    
      // Current version of the library. Keep in sync with `package.json`.
      Backbone.VERSION = '1.1.2';
    
      // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
      // the `$` variable.
      Backbone.$ = $;
    
      // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
      // to its previous owner. Returns a reference to this Backbone object.
      Backbone.noConflict = function() {
        root.Backbone = previousBackbone;
        return this;
      };
    
      // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
      // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
      // set a `X-Http-Method-Override` header.
      Backbone.emulateHTTP = false;
    
      // Turn on `emulateJSON` to support legacy servers that can't deal with direct
      // `application/json` requests ... will encode the body as
      // `application/x-www-form-urlencoded` instead and will send the model in a
      // form param named `model`.
      Backbone.emulateJSON = false;
    
      // Backbone.Events
      // ---------------
    
      // A module that can be mixed in to *any object* in order to provide it with
      // custom events. You may bind with `on` or remove with `off` callback
      // functions to an event; `trigger`-ing an event fires all callbacks in
      // succession.
      //
      //     var object = {};
      //     _.extend(object, Backbone.Events);
      //     object.on('expand', function(){ alert('expanded'); });
      //     object.trigger('expand');
      //
      var Events = Backbone.Events = {
    
        // Bind an event to a `callback` function. Passing `"all"` will bind
        // the callback to all events fired.
        on: function(name, callback, context) {
          if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;
          this._events || (this._events = {});
          var events = this._events[name] || (this._events[name] = []);
          events.push({
            callback: callback,
            context: context,
            ctx: context || this
          });
          return this;
        },
    
        // Bind an event to only be triggered a single time. After the first time
        // the callback is invoked, it will be removed.
        once: function(name, callback, context) {
          if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;
          var self = this;
          var once = _.once(function() {
            self.off(name, once);
            callback.apply(this, arguments);
          });
          once._callback = callback;
          return this.on(name, once, context);
        },
    
        // Remove one or many callbacks. If `context` is null, removes all
        // callbacks with that function. If `callback` is null, removes all
        // callbacks for the event. If `name` is null, removes all bound
        // callbacks for all events.
        off: function(name, callback, context) {
          var retain, ev, events, names, i, l, j, k;
          if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;
          if (!name && !callback && !context) {
            this._events = void 0;
            return this;
          }
          names = name ? [name] : _.keys(this._events);
          for (i = 0, l = names.length; i < l; i++) {
            name = names[i];
            if (events = this._events[name]) {
              this._events[name] = retain = [];
              if (callback || context) {
                for (j = 0, k = events.length; j < k; j++) {
                  ev = events[j];
                  if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||
                    (context && context !== ev.context)) {
                    retain.push(ev);
                  }
                }
              }
              if (!retain.length) delete this._events[name];
            }
          }
    
          return this;
        },
    
        // Trigger one or many events, firing all bound callbacks. Callbacks are
        // passed the same arguments as `trigger` is, apart from the event name
        // (unless you're listening on `"all"`, which will cause your callback to
        // receive the true name of the event as the first argument).
        trigger: function(name) {
          if (!this._events) return this;
          var args = slice.call(arguments, 1);
          if (!eventsApi(this, 'trigger', name, args)) return this;
          var events = this._events[name];
          var allEvents = this._events.all;
          if (events) triggerEvents(events, args);
          if (allEvents) triggerEvents(allEvents, arguments);
          return this;
        },
    
        // Tell this object to stop listening to either specific events ... or
        // to every object it's currently listening to.
        stopListening: function(obj, name, callback) {
          var listeningTo = this._listeningTo;
          if (!listeningTo) return this;
          var remove = !name && !callback;
          if (!callback && typeof name === 'object') callback = this;
          if (obj)(listeningTo = {})[obj._listenId] = obj;
          for (var id in listeningTo) {
            obj = listeningTo[id];
            obj.off(name, callback, this);
            if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];
          }
          return this;
        }
    
      };
    
      // Regular expression used to split event strings.
      var eventSplitter = /\s+/;
    
      // Implement fancy features of the Events API such as multiple event
      // names `"change blur"` and jQuery-style event maps `{change: action}`
      // in terms of the existing API.
      var eventsApi = function(obj, action, name, rest) {
        if (!name) return true;
    
        // Handle event maps.
        if (typeof name === 'object') {
          for (var key in name) {
            obj[action].apply(obj, [key, name[key]].concat(rest));
          }
          return false;
        }
    
        // Handle space separated event names.
        if (eventSplitter.test(name)) {
          var names = name.split(eventSplitter);
          for (var i = 0, l = names.length; i < l; i++) {
            obj[action].apply(obj, [names[i]].concat(rest));
          }
          return false;
        }
    
        return true;
      };
    
      // A difficult-to-believe, but optimized internal dispatch function for
      // triggering events. Tries to keep the usual cases speedy (most internal
      // Backbone events have 3 arguments).
      var triggerEvents = function(events, args) {
        var ev, i = -1,
          l = events.length,
          a1 = args[0],
          a2 = args[1],
          a3 = args[2];
        switch (args.length) {
          case 0:
            while (++i < l)(ev = events[i]).callback.call(ev.ctx);
            return;
          case 1:
            while (++i < l)(ev = events[i]).callback.call(ev.ctx, a1);
            return;
          case 2:
            while (++i < l)(ev = events[i]).callback.call(ev.ctx, a1, a2);
            return;
          case 3:
            while (++i < l)(ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
            return;
          default:
            while (++i < l)(ev = events[i]).callback.apply(ev.ctx, args);
            return;
        }
      };
    
      var listenMethods = {
        listenTo: 'on',
        listenToOnce: 'once'
      };
    
      // Inversion-of-control versions of `on` and `once`. Tell *this* object to
      // listen to an event in another object ... keeping track of what it's
      // listening to.
      _.each(listenMethods, function(implementation, method) {
        Events[method] = function(obj, name, callback) {
          var listeningTo = this._listeningTo || (this._listeningTo = {});
          var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
          listeningTo[id] = obj;
          if (!callback && typeof name === 'object') callback = this;
          obj[implementation](name, callback, this);
          return this;
        };
      });
    
      // Aliases for backwards compatibility.
      Events.bind = Events.on;
      Events.unbind = Events.off;
    
      // Allow the `Backbone` object to serve as a global event bus, for folks who
      // want global "pubsub" in a convenient place.
      _.extend(Backbone, Events);
    
      // Backbone.Model
      // --------------
    
      // Backbone **Models** are the basic data object in the framework --
      // frequently representing a row in a table in a database on your server.
      // A discrete chunk of data and a bunch of useful, related methods for
      // performing computations and transformations on that data.
    
      // Create a new model with the specified attributes. A client id (`cid`)
      // is automatically generated and assigned for you.
      var Model = Backbone.Model = function(attributes, options) {
        var attrs = attributes || {};
        options || (options = {});
        this.cid = _.uniqueId('c');
        this.attributes = {};
        if (options.collection) this.collection = options.collection;
        if (options.parse) attrs = this.parse(attrs, options) || {};
        attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
        this.set(attrs, options);
        this.changed = {};
        this.initialize.apply(this, arguments);
      };
    
      // Attach all inheritable methods to the Model prototype.
      _.extend(Model.prototype, Events, {
    
        // A hash of attributes whose current and previous value differ.
        changed: null,
    
        // The value returned during the last failed validation.
        validationError: null,
    
        // The default name for the JSON `id` attribute is `"id"`. MongoDB and
        // CouchDB users may want to set this to `"_id"`.
        idAttribute: 'id',
    
        // Initialize is an empty function by default. Override it with your own
        // initialization logic.
        initialize: function() {},
    
        // Return a copy of the model's `attributes` object.
        toJSON: function(options) {
          return _.clone(this.attributes);
        },
    
        // Proxy `Backbone.sync` by default -- but override this if you need
        // custom syncing semantics for *this* particular model.
        sync: function() {
          return Backbone.sync.apply(this, arguments);
        },
    
        // Get the value of an attribute.
        get: function(attr) {
          return this.attributes[attr];
        },
    
        // Get the HTML-escaped value of an attribute.
        escape: function(attr) {
          return _.escape(this.get(attr));
        },
    
        // Returns `true` if the attribute contains a value that is not null
        // or undefined.
        has: function(attr) {
          return this.get(attr) != null;
        },
    
        // Set a hash of model attributes on the object, firing `"change"`. This is
        // the core primitive operation of a model, updating the data and notifying
        // anyone who needs to know about the change in state. The heart of the beast.
        set: function(key, val, options) {
          var attr, attrs, unset, changes, silent, changing, prev, current;
          if (key == null) return this;
    
          // Handle both `"key", value` and `{key: value}` -style arguments.
          if (typeof key === 'object') {
            attrs = key;
            options = val;
          } else {
            (attrs = {})[key] = val;
          }
    
          options || (options = {});
    
          // Run validation.
          if (!this._validate(attrs, options)) return false;
    
          // Extract attributes and options.
          unset = options.unset;
          silent = options.silent;
          changes = [];
          changing = this._changing;
          this._changing = true;
    
          if (!changing) {
            this._previousAttributes = _.clone(this.attributes);
            this.changed = {};
          }
          current = this.attributes, prev = this._previousAttributes;
    
          // Check for changes of `id`.
          if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];
    
          // For each `set` attribute, update or delete the current value.
          for (attr in attrs) {
            val = attrs[attr];
            if (!_.isEqual(current[attr], val)) changes.push(attr);
            if (!_.isEqual(prev[attr], val)) {
              this.changed[attr] = val;
            } else {
              delete this.changed[attr];
            }
            unset ? delete current[attr] : current[attr] = val;
          }
    
          // Trigger all relevant attribute changes.
          if (!silent) {
            if (changes.length) this._pending = options;
            for (var i = 0, l = changes.length; i < l; i++) {
              this.trigger('change:' + changes[i], this, current[changes[i]], options);
            }
          }
    
          // You might be wondering why there's a `while` loop here. Changes can
          // be recursively nested within `"change"` events.
          if (changing) return this;
          if (!silent) {
            while (this._pending) {
              options = this._pending;
              this._pending = false;
              this.trigger('change', this, options);
            }
          }
          this._pending = false;
          this._changing = false;
          return this;
        },
    
        // Remove an attribute from the model, firing `"change"`. `unset` is a noop
        // if the attribute doesn't exist.
        unset: function(attr, options) {
          return this.set(attr, void 0, _.extend({}, options, {
            unset: true
          }));
        },
    
        // Clear all attributes on the model, firing `"change"`.
        clear: function(options) {
          var attrs = {};
          for (var key in this.attributes) attrs[key] = void 0;
          return this.set(attrs, _.extend({}, options, {
            unset: true
          }));
        },
    
        // Determine if the model has changed since the last `"change"` event.
        // If you specify an attribute name, determine if that attribute has changed.
        hasChanged: function(attr) {
          if (attr == null) return !_.isEmpty(this.changed);
          return _.has(this.changed, attr);
        },
    
        // Return an object containing all the attributes that have changed, or
        // false if there are no changed attributes. Useful for determining what
        // parts of a view need to be updated and/or what attributes need to be
        // persisted to the server. Unset attributes will be set to undefined.
        // You can also pass an attributes object to diff against the model,
        // determining if there *would be* a change.
        changedAttributes: function(diff) {
          if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
          var val, changed = false;
          var old = this._changing ? this._previousAttributes : this.attributes;
          for (var attr in diff) {
            if (_.isEqual(old[attr], (val = diff[attr]))) continue;
            (changed || (changed = {}))[attr] = val;
          }
          return changed;
        },
    
        // Get the previous value of an attribute, recorded at the time the last
        // `"change"` event was fired.
        previous: function(attr) {
          if (attr == null || !this._previousAttributes) return null;
          return this._previousAttributes[attr];
        },
    
        // Get all of the attributes of the model at the time of the previous
        // `"change"` event.
        previousAttributes: function() {
          return _.clone(this._previousAttributes);
        },
    
        // Fetch the model from the server. If the server's representation of the
        // model differs from its current attributes, they will be overridden,
        // triggering a `"change"` event.
        fetch: function(options) {
          options = options ? _.clone(options) : {};
          if (options.parse === void 0) options.parse = true;
          var model = this;
          var success = options.success;
          options.success = function(resp) {
            if (!model.set(model.parse(resp, options), options)) return false;
            if (success) success(model, resp, options);
            model.trigger('sync', model, resp, options);
          };
          wrapError(this, options);
          return this.sync('read', this, options);
        },
    
        // Set a hash of model attributes, and sync the model to the server.
        // If the server returns an attributes hash that differs, the model's
        // state will be `set` again.
        save: function(key, val, options) {
          var attrs, method, xhr, attributes = this.attributes;
    
          // Handle both `"key", value` and `{key: value}` -style arguments.
          if (key == null || typeof key === 'object') {
            attrs = key;
            options = val;
          } else {
            (attrs = {})[key] = val;
          }
    
          options = _.extend({
            validate: true
          }, options);
    
          // If we're not waiting and attributes exist, save acts as
          // `set(attr).save(null, opts)` with validation. Otherwise, check if
          // the model will be valid when the attributes, if any, are set.
          if (attrs && !options.wait) {
            if (!this.set(attrs, options)) return false;
          } else {
            if (!this._validate(attrs, options)) return false;
          }
    
          // Set temporary attributes if `{wait: true}`.
          if (attrs && options.wait) {
            this.attributes = _.extend({}, attributes, attrs);
          }
    
          // After a successful server-side save, the client is (optionally)
          // updated with the server-side state.
          if (options.parse === void 0) options.parse = true;
          var model = this;
          var success = options.success;
          options.success = function(resp) {
            // Ensure attributes are restored during synchronous saves.
            model.attributes = attributes;
            var serverAttrs = model.parse(resp, options);
            if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
            if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
              return false;
            }
            if (success) success(model, resp, options);
            model.trigger('sync', model, resp, options);
          };
          wrapError(this, options);
    
          method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
          if (method === 'patch') options.attrs = attrs;
          xhr = this.sync(method, this, options);
    
          // Restore attributes.
          if (attrs && options.wait) this.attributes = attributes;
    
          return xhr;
        },
    
        // Destroy this model on the server if it was already persisted.
        // Optimistically removes the model from its collection, if it has one.
        // If `wait: true` is passed, waits for the server to respond before removal.
        destroy: function(options) {
          options = options ? _.clone(options) : {};
          var model = this;
          var success = options.success;
    
          var destroy = function() {
            model.trigger('destroy', model, model.collection, options);
          };
    
          options.success = function(resp) {
            if (options.wait || model.isNew()) destroy();
            if (success) success(model, resp, options);
            if (!model.isNew()) model.trigger('sync', model, resp, options);
          };
    
          if (this.isNew()) {
            options.success();
            return false;
          }
          wrapError(this, options);
    
          var xhr = this.sync('delete', this, options);
          if (!options.wait) destroy();
          return xhr;
        },
    
        // Default URL for the model's representation on the server -- if you're
        // using Backbone's restful methods, override this to change the endpoint
        // that will be called.
        url: function() {
          var base =
            _.result(this, 'urlRoot') ||
            _.result(this.collection, 'url') ||
            urlError();
          if (this.isNew()) return base;
          return base.replace(/([^\/])$/, '$1/') + encodeURIComponent(this.id);
        },
    
        // **parse** converts a response into the hash of attributes to be `set` on
        // the model. The default implementation is just to pass the response along.
        parse: function(resp, options) {
          return resp;
        },
    
        // Create a new model with identical attributes to this one.
        clone: function() {
          return new this.constructor(this.attributes);
        },
    
        // A model is new if it has never been saved to the server, and lacks an id.
        isNew: function() {
          return !this.has(this.idAttribute);
        },
    
        // Check if the model is currently in a valid state.
        isValid: function(options) {
          return this._validate({}, _.extend(options || {}, {
            validate: true
          }));
        },
    
        // Run validation against the next complete set of model attributes,
        // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
        _validate: function(attrs, options) {
          if (!options.validate || !this.validate) return true;
          attrs = _.extend({}, this.attributes, attrs);
          var error = this.validationError = this.validate(attrs, options) || null;
          if (!error) return true;
          this.trigger('invalid', this, error, _.extend(options, {
            validationError: error
          }));
          return false;
        }
    
      });
    
      // Underscore methods that we want to implement on the Model.
      var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];
    
      // Mix in each Underscore method as a proxy to `Model#attributes`.
      _.each(modelMethods, function(method) {
        Model.prototype[method] = function() {
          var args = slice.call(arguments);
          args.unshift(this.attributes);
          return _[method].apply(_, args);
        };
      });
    
      // Backbone.Collection
      // -------------------
    
      // If models tend to represent a single row of data, a Backbone Collection is
      // more analagous to a table full of data ... or a small slice or page of that
      // table, or a collection of rows that belong together for a particular reason
      // -- all of the messages in this particular folder, all of the documents
      // belonging to this particular author, and so on. Collections maintain
      // indexes of their models, both in order, and for lookup by `id`.
    
      // Create a new **Collection**, perhaps to contain a specific type of `model`.
      // If a `comparator` is specified, the Collection will maintain
      // its models in sort order, as they're added and removed.
      var Collection = Backbone.Collection = function(models, options) {
        options || (options = {});
        if (options.model) this.model = options.model;
        if (options.comparator !== void 0) this.comparator = options.comparator;
        this._reset();
        this.initialize.apply(this, arguments);
        if (models) this.reset(models, _.extend({
          silent: true
        }, options));
      };
    
      // Default options for `Collection#set`.
      var setOptions = {
        add: true,
        remove: true,
        merge: true
      };
      var addOptions = {
        add: true,
        remove: false
      };
    
      // Define the Collection's inheritable methods.
      _.extend(Collection.prototype, Events, {
    
        // The default model for a collection is just a **Backbone.Model**.
        // This should be overridden in most cases.
        model: Model,
    
        // Initialize is an empty function by default. Override it with your own
        // initialization logic.
        initialize: function() {},
    
        // The JSON representation of a Collection is an array of the
        // models' attributes.
        toJSON: function(options) {
          return this.map(function(model) {
            return model.toJSON(options);
          });
        },
    
        // Proxy `Backbone.sync` by default.
        sync: function() {
          return Backbone.sync.apply(this, arguments);
        },
    
        // Add a model, or list of models to the set.
        add: function(models, options) {
          return this.set(models, _.extend({
            merge: false
          }, options, addOptions));
        },
    
        // Remove a model, or a list of models from the set.
        remove: function(models, options) {
          var singular = !_.isArray(models);
          models = singular ? [models] : _.clone(models);
          options || (options = {});
          var i, l, index, model;
          for (i = 0, l = models.length; i < l; i++) {
            model = models[i] = this.get(models[i]);
            if (!model) continue;
            delete this._byId[model.id];
            delete this._byId[model.cid];
            index = this.indexOf(model);
            this.models.splice(index, 1);
            this.length--;
            if (!options.silent) {
              options.index = index;
              model.trigger('remove', model, this, options);
            }
            this._removeReference(model, options);
          }
          return singular ? models[0] : models;
        },
    
        // Update a collection by `set`-ing a new list of models, adding new ones,
        // removing models that are no longer present, and merging models that
        // already exist in the collection, as necessary. Similar to **Model#set**,
        // the core operation for updating the data contained by the collection.
        set: function(models, options) {
          options = _.defaults({}, options, setOptions);
          if (options.parse) models = this.parse(models, options);
          var singular = !_.isArray(models);
          models = singular ? (models ? [models] : []) : _.clone(models);
          var i, l, id, model, attrs, existing, sort;
          var at = options.at;
          var targetModel = this.model;
          var sortable = this.comparator && (at == null) && options.sort !== false;
          var sortAttr = _.isString(this.comparator) ? this.comparator : null;
          var toAdd = [],
            toRemove = [],
            modelMap = {};
          var add = options.add,
            merge = options.merge,
            remove = options.remove;
          var order = !sortable && add && remove ? [] : false;
    
          // Turn bare objects into model references, and prevent invalid models
          // from being added.
          for (i = 0, l = models.length; i < l; i++) {
            attrs = models[i] || {};
            if (attrs instanceof Model) {
              id = model = attrs;
            } else {
              id = attrs[targetModel.prototype.idAttribute || 'id'];
            }
    
            // If a duplicate is found, prevent it from being added and
            // optionally merge it into the existing model.
            if (existing = this.get(id)) {
              if (remove) modelMap[existing.cid] = true;
              if (merge) {
                attrs = attrs === model ? model.attributes : attrs;
                if (options.parse) attrs = existing.parse(attrs, options);
                existing.set(attrs, options);
                if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
              }
              models[i] = existing;
    
              // If this is a new, valid model, push it to the `toAdd` list.
            } else if (add) {
              model = models[i] = this._prepareModel(attrs, options);
              if (!model) continue;
              toAdd.push(model);
              this._addReference(model, options);
            }
    
            // Do not add multiple models with the same `id`.
            model = existing || model;
            if (order && (model.isNew() || !modelMap[model.id])) order.push(model);
            modelMap[model.id] = true;
          }
    
          // Remove nonexistent models if appropriate.
          if (remove) {
            for (i = 0, l = this.length; i < l; ++i) {
              if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
            }
            if (toRemove.length) this.remove(toRemove, options);
          }
    
          // See if sorting is needed, update `length` and splice in new models.
          if (toAdd.length || (order && order.length)) {
            if (sortable) sort = true;
            this.length += toAdd.length;
            if (at != null) {
              for (i = 0, l = toAdd.length; i < l; i++) {
                this.models.splice(at + i, 0, toAdd[i]);
              }
            } else {
              if (order) this.models.length = 0;
              var orderedModels = order || toAdd;
              for (i = 0, l = orderedModels.length; i < l; i++) {
                this.models.push(orderedModels[i]);
              }
            }
          }
    
          // Silently sort the collection if appropriate.
          if (sort) this.sort({
            silent: true
          });
    
          // Unless silenced, it's time to fire all appropriate add/sort events.
          if (!options.silent) {
            for (i = 0, l = toAdd.length; i < l; i++) {
              (model = toAdd[i]).trigger('add', model, this, options);
            }
            if (sort || (order && order.length)) this.trigger('sort', this, options);
          }
    
          // Return the added (or merged) model (or models).
          return singular ? models[0] : models;
        },
    
        // When you have more items than you want to add or remove individually,
        // you can reset the entire set with a new list of models, without firing
        // any granular `add` or `remove` events. Fires `reset` when finished.
        // Useful for bulk operations and optimizations.
        reset: function(models, options) {
          options || (options = {});
          for (var i = 0, l = this.models.length; i < l; i++) {
            this._removeReference(this.models[i], options);
          }
          options.previousModels = this.models;
          this._reset();
          models = this.add(models, _.extend({
            silent: true
          }, options));
          if (!options.silent) this.trigger('reset', this, options);
          return models;
        },
    
        // Add a model to the end of the collection.
        push: function(model, options) {
          return this.add(model, _.extend({
            at: this.length
          }, options));
        },
    
        // Remove a model from the end of the collection.
        pop: function(options) {
          var model = this.at(this.length - 1);
          this.remove(model, options);
          return model;
        },
    
        // Add a model to the beginning of the collection.
        unshift: function(model, options) {
          return this.add(model, _.extend({
            at: 0
          }, options));
        },
    
        // Remove a model from the beginning of the collection.
        shift: function(options) {
          var model = this.at(0);
          this.remove(model, options);
          return model;
        },
    
        // Slice out a sub-array of models from the collection.
        slice: function() {
          return slice.apply(this.models, arguments);
        },
    
        // Get a model from the set by id.
        get: function(obj) {
          if (obj == null) return void 0;
          return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];
        },
    
        // Get the model at the given index.
        at: function(index) {
          return this.models[index];
        },
    
        // Return models with matching attributes. Useful for simple cases of
        // `filter`.
        where: function(attrs, first) {
          if (_.isEmpty(attrs)) return first ? void 0 : [];
          return this[first ? 'find' : 'filter'](function(model) {
            for (var key in attrs) {
              if (attrs[key] !== model.get(key)) return false;
            }
            return true;
          });
        },
    
        // Return the first model with matching attributes. Useful for simple cases
        // of `find`.
        findWhere: function(attrs) {
          return this.where(attrs, true);
        },
    
        // Force the collection to re-sort itself. You don't need to call this under
        // normal circumstances, as the set will maintain sort order as each item
        // is added.
        sort: function(options) {
          if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
          options || (options = {});
    
          // Run sort based on type of `comparator`.
          if (_.isString(this.comparator) || this.comparator.length === 1) {
            this.models = this.sortBy(this.comparator, this);
          } else {
            this.models.sort(_.bind(this.comparator, this));
          }
    
          if (!options.silent) this.trigger('sort', this, options);
          return this;
        },
    
        // Pluck an attribute from each model in the collection.
        pluck: function(attr) {
          return _.invoke(this.models, 'get', attr);
        },
    
        // Fetch the default set of models for this collection, resetting the
        // collection when they arrive. If `reset: true` is passed, the response
        // data will be passed through the `reset` method instead of `set`.
        fetch: function(options) {
          options = options ? _.clone(options) : {};
          if (options.parse === void 0) options.parse = true;
          var success = options.success;
          var collection = this;
          options.success = function(resp) {
            var method = options.reset ? 'reset' : 'set';
            collection[method](resp, options);
            if (success) success(collection, resp, options);
            collection.trigger('sync', collection, resp, options);
          };
          wrapError(this, options);
          return this.sync('read', this, options);
        },
    
        // Create a new instance of a model in this collection. Add the model to the
        // collection immediately, unless `wait: true` is passed, in which case we
        // wait for the server to agree.
        create: function(model, options) {
          options = options ? _.clone(options) : {};
          if (!(model = this._prepareModel(model, options))) return false;
          if (!options.wait) this.add(model, options);
          var collection = this;
          var success = options.success;
          options.success = function(model, resp) {
            if (options.wait) collection.add(model, options);
            if (success) success(model, resp, options);
          };
          model.save(null, options);
          return model;
        },
    
        // **parse** converts a response into a list of models to be added to the
        // collection. The default implementation is just to pass it through.
        parse: function(resp, options) {
          return resp;
        },
    
        // Create a new collection with an identical list of models as this one.
        clone: function() {
          return new this.constructor(this.models);
        },
    
        // Private method to reset all internal state. Called when the collection
        // is first initialized or reset.
        _reset: function() {
          this.length = 0;
          this.models = [];
          this._byId = {};
        },
    
        // Prepare a hash of attributes (or other model) to be added to this
        // collection.
        _prepareModel: function(attrs, options) {
          if (attrs instanceof Model) return attrs;
          options = options ? _.clone(options) : {};
          options.collection = this;
          var model = new this.model(attrs, options);
          if (!model.validationError) return model;
          this.trigger('invalid', this, model.validationError, options);
          return false;
        },
    
        // Internal method to create a model's ties to a collection.
        _addReference: function(model, options) {
          this._byId[model.cid] = model;
          if (model.id != null) this._byId[model.id] = model;
          if (!model.collection) model.collection = this;
          model.on('all', this._onModelEvent, this);
        },
    
        // Internal method to sever a model's ties to a collection.
        _removeReference: function(model, options) {
          if (this === model.collection) delete model.collection;
          model.off('all', this._onModelEvent, this);
        },
    
        // Internal method called every time a model in the set fires an event.
        // Sets need to update their indexes when models change ids. All other
        // events simply proxy through. "add" and "remove" events that originate
        // in other collections are ignored.
        _onModelEvent: function(event, model, collection, options) {
          if ((event === 'add' || event === 'remove') && collection !== this) return;
          if (event === 'destroy') this.remove(model, options);
          if (model && event === 'change:' + model.idAttribute) {
            delete this._byId[model.previous(model.idAttribute)];
            if (model.id != null) this._byId[model.id] = model;
          }
          this.trigger.apply(this, arguments);
        }
    
      });
    
      // Underscore methods that we want to implement on the Collection.
      // 90% of the core usefulness of Backbone Collections is actually implemented
      // right here:
      var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',
        'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',
        'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',
        'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',
        'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',
        'lastIndexOf', 'isEmpty', 'chain', 'sample'
      ];
    
      // Mix in each Underscore method as a proxy to `Collection#models`.
      _.each(methods, function(method) {
        Collection.prototype[method] = function() {
          var args = slice.call(arguments);
          args.unshift(this.models);
          return _[method].apply(_, args);
        };
      });
    
      // Underscore methods that take a property name as an argument.
      var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];
    
      // Use attributes instead of properties.
      _.each(attributeMethods, function(method) {
        Collection.prototype[method] = function(value, context) {
          var iterator = _.isFunction(value) ? value : function(model) {
            return model.get(value);
          };
          return _[method](this.models, iterator, context);
        };
      });
    
      // Backbone.View
      // -------------
    
      // Backbone Views are almost more convention than they are actual code. A View
      // is simply a JavaScript object that represents a logical chunk of UI in the
      // DOM. This might be a single item, an entire list, a sidebar or panel, or
      // even the surrounding frame which wraps your whole app. Defining a chunk of
      // UI as a **View** allows you to define your DOM events declaratively, without
      // having to worry about render order ... and makes it easy for the view to
      // react to specific changes in the state of your models.
    
      // Creating a Backbone.View creates its initial element outside of the DOM,
      // if an existing element is not provided...
      var View = Backbone.View = function(options) {
        this.cid = _.uniqueId('view');
        options || (options = {});
        _.extend(this, _.pick(options, viewOptions));
        this._ensureElement();
        this.initialize.apply(this, arguments);
        this.delegateEvents();
      };
    
      // Cached regex to split keys for `delegate`.
      var delegateEventSplitter = /^(\S+)\s*(.*)$/;
    
      // List of view options to be merged as properties.
      var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];
    
      // Set up all inheritable **Backbone.View** properties and methods.
      _.extend(View.prototype, Events, {
    
        // The default `tagName` of a View's element is `"div"`.
        tagName: 'div',
    
        // jQuery delegate for element lookup, scoped to DOM elements within the
        // current view. This should be preferred to global lookups where possible.
        $: function(selector) {
          return this.$el.find(selector);
        },
    
        // Initialize is an empty function by default. Override it with your own
        // initialization logic.
        initialize: function() {},
    
        // **render** is the core function that your view should override, in order
        // to populate its element (`this.el`), with the appropriate HTML. The
        // convention is for **render** to always return `this`.
        render: function() {
          return this;
        },
    
        // Remove this view by taking the element out of the DOM, and removing any
        // applicable Backbone.Events listeners.
        remove: function() {
          this.$el.remove();
          this.stopListening();
          return this;
        },
    
        // Change the view's element (`this.el` property), including event
        // re-delegation.
        setElement: function(element, delegate) {
          if (this.$el) this.undelegateEvents();
          this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
          this.el = this.$el[0];
          if (delegate !== false) this.delegateEvents();
          return this;
        },
    
        // Set callbacks, where `this.events` is a hash of
        //
        // *{"event selector": "callback"}*
        //
        //     {
        //       'mousedown .title':  'edit',
        //       'click .button':     'save',
        //       'click .open':       function(e) { ... }
        //     }
        //
        // pairs. Callbacks will be bound to the view, with `this` set properly.
        // Uses event delegation for efficiency.
        // Omitting the selector binds the event to `this.el`.
        // This only works for delegate-able events: not `focus`, `blur`, and
        // not `change`, `submit`, and `reset` in Internet Explorer.
        delegateEvents: function(events) {
          if (!(events || (events = _.result(this, 'events')))) return this;
          this.undelegateEvents();
          for (var key in events) {
            var method = events[key];
            if (!_.isFunction(method)) method = this[events[key]];
            if (!method) continue;
    
            var match = key.match(delegateEventSplitter);
            var eventName = match[1],
              selector = match[2];
            method = _.bind(method, this);
            eventName += '.delegateEvents' + this.cid;
            if (selector === '') {
              this.$el.on(eventName, method);
            } else {
              this.$el.on(eventName, selector, method);
            }
          }
          return this;
        },
    
        // Clears all callbacks previously bound to the view with `delegateEvents`.
        // You usually don't need to use this, but may wish to if you have multiple
        // Backbone views attached to the same DOM element.
        undelegateEvents: function() {
          this.$el.off('.delegateEvents' + this.cid);
          return this;
        },
    
        // Ensure that the View has a DOM element to render into.
        // If `this.el` is a string, pass it through `$()`, take the first
        // matching element, and re-assign it to `el`. Otherwise, create
        // an element from the `id`, `className` and `tagName` properties.
        _ensureElement: function() {
          if (!this.el) {
            var attrs = _.extend({}, _.result(this, 'attributes'));
            if (this.id) attrs.id = _.result(this, 'id');
            if (this.className) attrs['class'] = _.result(this, 'className');
            var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);
            this.setElement($el, false);
          } else {
            this.setElement(_.result(this, 'el'), false);
          }
        }
    
      });
    
      // Backbone.sync
      // -------------
    
      // Override this function to change the manner in which Backbone persists
      // models to the server. You will be passed the type of request, and the
      // model in question. By default, makes a RESTful Ajax request
      // to the model's `url()`. Some possible customizations could be:
      //
      // * Use `setTimeout` to batch rapid-fire updates into a single request.
      // * Send up the models as XML instead of JSON.
      // * Persist models via WebSockets instead of Ajax.
      //
      // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
      // as `POST`, with a `_method` parameter containing the true HTTP method,
      // as well as all requests with the body as `application/x-www-form-urlencoded`
      // instead of `application/json` with the model in a param named `model`.
      // Useful when interfacing with server-side languages like **PHP** that make
      // it difficult to read the body of `PUT` requests.
      Backbone.sync = function(method, model, options) {
        var type = methodMap[method];
    
        // Default options, unless specified.
        _.defaults(options || (options = {}), {
          emulateHTTP: Backbone.emulateHTTP,
          emulateJSON: Backbone.emulateJSON
        });
    
        // Default JSON-request options.
        var params = {
          type: type,
          dataType: 'json'
        };
    
        // Ensure that we have a URL.
        if (!options.url) {
          params.url = _.result(model, 'url') || urlError();
        }
    
        // Ensure that we have the appropriate request data.
        if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
          params.contentType = 'application/json';
          params.data = JSON.stringify(options.attrs || model.toJSON(options));
        }
    
        // For older servers, emulate JSON by encoding the request into an HTML-form.
        if (options.emulateJSON) {
          params.contentType = 'application/x-www-form-urlencoded';
          params.data = params.data ? {
            model: params.data
          } : {};
        }
    
        // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
        // And an `X-HTTP-Method-Override` header.
        if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
          params.type = 'POST';
          if (options.emulateJSON) params.data._method = type;
          var beforeSend = options.beforeSend;
          options.beforeSend = function(xhr) {
            xhr.setRequestHeader('X-HTTP-Method-Override', type);
            if (beforeSend) return beforeSend.apply(this, arguments);
          };
        }
    
        // Don't process data on a non-GET request.
        if (params.type !== 'GET' && !options.emulateJSON) {
          params.processData = false;
        }
    
        // If we're sending a `PATCH` request, and we're in an old Internet Explorer
        // that still has ActiveX enabled by default, override jQuery to use that
        // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.
        if (params.type === 'PATCH' && noXhrPatch) {
          params.xhr = function() {
            return new ActiveXObject("Microsoft.XMLHTTP");
          };
        }
    
        // Make the request, allowing the user to override any Ajax options.
        var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
        model.trigger('request', model, xhr, options);
        return xhr;
      };
    
      var noXhrPatch =
        typeof window !== 'undefined' && !!window.ActiveXObject &&
        !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);
    
      // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
      var methodMap = {
        'create': 'POST',
        'update': 'PUT',
        'patch': 'PATCH',
        'delete': 'DELETE',
        'read': 'GET'
      };
    
      // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
      // Override this if you'd like to use a different library.
      Backbone.ajax = function() {
        return Backbone.$.ajax.apply(Backbone.$, arguments);
      };
    
      // Backbone.Router
      // ---------------
    
      // Routers map faux-URLs to actions, and fire events when routes are
      // matched. Creating a new one sets its `routes` hash, if not set statically.
      var Router = Backbone.Router = function(options) {
        options || (options = {});
        if (options.routes) this.routes = options.routes;
        this._bindRoutes();
        this.initialize.apply(this, arguments);
      };
    
      // Cached regular expressions for matching named param parts and splatted
      // parts of route strings.
      var optionalParam = /\((.*?)\)/g;
      var namedParam = /(\(\?)?:\w+/g;
      var splatParam = /\*\w+/g;
      var escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;
    
      // Set up all inheritable **Backbone.Router** properties and methods.
      _.extend(Router.prototype, Events, {
    
        // Initialize is an empty function by default. Override it with your own
        // initialization logic.
        initialize: function() {},
    
        // Manually bind a single named route to a callback. For example:
        //
        //     this.route('search/:query/p:num', 'search', function(query, num) {
        //       ...
        //     });
        //
        route: function(route, name, callback) {
          if (!_.isRegExp(route)) route = this._routeToRegExp(route);
          if (_.isFunction(name)) {
            callback = name;
            name = '';
          }
          if (!callback) callback = this[name];
          var router = this;
          Backbone.history.route(route, function(fragment) {
            var args = router._extractParameters(route, fragment);
            router.execute(callback, args);
            router.trigger.apply(router, ['route:' + name].concat(args));
            router.trigger('route', name, args);
            Backbone.history.trigger('route', router, name, args);
          });
          return this;
        },
    
        // Execute a route handler with the provided parameters.  This is an
        // excellent place to do pre-route setup or post-route cleanup.
        execute: function(callback, args) {
          if (callback) callback.apply(this, args);
        },
    
        // Simple proxy to `Backbone.history` to save a fragment into the history.
        navigate: function(fragment, options) {
          Backbone.history.navigate(fragment, options);
          return this;
        },
    
        // Bind all defined routes to `Backbone.history`. We have to reverse the
        // order of the routes here to support behavior where the most general
        // routes can be defined at the bottom of the route map.
        _bindRoutes: function() {
          if (!this.routes) return;
          this.routes = _.result(this, 'routes');
          var route, routes = _.keys(this.routes);
          while ((route = routes.pop()) != null) {
            this.route(route, this.routes[route]);
          }
        },
    
        // Convert a route string into a regular expression, suitable for matching
        // against the current location hash.
        _routeToRegExp: function(route) {
          route = route.replace(escapeRegExp, '\\$&')
            .replace(optionalParam, '(?:$1)?')
            .replace(namedParam, function(match, optional) {
              return optional ? match : '([^/?]+)';
            })
            .replace(splatParam, '([^?]*?)');
          return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
        },
    
        // Given a route, and a URL fragment that it matches, return the array of
        // extracted decoded parameters. Empty or unmatched parameters will be
        // treated as `null` to normalize cross-browser behavior.
        _extractParameters: function(route, fragment) {
          var params = route.exec(fragment).slice(1);
          return _.map(params, function(param, i) {
            // Don't decode the search params.
            if (i === params.length - 1) return param || null;
            return param ? decodeURIComponent(param) : null;
          });
        }
    
      });
    
      // Backbone.History
      // ----------------
    
      // Handles cross-browser history management, based on either
      // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
      // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
      // and URL fragments. If the browser supports neither (old IE, natch),
      // falls back to polling.
      var History = Backbone.History = function() {
        this.handlers = [];
        _.bindAll(this, 'checkUrl');
    
        // Ensure that `History` can be used outside of the browser.
        if (typeof window !== 'undefined') {
          this.location = window.location;
          this.history = window.history;
        }
      };
    
      // Cached regex for stripping a leading hash/slash and trailing space.
      var routeStripper = /^[#\/]|\s+$/g;
    
      // Cached regex for stripping leading and trailing slashes.
      var rootStripper = /^\/+|\/+$/g;
    
      // Cached regex for detecting MSIE.
      var isExplorer = /msie [\w.]+/;
    
      // Cached regex for removing a trailing slash.
      var trailingSlash = /\/$/;
    
      // Cached regex for stripping urls of hash.
      var pathStripper = /#.*$/;
    
      // Has the history handling already been started?
      History.started = false;
    
      // Set up all inheritable **Backbone.History** properties and methods.
      _.extend(History.prototype, Events, {
    
        // The default interval to poll for hash changes, if necessary, is
        // twenty times a second.
        interval: 50,
    
        // Are we at the app root?
        atRoot: function() {
          return this.location.pathname.replace(/[^\/]$/, '$&/') === this.root;
        },
    
        // Gets the true hash value. Cannot use location.hash directly due to bug
        // in Firefox where location.hash will always be decoded.
        getHash: function(window) {
          var match = (window || this).location.href.match(/#(.*)$/);
          return match ? match[1] : '';
        },
    
        // Get the cross-browser normalized URL fragment, either from the URL,
        // the hash, or the override.
        getFragment: function(fragment, forcePushState) {
          if (fragment == null) {
            if (this._hasPushState || !this._wantsHashChange || forcePushState) {
              fragment = decodeURI(this.location.pathname + this.location.search);
              var root = this.root.replace(trailingSlash, '');
              if (!fragment.indexOf(root)) fragment = fragment.slice(root.length);
            } else {
              fragment = this.getHash();
            }
          }
          return fragment.replace(routeStripper, '');
        },
    
        // Start the hash change handling, returning `true` if the current URL matches
        // an existing route, and `false` otherwise.
        start: function(options) {
          if (History.started) throw new Error("Backbone.history has already been started");
          History.started = true;
    
          // Figure out the initial configuration. Do we need an iframe?
          // Is pushState desired ... is it available?
          this.options = _.extend({
            root: '/'
          }, this.options, options);
          this.root = this.options.root;
          this._wantsHashChange = this.options.hashChange !== false;
          this._wantsPushState = !!this.options.pushState;
          this._hasPushState = !!(this.options.pushState && this.history && this.history.pushState);
          var fragment = this.getFragment();
          var docMode = document.documentMode;
          var oldIE = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));
    
          // Normalize root to always include a leading and trailing slash.
          this.root = ('/' + this.root + '/').replace(rootStripper, '/');
    
          if (oldIE && this._wantsHashChange) {
            var frame = Backbone.$('<iframe src="javascript:0" tabindex="-1">');
            this.iframe = frame.hide().appendTo('body')[0].contentWindow;
            this.navigate(fragment);
          }
    
          // Depending on whether we're using pushState or hashes, and whether
          // 'onhashchange' is supported, determine how we check the URL state.
          if (this._hasPushState) {
            Backbone.$(window).on('popstate', this.checkUrl);
          } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {
            Backbone.$(window).on('hashchange', this.checkUrl);
          } else if (this._wantsHashChange) {
            this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
          }
    
          // Determine if we need to change the base url, for a pushState link
          // opened by a non-pushState browser.
          this.fragment = fragment;
          var loc = this.location;
    
          // Transition from hashChange to pushState or vice versa if both are
          // requested.
          if (this._wantsHashChange && this._wantsPushState) {
    
            // If we've started off with a route from a `pushState`-enabled
            // browser, but we're currently in a browser that doesn't support it...
            if (!this._hasPushState && !this.atRoot()) {
              this.fragment = this.getFragment(null, true);
              this.location.replace(this.root + '#' + this.fragment);
              // Return immediately as browser will do redirect to new url
              return true;
    
              // Or if we've started out with a hash-based route, but we're currently
              // in a browser where it could be `pushState`-based instead...
            } else if (this._hasPushState && this.atRoot() && loc.hash) {
              this.fragment = this.getHash().replace(routeStripper, '');
              this.history.replaceState({}, document.title, this.root + this.fragment);
            }
    
          }
    
          if (!this.options.silent) return this.loadUrl();
        },
    
        // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
        // but possibly useful for unit testing Routers.
        stop: function() {
          Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);
          if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
          History.started = false;
        },
    
        // Add a route to be tested when the fragment changes. Routes added later
        // may override previous routes.
        route: function(route, callback) {
          this.handlers.unshift({
            route: route,
            callback: callback
          });
        },
    
        // Checks the current URL to see if it has changed, and if it has,
        // calls `loadUrl`, normalizing across the hidden iframe.
        checkUrl: function(e) {
          var current = this.getFragment();
          if (current === this.fragment && this.iframe) {
            current = this.getFragment(this.getHash(this.iframe));
          }
          if (current === this.fragment) return false;
          if (this.iframe) this.navigate(current);
          this.loadUrl();
        },
    
        // Attempt to load the current URL fragment. If a route succeeds with a
        // match, returns `true`. If no defined routes matches the fragment,
        // returns `false`.
        loadUrl: function(fragment) {
          fragment = this.fragment = this.getFragment(fragment);
          return _.any(this.handlers, function(handler) {
            if (handler.route.test(fragment)) {
              handler.callback(fragment);
              return true;
            }
          });
        },
    
        // Save a fragment into the hash history, or replace the URL state if the
        // 'replace' option is passed. You are responsible for properly URL-encoding
        // the fragment in advance.
        //
        // The options object can contain `trigger: true` if you wish to have the
        // route callback be fired (not usually desirable), or `replace: true`, if
        // you wish to modify the current URL without adding an entry to the history.
        navigate: function(fragment, options) {
          if (!History.started) return false;
          if (!options || options === true) options = {
            trigger: !!options
          };
    
          var url = this.root + (fragment = this.getFragment(fragment || ''));
    
          // Strip the hash for matching.
          fragment = fragment.replace(pathStripper, '');
    
          if (this.fragment === fragment) return;
          this.fragment = fragment;
    
          // Don't include a trailing slash on the root.
          if (fragment === '' && url !== '/') url = url.slice(0, -1);
    
          // If pushState is available, we use it to set the fragment as a real URL.
          if (this._hasPushState) {
            this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);
    
            // If hash changes haven't been explicitly disabled, update the hash
            // fragment to store history.
          } else if (this._wantsHashChange) {
            this._updateHash(this.location, fragment, options.replace);
            if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {
              // Opening and closing the iframe tricks IE7 and earlier to push a
              // history entry on hash-tag change.  When replace is true, we don't
              // want this.
              if (!options.replace) this.iframe.document.open().close();
              this._updateHash(this.iframe.location, fragment, options.replace);
            }
    
            // If you've told us that you explicitly don't want fallback hashchange-
            // based history, then `navigate` becomes a page refresh.
          } else {
            return this.location.assign(url);
          }
          if (options.trigger) return this.loadUrl(fragment);
        },
    
        // Update the hash location, either replacing the current entry, or adding
        // a new one to the browser history.
        _updateHash: function(location, fragment, replace) {
          if (replace) {
            var href = location.href.replace(/(javascript:|#).*$/, '');
            location.replace(href + '#' + fragment);
          } else {
            // Some browsers require that `hash` contains a leading #.
            location.hash = '#' + fragment;
          }
        }
    
      });
    
      // Create the default Backbone.history.
      Backbone.history = new History;
    
      // Helpers
      // -------
    
      // Helper function to correctly set up the prototype chain, for subclasses.
      // Similar to `goog.inherits`, but uses a hash of prototype properties and
      // class properties to be extended.
      var extend = function(protoProps, staticProps) {
        var parent = this;
        var child;
    
        // The constructor function for the new subclass is either defined by you
        // (the "constructor" property in your `extend` definition), or defaulted
        // by us to simply call the parent's constructor.
        if (protoProps && _.has(protoProps, 'constructor')) {
          child = protoProps.constructor;
        } else {
          child = function() {
            return parent.apply(this, arguments);
          };
        }
    
        // Add static properties to the constructor function, if supplied.
        _.extend(child, parent, staticProps);
    
        // Set the prototype chain to inherit from `parent`, without calling
        // `parent`'s constructor function.
        var Surrogate = function() {
          this.constructor = child;
        };
        Surrogate.prototype = parent.prototype;
        child.prototype = new Surrogate;
    
        // Add prototype properties (instance properties) to the subclass,
        // if supplied.
        if (protoProps) _.extend(child.prototype, protoProps);
    
        // Set a convenience property in case the parent's prototype is needed
        // later.
        child.__super__ = parent.prototype;
    
        return child;
      };
    
      // Set up inheritance for the model, collection, router, view and history.
      Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;
    
      // Throw an error when a URL is needed, and none is supplied.
      var urlError = function() {
        throw new Error('A "url" property or function must be specified');
      };
    
      // Wrap an optional error callback with a fallback error event.
      var wrapError = function(model, options) {
        var error = options.error;
        options.error = function(resp) {
          if (error) error(model, resp, options);
          model.trigger('error', model, resp, options);
        };
      };
    
      root.Backbone = Backbone;
      return Backbone;
    });
    define('basic/tools/template',function() {
    	
    	var $ = require('lib/jquery'),
    		loadHtml;
    		
    	loadHtml = function(id) {
    		var headDomString = '',
    			mainDomString = '',
    			tailDomString = '';
    
    		mainDomString += '<div class="main-layout">';
    		mainDomString += '<table class="cui-grid" cellspacing="0" cellpadding="0" id="tableContainer">';
    		mainDomString += '<tbody><tr><td><div class="left-corner"></div></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody>';
    		mainDomString += '</table></div>';
    		mainDomString += '<div class="sheet-layout"><div class="sheet-body">';
    		//mainDomString += '<div class="sheet-cf-box active glyphicons glyphicon-th-list"></div>';
    		mainDomString += '<div class="sheet-cf-list">';
    		mainDomString += '</div></div></div>';
    		
    
    		tailDomString += '<script type="text/x-handlebars-template" id="colsPanelContainer"></script>';
    		tailDomString += '<script type="text/x-handlebars-template" id="rowsPanelContainer"></script>';
    		tailDomString += '<script type="text/x-handlebars-template" id="mainContainer"></script>';
    		tailDomString += '<script type="text/x-handlebars-template" id="contentList"></script>';
    
    		tailDomString += '<script type="text/x-handlebars-template" id="tempSheetContainer"><span>{{name}}</span></script>';
    
    		tailDomString += '<script type="text/x-handlebars-template" id="tempRowHeadItem"><div class="item">{{displayName}}</div></script>';
    		tailDomString += '<script type="text/x-handlebars-template" id="tempColHeadItem"><div class="item">{{displayName}}</div></script>';
    		tailDomString += '<script type="text/x-handlebars-template" id="multiselect"><div class="dragItem" style="top:{{top}}px;left:{{left}}px;width:{{width}}px;height:{{height}}px;"></div></script>';
    		tailDomString += '<script type="text/x-handlebars-template" id="data">{{content.text}}</script>';
    		tailDomString += '<script type="text/x-handlebars-template" id="textarea"><div class="textarea"><textarea class="input-container"></textarea><div></script>';
    		tailDomString += '<script type="text/x-handlebars-template" id="tempSelectContainer"><div class="box"><div class="expand"></div><div class="bg"></div></div></script>';
    		tailDomString += '<script type="text/x-handlebars-template" id="tempItemCell"><div class="bg" style="display:table-cell">{{cotent.texts}}</div></script>';
    		tailDomString += '<script type="text/x-handlebars-template" id="coltemp"><div class="col" style="left:{{left}}px;"></div></script>';
    		tailDomString += '<script type="text/x-handlebars-template" id="rowtemp"><div class="row" style="top:{{top}}px;"></div></script>';
    		
    		$(id)[0].innerHTML = mainDomString;
    		$(id).after(tailDomString);
    	};
    	return loadHtml;
    });
    //attention bug, those name didn't significance
    //attention bug, between user config and system config mix
    define('spreadsheet/config',function() {
    	
    	/**
    	 * 系统配置变量
    	 * @author ray wu
    	 * @class config
    	 * @since 0.1.0
    	 * @module basic
    	 */
    	return {
    		/**
    		 * 用户可配置属性
    		 * @property {object} User
    		 */
    		User: {
    			/**
    			 * 页面初始化行数
    			 * @property {int} initRowNum
    			 */
    			initRowNum: 100,
    			/**
    			 * 页面初始化列数
    			 * @property {int} initColNum
    			 */
    			initColNum: 26,
    			/**
    			 * 单元格宽度
    			 * @property {int} cellWidth
    			 */
    			cellWidth: 72,
    			/**
    			 * 单元格高度
    			 * @property {int} cellHeight
    			 */
    			cellHeight: 20,
    			/**
    			 * excel最大支持行数
    			 * @property {number} maxRowNum
    			 */
    			maxColNum: 100,
    			/**
    			 * excel最大支持行数
    			 * @property {number} maxRowNum
    			 */
    			maxRowNum: 9999
    
    		},
    		/**
    		 * 系统配置属性
    		 * @property {object} System
    		 */
    		System: {
    			/**
    			 * 页面左侧距离
    			 * @property {int} outerLeft
    			 */
    			outerLeft: 37,
    			/**
    			 * 页面顶部距离
    			 * @property {int} outerTop
    			 */
    			outerTop: 20,
    			/**
    			 * 页面底部距离
    			 * @property {int} outerBottom
    			 */
    			outerBottom: 30,
    			/**
    			 * 单元格宽度
    			 * @property {int} cellWidth
    			 */
    			cellWidth: 72,
    			/**
    			 * 单元格高度
    			 * @property {int} cellHeight
    			 */
    			cellHeight: 20,
    			/**
    			 * 列调整时，鼠标手势变化的距离
    			 * @property {int} effectDistanceCol
    			 */
    			effectDistanceCol: 10,
    			/**
    			 * 行调整时，鼠标手势变化的距离
    			 * @property {int} effectDistanceRow
    			 */
    			effectDistanceRow: 5,
    			/**
    			 * 预加载，行隐藏的距离
    			 * @property {int} prestrainHeight
    			 */
    			prestrainHeight: 200,
    			/**
    			 * 预加载，列隐藏的距离
    			 * @property {number} prestrainWidth
    			 */
    			prestrainWidth: 100,
    			/**
    			 * excel最大支持行数
    			 * @property {number} maxRowNum
    			 */
    			maxRowNum: 9999
    		},
    		mouseOperateState: {
    			select: 'select',
    			dataSource: 'dataSource',
    			drag: 'drag',
    			highlight: 'highlight'
    		},
    		keyboard: {
    			backspace: 8,
    			deleteKey: 46,
    			enter: 13,
    			escape: 27,
    			pageUp: 33,
    			pageDown: 34,
    			leftArrow: 37,
    			upArrow: 38,
    			rightArrow: 39,
    			downArrow: 40
    		},
    		rootPath: 'http://192.168.1.250:8080/acmrexcel-0.1.5/'
    	};
    });
    define('basic/util/binary',function() {
    	
    	/**
    	 * 二分查询工具类
    	 * @author ray wu
    	 * @class binary
    	 * @module basic
    	 * @main  binary
    	 */
    	return {
    		/**
    		 * @method modelBinary
    		 * @deprecated 找个二分查询存在性能瓶颈，使用`newModelBinary`
    		 */
    		modelBinary: function(value, array, strandAttr, rangeAttr, startIndex, endIndex) {
    			var middle,
    				start = startIndex ? startIndex : 0,
    				end,
    				findValue = Math.floor(value),
    				strandAttrByArray,
    				rangeAttrByArray,
    				middleArray;
    			if (endIndex === undefined) {
    				end = array.length - 1;
    			} else {
    				end = endIndex;
    			}
    
    			if (start <= end) {
    				if (array[start].get(strandAttr) === findValue) {
    					return start;
    				}
    				if (array[end].get(strandAttr) === findValue) {
    					return end;
    				}
    				middle = end + start >>> 1;
    				middleArray = array[middle];
    				strandAttrByArray = middleArray.get(strandAttr);
    				rangeAttrByArray = middleArray.get(rangeAttr);
    				if (strandAttrByArray <= findValue && strandAttrByArray + rangeAttrByArray >= findValue) {
    					return middle;
    				} else if (strandAttrByArray > findValue) {
    					return this.modelBinary(findValue, array, strandAttr, rangeAttr, start, middle - 1);
    				} else if (strandAttrByArray + rangeAttrByArray < findValue) {
    					return this.modelBinary(findValue, array, strandAttr, rangeAttr, middle + 1, end);
    				}
    			}
    			return -1;
    		},
    		/**
    		 * 两个属性之间查询 二分查询
    		 * @method newModelBinary
    		 * @param  {int}       value       想查询的数据值
    		 * @param  {array}       array     查询的list集合
    		 * @param  {string}       strandAttr 起始属性
    		 * @param  {string}       rangeAttr  结束属性
    		 * @param  {int}       startIndex 起始索引
    		 * @param  {int}       endIndex   结束索引
    		 * @return {int} `array`中的索引值
    		 */
    		newModelBinary: function(value, array, strandAttr, rangeAttr, startIndex, endIndex) {
    			var middle,
    				start = startIndex ? startIndex : 0,
    				end = endIndex ? endIndex : array.length,
    				findValue = Math.floor(value),
    				strandAttrByArray,
    				rangeAttrByArray,
    				middleArray;
    			while (start < end) {
    				middle = end + start >>> 1;
    				middleArray = array[middle];
    				strandAttrByArray = middleArray.get(strandAttr);
    				rangeAttrByArray = middleArray.get(rangeAttr);
    				if (strandAttrByArray + rangeAttrByArray < findValue) {
    					start = middle + 1;
    				} else {
    					end = middle;
    				}
    			}
    			return start;
    		},
    		/**
    		 * 二分查询（用于插入元素，确定元素位置使用）
    		 * @method newModelBinary
    		 * @param  {int}       value       想查询的数据值
    		 * @param  {array}       array     查询的list集合
    		 * @param  {string}       strandAttr 起始属性
    		 * @param  {string}       rangeAttr  结束属性
    		 * @param  {int}       startIndex 起始索引
    		 * @param  {int}       endIndex   结束索引
    		 * @return {int} `array`中的索引值
    		 */
    		indexModelBinary: function(value, array, strandAttr, rangeAttr, startIndex, endIndex) {
    			if (array.length === 0) {
    				return 0;
    			}
    			var middle,
    				start = startIndex ? startIndex : 0,
    				end = endIndex ? endIndex : array.length - 1,
    				findValue = Math.floor(value),
    				strandAttrByArray,
    				rangeAttrByArray,
    				middleArray;
    			if (array.length === 1) {
    				return (array[0].get(strandAttr) + array[0].get(rangeAttr) >= findValue) ? 0 : 1;
    			}
    			while (start < end) {
    				if (array[start].get(strandAttr) + array[start].get(rangeAttr) >= findValue) {
    					return start;
    				}
    				if (array[end].get(strandAttr) + array[end].get(rangeAttr) === findValue) {
    					return end;
    				}
    				if (array[end].get(strandAttr) + array[end].get(rangeAttr) < findValue) {
    					return end + 1;
    				}
    				middle = end + start >>> 1;
    				middleArray = array[middle];
    				strandAttrByArray = middleArray.get(strandAttr);
    				rangeAttrByArray = middleArray.get(rangeAttr);
    				if (strandAttrByArray + rangeAttrByArray < findValue) {
    					start = middle + 1;
    				} else {
    					end = middle;
    				}
    			}
    			return start;
    		},
    		/**
    		 * 生成行名称
    		 * @method buildRowAlias
    		 * @param  {int} 当前索引值
    		 * @return {string} 当前显示的名称
    		 */
    		buildRowAlias: function(currentIndex) {
    			return (currentIndex + 1).toString();
    		},
    		existArrayBinary: function(value, array, startAttr, endAttr, startIndex, endIndex) {
    			var middle,
    				start = startIndex ? startIndex : 0,
    				end = endIndex ? endIndex : array.length - 1,
    				findValue = Math.floor(value),
    				strandAttrByArray,
    				rangeAttrByArray,
    				middleArray;
    			if (array.length === 0) {
    				return false;
    			}
    			if (array.length === 1) {
    				if (array[0][endAttr] >= findValue && array[0][startAttr] <= findValue) {
    					return true;
    				} else {
    					return false;
    				}
    			}
    			while (start < end) {
    				if (array[start][startAttr] <= findValue && array[start][endAttr] >= findValue) {
    					return true;
    				}
    				if (array[end][startAttr] <= findValue && array[end][endAttr] >= findValue) {
    					return true;
    				}
    				middle = end + start >>> 1;
    				if (array[end][startAttr] <= findValue && array[end][endAttr] >= findValue) {
    					return true;
    				} else if (array[middle][endAttr] < findValue) {
    					start = middle + 1;
    				} else {
    					end = middle;
    				}
    			}
    			return false;
    		},
    		indexArrayBinary: function(value, array, startAttr, endAttr, startIndex, endIndex) {
    			var middle,
    				start = startIndex ? startIndex : 0,
    				end = endIndex ? endIndex : array.length - 1,
    				findValue = Math.floor(value),
    				strandAttrByArray,
    				rangeAttrByArray,
    				middleArray;
    			if (array.length === 0) {
    				return 0;
    			}
    			if (array.length === 1) {
    				if (array[start][endAttr] < findValue) {
    					return 1;
    				} else {
    					return 0;
    				}
    			}
    			while (start < end) {
    				if (array[start][startAttr] >= findValue) {
    					return start;
    				}
    				if (array[end][endAttr] < findValue) {
    					return end + 1;
    				}
    
    				middle = end + start >>> 1;
    
    				if (array[middle][startAttr] <= findValue && array[middle][endAttr] >= findValue) {
    					return middle;
    				} else if (array[middle][endAttr] < findValue) {
    					start = middle + 1;
    				} else {
    					end = middle;
    				}
    			}
    			return start;
    		}
    	};
    
    });
    //attention bug , those cache objects has mix , for use 
    define('basic/tools/cache',function() {
    	
    	var config = require('spreadsheet/config');
    	/**
    	 * 系统缓存对象
    	 * @author ray wu
    	 * @class cache
    	 * @since 0.1.0
    	 * @module basic
    	 */
    	return {
    		CurrentRule: {},
    		FrozenRules: {
    			main: [],
    			row: [],
    			col: []
    		},
    		/**
    		 * 所有单元格位置信息
    		 * @property {object} CellPosition
    		 */
    		CellsPosition: {
    			/**
    			 * 所有列上的单元格`alias`
    			 * @property {object} strandX
    			 */
    			strandX: {},
    			/**
    			 * 所有行上的单元格`alias`
    			 * @property {object} strandY
    			 */
    			strandY: {}
    		},
    		clipState: 'null', //copy：复制状态，cut:剪切状态，null:未进行剪切板操作
    		/**
    		 * 用户可视的区域(在Excel未冻结的情况下使用)
    		 * @property {object} UserView
    		 */
    		UserView: {
    			/**
    			 * 可视区域左上单元格列别名
    			 * @property {string} colAlias
    			 */
    			colAlias: '1',
    			/**
    			 * 可视区域左上单元格行别名
    			 * @property {string} rowAlias
    			 */
    			rowAlias: '1',
    			/**
    			 * 可视区域右下单元格列别名
    			 * @property {string} colEndAlias
    			 */
    			colEndAlias: '1',
    			/**
    			 * 可视区域右下单元格行别名
    			 * @property {string} rowEndAlias
    			 */
    			rowEndAlias: '1'
    		},
    		//鼠标操作状态
    		mouseOperateState: config.mouseOperateState.select,
    
    		listenerList: {}, //事件监听列表
    		/**
    		 * cellsContainer 行视图最大高度
    		 * @type {Number}
    		 */
    		displayRowHeight: 0,
    		/**
    		 * 后台存储excel的总高度
    		 * @property {int} localRowPosi
    		 */
    		localRowPosi: 0,
    		/**
    		 * 后台存储excel,别名最大
    		 */
    		localMaxRowAlias: '',
    		/**
    		 * 临时代替属性，因为sheet还有做，所以sheet的冻结属性暂时由此属性替代。以后需要做成model处理
    		 * @property {object} TempProp
    		 */
    		TempProp: {
    			/**
    			 * 冻结状态
    			 * @property {boolean} isFrozen
    			 */
    			isFrozen: false,
    			/**
    			 * 冻结列别名
    			 * @property {string} colAlias
    			 */
    			colAlias: '1',
    			/**
    			 * 冻结行别名
    			 * @property {string} rowAlias
    			 */
    			rowAlias: '1',
    			/**
    			 * 行冻结状态
    			 * @property {boolean} rowAlias
    			 */
    			rowFrozen: false,
    			/**
    			 * 列冻结状态
    			 * @property {boolean} rowAlias
    			 */
    			colFrozen: false
    		},
    		/**
    		 * 保存位置信息
    		 * @method cachePosition
    		 * @param  {string}      aliasRow 行的别名
    		 * @param  {string}      aliasCol 列的别名
    		 * @param  {int}      index 插入集合位置
    		 */
    		cachePosition: function(aliasRow, aliasCol, index) {
    			var positionX,
    				positionY;
    			// cells=require('collections/cells');
    			positionX = this.CellsPosition.strandX;
    			if (!positionX[aliasCol]) {
    				positionX[aliasCol] = {};
    			}
    			if (!positionX[aliasCol][aliasRow]) {
    				positionX[aliasCol][aliasRow] = {};
    			}
    			positionY = this.CellsPosition.strandY;
    			if (!positionY[aliasRow]) {
    				positionY[aliasRow] = {};
    			}
    			if (!positionY[aliasRow][aliasCol]) {
    				positionY[aliasRow][aliasCol] = {};
    			}
    			positionX[aliasCol][aliasRow] = index;
    			positionY[aliasRow][aliasCol] = index;
    		},
    		//动态加载，已加载区域
    		rowRegionPosi: [],
    		//动态加载，已加载列区域
    		colRegionPosi: [],
    		//动态加载，已加单元格载区域
    		cellRegionPosi: {
    			transverse: [],
    			vertical: []
    		},
    		visibleRegion: {
    			top: 0,
    			bottom: 0,
    			left: 0,
    			right: 0
    		}
    	};
    
    });
    define('basic/tools/send',function() {
    	
    	var $ = require('lib/jquery'),
    		systemConfig = require('spreadsheet/config');
    	/**
    	 * ajax工具类
    	 * @author ray wu
    	 * @class packAjax
    	 * @since 0.1.0
    	 * @module basic
    	 */
    	return {
    		/**
    		 * 封装的AJAX，为减少代码的重复内容
    		 * 部分封装默认参数
    		 * @method PackAjax
    		 * @param  {object} cfg 用户自定义配置
    		 */
    		PackAjax: function(cfg) {
    			var config = {},
    				NULLFUNC = function() {};
    			if (!cfg.url) {
    				return;
    			}
    			config = {
    				url: typeof cfg.url === 'string' ? (systemConfig.rootPath + cfg.url) : undefined,
    				type: cfg.type || 'post',
    				contentType: cfg.contentType || 'application/json; charset=UTF-8',
    				dataType: cfg.dataType || 'json',
    				data: cfg.data || '',
    				async: cfg.async !== undefined ? cfg.async : true,
    				timeout: cfg.timeout || 5000,
    				success: cfg.success || NULLFUNC,
    				error: cfg.error || NULLFUNC,
    				complete: cfg.complete || NULLFUNC
    			};
    
    			$.ajax({
    				url: config.url,
    				type: config.type,
    				contentType: config.contentType,
    				dataType: config.dataType,
    				async: config.async,
    				data: config.data,
    				timeout: config.timeout,
    				success: config.success,
    				error: config.error,
    				complete: function() {
    					config.complete();
    				}
    			});
    
    		}
    	};
    });
    define('basic/tools/loadrecorder',function() {
    	
    	var binary = require('basic/util/binary');
    
    	return {
    		insertPosi: function(startPosi, endPosi, region) {
    			var startIndex,
    				endIndex,
    				startExist,
    				endExist,
    				newStartPosi,
    				newEndPosi,
    				i, len;
    			startIndex = binary.indexArrayBinary(startPosi, region, 'start', 'end');
    			endIndex = binary.indexArrayBinary(endPosi, region, 'start', 'end');
    			startExist = binary.existArrayBinary(startPosi, region, 'start', 'end');
    			endExist = binary.existArrayBinary(endPosi, region, 'start', 'end');
    
    			newStartPosi = startExist === false ? startPosi : region[startIndex].start;
    			newEndPosi = endExist === false ? endPosi : region[endIndex].end;
    			//ps:对于相应区域，未进行合并，需要改进
    			if (startIndex === endIndex) {
    				if (startExist === true && endExist === true) return;
    				len = (startExist === true || endExist === true) ? 1 : 0;
    			} else {
    				if (startExist === true && endExist === true) {
    					len = endIndex - startIndex + 1;
    				} else if (startExist === true || endExist === true) {
    					len = endIndex - startIndex;
    				} else {
    					len = endIndex - startIndex - 1;
    				}
    			}
    			region.splice(startIndex, len, {
    				start: newStartPosi,
    				end: newEndPosi
    			});
    		},
    		adaptPosi: function(startPosi, value, region) {
    			var startIndex,
    				endIndex,
    				startExist,
    				endExist,
    				newStartPosi,
    				newEndPosi,
    				i, len;
    			startIndex = binary.indexArrayBinary(startPosi, region, 'start', 'end');
    			startExist = binary.existArrayBinary(startPosi, region, 'start', 'end');
    			//问题
    			if (startExist === true && region[startIndex].start !== startPosi) {
    				region[startIndex].end = region[startIndex].end + value;
    				for (i = startIndex + 1; i < region.length; i++) {
    					region[i].start += value;
    					region[i].end += value;
    				}
    			} else {
    				for (i = startIndex; i < region.length; i++) {
    					region[i].start += value;
    					region[i].end += value;
    				}
    			}
    		},
    		getUnloadPosi: function(startPosi, endPosi, region) {
    			var result = [],
    				startIndex,
    				endIndex,
    				startExist,
    				endExist,
    				newStartPosi,
    				newEndPosi,
    				existStartPosi,
    				existEndPosi,
    				i, len;
    			startIndex = binary.indexArrayBinary(startPosi, region, 'start', 'end');
    			endIndex = binary.indexArrayBinary(endPosi, region, 'start', 'end');
    			startExist = binary.existArrayBinary(startPosi, region, 'start', 'end');
    			endExist = binary.existArrayBinary(endPosi, region, 'start', 'end');
    
    
    			if (startIndex === endIndex) {
    
    				if (startExist === false && endExist === false) {
    					result.push({
    						start: startPosi,
    						end: endPosi
    					});
    				} else if (startExist === false && endExist === true) {
    					newEndPosi = region[endIndex].end - 1;
    					result.push({
    						start: startPosi,
    						end: newEndPosi
    					});
    				} else if (startExist === true && endExist === false) {
    					newStartPosi = region[startIndex].start + 1;
    					result.push({
    						start: newStartPosi,
    						end: endPosi
    					});
    				}
    
    			} else {
    				len = endIndex - startIndex;
    				for (i = 0; i < endIndex + 1; i++) {
    					if (region[startIndex + i] === undefined) {
    						result.push({
    							start: startPosi,
    							end: endPosi
    						});
    						break;
    					}
    					existStartPosi = region[startIndex + i].start;
    					existEndPosi = region[startIndex + i].end;
    					if (startPosi > endPosi) {
    						break;
    					} else if (existStartPosi < startPosi) {
    						startPosi = existEndPosi + 1;
    					} else {
    						newStartPosi = startPosi;
    						newEndPosi = existStartPosi - 1;
    						if (newStartPosi <= newEndPosi) {
    							result.push({
    								start: newStartPosi,
    								end: newEndPosi
    							});
    						}
    						startPosi = existEndPosi + 1;
    					}
    				}
    			}
    			return result;
    		}
    	};
    });
    define('basic/tools/buildcolalias',function() {
    	
    	var buildColAlias = function(currentIndex) {
    		var aliasCol = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],
    			displayText = '',
    			remainder,
    			divisible,
    			temp = 0;
    
    		remainder = currentIndex % aliasCol.length;
    		divisible = Math.floor(currentIndex / aliasCol.length);
    		displayText = aliasCol[remainder] + displayText;
    		while (divisible > 0) {
    			currentIndex = divisible - 1;
    			remainder = currentIndex % aliasCol.length;
    			divisible = Math.floor(currentIndex / aliasCol.length);
    			displayText = aliasCol[remainder] + displayText;
    		}
    		return displayText;
    	};
    	return buildColAlias;
    });
    /**
     * Backbone-Nested 2.0.3 - An extension of Backbone.js that keeps track of nested attributes
     *
     * http://afeld.github.com/backbone-nested/
     *
     * Copyright (c) 2011-2012 Aidan Feldman
     * MIT Licensed (LICENSE)
     */
    /*global define, require, module */
    
    
    define('lib/backbone.nested',function() {
      
      var _ = require('lib/underscore'),
        $ = require('lib/jquery'),
        Backbone = require('lib/backbone'),
        _delayedTriggers = [],
        nestedChanges;
    
      Backbone.NestedModel = Backbone.Model.extend({
    
        get: function(attrStrOrPath) {
          return Backbone.NestedModel.walkThenGet(this.attributes, attrStrOrPath);
        },
    
        previous: function(attrStrOrPath) {
          return Backbone.NestedModel.walkThenGet(this._previousAttributes, attrStrOrPath);
        },
    
        has: function(attr) {
          // for some reason this is not how Backbone.Model is implemented - it accesses the attributes object directly
          var result = this.get(attr);
          return !(result === null || _.isUndefined(result));
        },
    
        set: function(key, value, opts) {
          var newAttrs = Backbone.NestedModel.deepClone(this.attributes),
            attrPath,
            unsetObj,
            validated;
    
          if (_.isString(key)) {
            // Backbone 0.9.0+ syntax: `model.set(key, val)` - convert the key to an attribute path
            attrPath = Backbone.NestedModel.attrPath(key);
          } else if (_.isArray(key)) {
            // attribute path
            attrPath = key;
          }
    
          if (attrPath) {
            opts = opts || {};
            this._setAttr(newAttrs, attrPath, value, opts);
          } else { // it's an Object
            opts = value || {};
            var attrs = key;
            for (var _attrStr in attrs) {
              if (attrs.hasOwnProperty(_attrStr)) {
                this._setAttr(newAttrs,
                  Backbone.NestedModel.attrPath(_attrStr),
                  opts.unset ? void 0 : attrs[_attrStr],
                  opts);
              }
            }
          }
    
          nestedChanges = Backbone.NestedModel.__super__.changedAttributes.call(this);
    
          if (opts.unset && attrPath && attrPath.length === 1) { // assume it is a singular attribute being unset
            // unsetting top-level attribute
            unsetObj = {};
            unsetObj[key] = void 0;
            nestedChanges = _.omit(nestedChanges, _.keys(unsetObj));
            validated = Backbone.NestedModel.__super__.set.call(this, unsetObj, opts);
          } else {
            unsetObj = newAttrs;
    
            // normal set(), or an unset of nested attribute
            if (opts.unset && attrPath) {
              // make sure Backbone.Model won't unset the top-level attribute
              opts = _.extend({}, opts);
              delete opts.unset;
            } else if (opts.unset && _.isObject(key)) {
              unsetObj = key;
            }
            nestedChanges = _.omit(nestedChanges, _.keys(unsetObj));
            validated = Backbone.NestedModel.__super__.set.call(this, unsetObj, opts);
          }
    
    
          if (!validated) {
            // reset changed attributes
            this.changed = {};
            nestedChanges = {};
            return false;
          }
    
    
          this._runDelayedTriggers();
          return this;
        },
    
        unset: function(attr, options) {
          return this.set(attr, void 0, _.extend({}, options, {
            unset: true
          }));
        },
    
        clear: function(options) {
          nestedChanges = {};
    
          // Mostly taken from Backbone.Model.set, modified to work for NestedModel.
          options = options || {};
          // clone attributes so validate method can't mutate it from underneath us.
          var attrs = _.clone(this.attributes);
          if (!options.silent && this.validate && !this.validate(attrs, options)) {
            return false; // Should maybe return this instead?
          }
    
          var changed = this.changed = {};
          var model = this;
    
          var setChanged = function(obj, prefix, options) {
            // obj will be an Array or an Object
            _.each(obj, function(val, attr) {
              var changedPath = prefix;
              if (_.isArray(obj)) {
                // assume there is a prefix
                changedPath += '[' + attr + ']';
              } else if (prefix) {
                changedPath += '.' + attr;
              } else {
                changedPath = attr;
              }
    
              val = obj[attr];
              if (_.isObject(val)) { // clear child attrs
                setChanged(val, changedPath, options);
              }
              if (!options.silent) model._delayedChange(changedPath, null, options);
              changed[changedPath] = null;
            });
          };
          setChanged(this.attributes, '', options);
    
          this.attributes = {};
    
          // Fire the `"change"` events.
          if (!options.silent) this._delayedTrigger('change');
    
          this._runDelayedTriggers();
          return this;
        },
    
        add: function(attrStr, value, opts) {
          var current = this.get(attrStr);
          if (!_.isArray(current)) throw new Error('current value is not an array');
          return this.set(attrStr + '[' + current.length + ']', value, opts);
        },
    
        remove: function(attrStr, opts) {
          opts = opts || {};
    
          var attrPath = Backbone.NestedModel.attrPath(attrStr),
            aryPath = _.initial(attrPath),
            val = this.get(aryPath),
            i = _.last(attrPath);
    
          if (!_.isArray(val)) {
            throw new Error("remove() must be called on a nested array");
          }
    
          // only trigger if an element is actually being removed
          var trigger = !opts.silent && (val.length >= i + 1),
            oldEl = val[i];
    
          // remove the element from the array
          val.splice(i, 1);
          opts.silent = true; // Triggers should only be fired in trigger section below
          this.set(aryPath, val, opts);
    
          if (trigger) {
            attrStr = Backbone.NestedModel.createAttrStr(aryPath);
            this.trigger('remove:' + attrStr, this, oldEl);
            for (var aryCount = aryPath.length; aryCount >= 1; aryCount--) {
              attrStr = Backbone.NestedModel.createAttrStr(_.first(aryPath, aryCount));
              this.trigger('change:' + attrStr, this, oldEl);
            }
            this.trigger('change', this, oldEl);
          }
    
          return this;
        },
    
        changedAttributes: function(diff) {
          var backboneChanged = Backbone.NestedModel.__super__.changedAttributes.call(this, diff);
          if (_.isObject(backboneChanged)) {
            return _.extend({}, nestedChanges, backboneChanged);
          }
          return false;
        },
    
        toJSON: function() {
          return Backbone.NestedModel.deepClone(this.attributes);
        },
    
    
        // private
        _delayedTrigger: function( /* the trigger args */ ) {
          _delayedTriggers.push(arguments);
        },
    
        _delayedChange: function(attrStr, newVal, options) {
          this._delayedTrigger('change:' + attrStr, this, newVal, options);
    
          // Check if `change` even *exists*, as it won't when the model is
          // freshly created.
          if (!this.changed) {
            this.changed = {};
          }
    
          this.changed[attrStr] = newVal;
        },
    
        _runDelayedTriggers: function() {
          while (_delayedTriggers.length > 0) {
            this.trigger.apply(this, _delayedTriggers.shift());
          }
        },
    
        // note: modifies `newAttrs`
        _setAttr: function(newAttrs, attrPath, newValue, opts) {
          opts = opts || {};
    
          var fullPathLength = attrPath.length;
          var model = this;
    
          Backbone.NestedModel.walkPath(newAttrs, attrPath, function(val, path, next) {
            var attr = _.last(path);
            var attrStr = Backbone.NestedModel.createAttrStr(path);
    
            // See if this is a new value being set
            var isNewValue = !_.isEqual(val[attr], newValue);
    
            if (path.length === fullPathLength) {
              // reached the attribute to be set
    
              if (opts.unset) {
                // unset the value
                delete val[attr];
    
                // Trigger Remove Event if array being set to null
                if (_.isArray(val)) {
                  var parentPath = Backbone.NestedModel.createAttrStr(_.initial(attrPath));
                  model._delayedTrigger('remove:' + parentPath, model, val[attr]);
                }
              } else {
                // Set the new value
                val[attr] = newValue;
              }
    
              // Trigger Change Event if new values are being set
              if (!opts.silent && _.isObject(newValue) && isNewValue) {
                var visited = [];
                var checkChanges = function(obj, prefix) {
                  // Don't choke on circular references
                  if (_.indexOf(visited, obj) > -1) {
                    return;
                  } else {
                    visited.push(obj);
                  }
    
                  var nestedAttr, nestedVal;
                  for (var a in obj) {
                    if (obj.hasOwnProperty(a)) {
                      nestedAttr = prefix + '.' + a;
                      nestedVal = obj[a];
                      if (!_.isEqual(model.get(nestedAttr), nestedVal)) {
                        model._delayedChange(nestedAttr, nestedVal, opts);
                      }
                      if (_.isObject(nestedVal)) {
                        checkChanges(nestedVal, nestedAttr);
                      }
                    }
                  }
                };
                checkChanges(newValue, attrStr);
    
              }
    
    
            } else if (!val[attr]) {
              if (_.isNumber(next)) {
                val[attr] = [];
              } else {
                val[attr] = {};
              }
            }
    
            if (!opts.silent) {
              // let the superclass handle change events for top-level attributes
              if (path.length > 1 && isNewValue) {
                model._delayedChange(attrStr, val[attr], opts);
              }
    
              if (_.isArray(val[attr])) {
                model._delayedTrigger('add:' + attrStr, model, val[attr]);
              }
            }
          });
        }
    
      }, {
        // class methods
    
        attrPath: function(attrStrOrPath) {
          var path;
    
          if (_.isString(attrStrOrPath)) {
            // TODO this parsing can probably be more efficient
            path = (attrStrOrPath === '') ? [''] : attrStrOrPath.match(/[^\.\[\]]+/g);
            path = _.map(path, function(val) {
              // convert array accessors to numbers
              return val.match(/^\d+$/) ? parseInt(val, 10) : val;
            });
          } else {
            path = attrStrOrPath;
          }
    
          return path;
        },
    
        createAttrStr: function(attrPath) {
          var attrStr = attrPath[0];
          _.each(_.rest(attrPath), function(attr) {
            attrStr += _.isNumber(attr) ? ('[' + attr + ']') : ('.' + attr);
          });
    
          return attrStr;
        },
    
        deepClone: function(obj) {
          return $.extend(true, {}, obj);
        },
    
        walkPath: function(obj, attrPath, callback, scope) {
          var val = obj,
            childAttr;
    
          // walk through the child attributes
          for (var i = 0; i < attrPath.length; i++) {
            callback.call(scope || this, val, attrPath.slice(0, i + 1), attrPath[i + 1]);
    
            childAttr = attrPath[i];
            val = val[childAttr];
            if (!val) break; // at the leaf
          }
        },
    
        walkThenGet: function(attributes, attrStrOrPath) {
          var attrPath = Backbone.NestedModel.attrPath(attrStrOrPath),
            result;
    
          Backbone.NestedModel.walkPath(attributes, attrPath, function(val, path) {
            var attr = _.last(path);
            if (path.length === attrPath.length) {
              // attribute found
              result = val[attr];
            }
          });
    
          return result;
        }
    
      });
    
      return Backbone;
    });
    define('models/lineRow',function() {
    	
    	var Backbone = require('lib/backbone'),
    	BackboneNest = require('lib/backbone.nested');
    
    	/**
    	 * 行模型对象
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class LineRow  
    	 * @module models
    	 * @extends Backbone.Collection
    	 * @constructor
    	 */
    	var LineRowModel = Backbone.Model.extend({
    		defaults: {
    			/**
    			 * 排序码
    			 * @property {Number}
    			 */
    			sort: 0,
    			/**
    			 * 别名，唯一标识
    			 * @property {string} alias
    			 */
    			alias: '',
    			/**
    			 * 相对位置`top`值
    			 * @property {number} top
    			 */
    			top: 0,
    			/**
    			 * 高度
    			 * @property {number} height
    			 */
    			height: 19,
    			/**
    			 * 显示的名字
    			 * @property {string} displayName
    			 */
    			displayName: '',
    			/**
    			 * 是否被选中
    			 * @property {boolean} activeState
    			 */
    			activeState: false,
    			/**
    			 * 是否显示
    			 * @property {boolean} isView
    			 */
    			isView: true
    		},
    		/**
    		 * 销毁`model`对象的视图
    		 *
    		 * @method destoryView
    		 */
    		destroyView: function() {
    			this.set('isView', false);
    		}
    	});
    	return LineRowModel;
    });
    define('models/lineCol',function() {
    	
    	var Backbone = require('lib/backbone'),
    		BackboneNest = require('lib/backbone.nested');
    
    
    	/**
    	 * 列模型对象
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class LineCol  
    	 * @module models
    	 * @extends Backbone.Collection
    	 * @constructor
    	 */
    	var LineColModel = Backbone.Model.extend({
    		defaults: {
    			/**
    			 * 排序码
    			 * @property {Number}
    			 */
    			sort: 0,
    			/**
    			 * 别名，唯一标识
    			 * @property {string} alias
    			 */
    			alias: '',
    			/**
    			 * 相对位置`left`值
    			 * @property {number} left
    			 */
    			left: 0,
    			/**
    			 * 宽度
    			 * @property {number} width
    			 */
    			width: 71,
    			/**
    			 * 显示的名字
    			 * @property {string} displayName
    			 */
    			displayName: '',
    			/**
    			 * 是否被选中
    			 * @property {boolean} activeState
    			 */
    			activeState: false,
    			/**
    			 * 是否显示
    			 * @property {boolean} isView
    			 */
    			isView: true
    		},
    		/**
    		 * 销毁`model`对象的视图
    		 *
    		 * @method destoryView
    		 */
    		destoryView: function() {
    			this.set('isView', false);
    		}
    	});
    	return LineColModel;
    });
    //attention bug, this `models` need to `Models` , this is error , secound phease correction
    //attention bug, remarket lack isn't exist `remarket` property .
    //attention bug, showState is or not exist value ?
    
    
    define('models/cell',function() {
    	
    	var Backbone = require('lib/backbone');
    	var BackboneNest = require('lib/backbone.nested');
    
    
    	/**
    	 * 单元格模型对象
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class CellModel  
    	 * @module models
    	 * @extends Backbone.Collection
    	 * @constructor
    	 */
    	var CellModel = BackboneNest.NestedModel.extend({
    		defaults: {
    			/**
    			 * 单元格物理盒模型
    			 * @property {object} physicBox 
    			 */
    			physicsBox: {
    				/**
    				 * 单元格的距顶距离
    				 * @property {number} top 
    				 */
    				top: 0,
    				/**
    				 * 单元格的距左距离
    				 * @property {number} left 
    				 */
    				left: 0,
    				/**
    				 * 单元格的宽度
    				 * @property {number} width
    				 */
    				width: 71,
    				/**
    				 * 单元格的高度
    				 * @property {number} height
    				 */
    				height: 19
    			},
    			/**
    			 * 单元格占位
    			 * @property {object} occupy
    			 */
    			occupy: {
    				/**
    				 * 单元格占`col`的`alias`
    				 * @property {array} x
    				 */
    				x: [],
    				/**
    				 * 单元格占`row`的`alias`
    				 * @property {array} y
    				 */
    				y: []
    			},
    			/**
    			 * 字体属性对象
    			 * @property {object} content
    			 */
    			content: {
    				/**
    				 * 字号
    				 * @property {string} size
    				 */
    				size: "11pt",
    				/**
    				 * 字体风格
    				 * @property {string} family
    				 */
    				family: "SimSun",
    				/**
    				 * 字体加粗
    				 * @property {boolean} bd
    				 */
    				bd: false,
    				/**
    				 * 字体倾斜
    				 * @property {boolean} italic
    				 */
    				italic: false,
    				/**
    				 * 字体颜色RGB
    				 * @property {string} color
    				 */
    				color: "#000",
    				/**
    				 * 左右对齐
    				 * @property {string} alignRow
    				 */
    				alignRow: '',
    				/**
    				 * 上下对齐
    				 * @property {string} alignLine
    				 */
    				alignCol: "middle",
    				/**
    				 * 文本内容
    				 * @property {string} texts
    				 */
    				texts: '',
    				
    				wordWrap : null
    			},
    			/**
    			 * 边线属性
    			 * @property {object} border
    			 */
    			border: {
    				/**
    				 * 上边线
    				 * @property {boolean} top
    				 */
    				top: false,
    				/**
    				 * 右边线
    				 * @property {boolean} right
    				 */
    				right: false,
    				/**
    				 * 低边线
    				 * @property {boolean} bottom
    				 */
    				bottom: false,
    				/**
    				 * 左边线
    				 * @property {boolean} left
    				 */
    				left: false
    			},
    			/**
    			 * 用户可定义的属性
    			 * @property {object} customProp
    			 */
    			customProp: {
    				/**
    				 * 单元格背景颜色RGB
    				 * @property {string} background
    				 */
    				background: "#fff",
    				/**
    				 * 单元格格式
    				 * @property {string} format
    				 */
    				format: "text",
    				/**
    				 * 单元格备注内容
    				 * @property {string} remarket
    				 */
    				remarket: ""
    			},
    			/**
    			 * 单元格是否显示
    			 * @property {boolean} showState
    			 */
    			showState: true,
    			/**
    			 * 是否已经被销毁
    			 * @property {Boolean} isDestroy
    			 */
    			isDestroy: false,
    			/**
    			 * 是否允许单元格进行高亮效果（ps:此属性为外部扩展属性，后期应对此属性进行分离）
    			 * @type {Boolean}
    			 */
    			highlight: true
    		},
    		/**
    		 * 隐藏当前单元格
    		 * @method hide
    		 */
    		hide: function() {
    			this.set('showState', false);
    		}
    	});
    	return CellModel;
    });
    //attention bug, those name didn't significance
    
    define('models/selectRegion',function() {
    	
    	var Backbone = require('lib/backbone'),
    		BackboneNest = require('lib/backbone.nested'),
    		SelectRegion;
    
    	/**
    	 * 选中区域模型对象
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class SelectRegion  
    	 * @module models
    	 * @extends Backbone.NestedModel
    	 * @constructor
    	 */
    	SelectRegion = Backbone.NestedModel.extend({
    		defaults: {
    			/**
    			 * 鼠标相对位置信息，索引值，初始化信息
    			 * @property {object} initPosi
    			 */
    			initPosi: {
    				/**
    				 * 鼠标的`X`的位置索引
    				 * @property {number} startX
    				 */
    				startX: 0,
    				/**
    				 * 鼠标的`Y`的位置索引
    				 * @property {number} startY
    				 */
    				startY: 0,
    			},
    			/**
    			 * 鼠标相对位置信息，索引值，最终结束信息
    			 * @property {object} mousePosi
    			 */
    			mousePosi: {
    				/**
    				 * 鼠标的`X`的位置索引
    				 * @property {number} mouseX
    				 */
    				mouseX: 0,
    				/**
    				 * 鼠标的`Y`的位置索引
    				 * @property {number} mouseY
    				 */
    				mouseY: 0
    			},
    			/**
    			 * 相对位置属性
    			 * @property {object} physicsPosi
    			 */
    			physicsPosi: {
    				/**
    				 * 相对位置`top`值
    				 * @property {number} top
    				 */
    				top: 0,
    				/**
    				 * 相对位置`bottom`值
    				 * @property {number} bottom
    				 */
    				bottom: 0,
    				/**
    				 * 相对位置`left`值
    				 * @property {number} left
    				 */
    				left: 0,
    				/**
    				 * 相对位置`right`值
    				 * @property {number} right
    				 */
    				right: 0
    			},
    			/**
    			 * 宽高属性
    			 * @property {object} physicBox
    			 */
    			physicsBox: {
    				/**
    				 * 宽度
    				 * @property {number} width
    				 */
    				width: 71,
    				/**
    				 * 高度
    				 * @property {number} height
    				 */
    				height: 19
    			},
    			//current box start,end postion index value (complete)
    			/**
    			 * [wholePosi description]
    			 * @property {object} wholePosi
    			 */
    			wholePosi: {
    				/**
    				 * 开始盒模型`col`索引值
    				 * @property {number} startX
    				 */
    				startX: 0,
    				/**
    				 * 开始盒模型`row`索引值
    				 * @property {number} startY
    				 */
    				startY: 0,
    				/**
    				 * 结束盒模型`col`索引值
    				 * @property {number} endX
    				 */
    				endX: 0,
    				/**
    				 * 结束盒模型`row`索引值
    				 * @property {number} endY
    				 */
    				endY: 0
    			},
    			selectType: 'operation' // 'dataSource','drag' , 'clip'
    		}
    	});
    	return SelectRegion;
    });
    define('collections/selectRegion',function() {
    	
    	var Backbone = require('lib/backbone'),
    		config = require('spreadsheet/config'),
    		SelectRegionModel = require('models/selectRegion'),
    		SelectRegions;
    
    
    	/**
    	 * 选中区域集合类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class SelectRegion  
    	 * @module collections
    	 * @extends Backbone.Collection
    	 * @constructor
    	 */
    	SelectRegions = Backbone.Collection.extend({
    		/**
    		 * 集合成员类型
    		 * @property model 
    		 * @type app.Models.SelectRegion
    		 */
    		model: SelectRegionModel,
    		url: 'select',
    		/**
    		 * 获取选中区域，相邻对象
    		 * @method getAdjacent 
    		 * @param  direction {String} 相邻方向
    		 */
    		getAdjacent: function(direction) {
    			var initPosiIndex = this.models[0].get('initPosi'),
    				physicsBox = this.models[0].get('physicsBox'),
    				physicsPosi = this.models[0].get('physicsPosi'),
    				wholePosiIndex = this.models[0].get('wholePosi'),
    				initPosiRowIndex = initPosiIndex.startX,
    				wholePosiStartRowIndex = wholePosiIndex.startX,
    				wholePosiEndRowIndex = wholePosiIndex.endX,
    				model = {};
    			switch (direction) {
    				case 'LEFT':
    					model.initPosi = {};
    					model.wholePosi = {};
    					model.physicsPosi = {};
    					model.physicsBox = {};
    					model.initPosi.startX = initPosiRowIndex - 1;
    					model.wholePosi.startX = wholePosiStartRowIndex - 1;
    					model.wholePosi.endX = wholePosiEndRowIndex - 1;
    					model.physicsPosi.left = physicsPosi.left - config.User.cellWidth;
    					this.models[0].set(model);
    					break;
    				case 'RIGHT':
    
    					model.initPosi = {};
    					model.wholePosi = {};
    					model.physicsPosi = {};
    					model.physicsBox = {};
    					model.initPosi.startX = initPosiRowIndex + 1;
    					model.wholePosi.startX = wholePosiStartRowIndex + 1;
    					model.wholePosi.endX = wholePosiEndRowIndex + 1;
    					model.physicsPosi.left = physicsPosi.left + config.User.cellWidth;
    					this.models[0].set(model);
    					break;
    				case 'UP':
    					break;
    				case 'DOWN':
    					break;
    			}
    		},
    		/**
    		 * 通过选中区域状态进行筛选
    		 * @param  {string} type 选中区域类型
    		 * @return {array} 筛选结果
    		 */
    		getModelByType: function(type) {
    			return this.where({
    				selectType: type
    			});
    		}
    	});
    	return new SelectRegions();
    });
    define('collections/headItemCol',function() {
    	
    	var _ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		binary = require('basic/util/binary'),
    		LineColModel = require('models/lineCol'),
    		selectRegions = require('collections/selectRegion');
    	/**
    	 *列标集合类
    	 * @author ray wu
    	 * @since 1.0.0
    	 * @class HeadItemCol 
    	 * @module collections
    	 * @extends Backbone.Collection
    	 * @constructor
    	 */
    	var HeadItemCols = Backbone.Collection.extend({
    		/**
    		 * 集合成员类型
    		 * @property model 
    		 * @type app.Models.LineCol
    		 */
    		model: LineColModel,
    		url: 'itemcol',
    		/**
    		 * 获取选中区域初始单元格列标
    		 * @method getModelInitSelectRegion
    		 * @return {app.Models.LineCol} lineCol对象
    		 */
    		getModelInitSelectRegion: function() {
    			return this.models[selectRegions.models[0].toJSON().initPosi.startX];
    		},
    		/**
    		 * 获取选中区域的所有列对象
    		 * @method getModelListByWholeSelectRegion
    		 * @return {app.Models.LineCol} lineCol对象
    		 */
    		getModelListByWholeSelectRegion: function() {
    			var modelList = [],
    				selectRegion,
    				between,
    				startIndexCol,
    				endIndexCol,
    				i = 0;
    
    			selectRegion = selectRegions.models[0];
    			startIndexCol = selectRegion.get('wholePosi').startX;
    			endIndexCol = selectRegion.get('wholePosi').endX;
    			between = endIndexCol - startIndexCol + 1;
    			for (; i < between; i++) {
    				modelList.push(this.models[startIndexCol + i]);
    			}
    			return modelList;
    		},
    		getIndexByDisplayname: function(displayName) {
    			var model = this.findWhere({
    				'displayName': displayName
    			});
    			return _.indexOf(this.models, model);
    		},
    		/**
    		 * 获取区域的所有列对象
    		 * @method getModelListByIndex
    		 * @return {Array} lineCol数组
    		 */
    		getModelListByIndex: function(startColIndex, endColIndex) {
    			var i, modelList = [];
    			for (i = startColIndex; i < endColIndex + 1; i++) {
    				modelList.push(this.models[i]);
    			}
    			return modelList;
    		},
    
    		/**
    		 * 获取整个列标容器宽度
    		 * @method getMaxDistanceWidth
    		 * @return {int} 宽度
    		 */
    		getMaxDistanceWidth: function() {
    			var currentModel = this.models[this.models.length - 1];
    			return currentModel.get('left') + currentModel.get('width');
    		},
    		/**
    		 * 根据别名获取对象的索引
    		 * @method getModelByAlias
    		 * @param {string} alias 列别名
    		 * @return {int} 索引值
    		 */
    		getIndexByAlias: function(alias) {
    			var model = this.findWhere({
    				'alias': alias
    			});
    			return _.indexOf(this.models, model);
    		},
    		/**
    		 * 通过别名查询符合条件标线的对象
    		 * @method getModelByAlias
    		 * @param  {string} alias 别名
    		 * @return {app.Models.LineCol} 对象
    		 */
    		getModelByAlias: function(alias) {
    			return this.findWhere({
    				'alias': alias
    			});
    		},
    		/**
    		 * 通过坐标查询符合条件标线的对象
    		 * @method getModelByAlias
    		 * @param  {number} posi 坐标
    		 * @return {app.Models.LineCol} 对象
    		 */
    		getModelByPosition: function(posi) {
    			var currentIndex = binary.newModelBinary(posi, this.models, 'left', 'width', 0, this.models.length - 1);
    			return this.models[currentIndex];
    		},
    		/**
    		 * 获取相邻标线的对象
    		 * @method getNeighborModelByAlias
    		 * @param  {number} alias 坐标
    		 * @return {app.Models.LineCol} 对象
    		 */
    		getNeighborModelByAlias: function(alias, redirction) {
    			var modelList = this.models,
    				len = modelList.length,
    				currentIndex;
    			//toward to right
    			if (redirction === 'RIGHT') {
    				currentIndex = this.getIndexByAlias(alias);
    				if (currentIndex === len - 1) {
    					return null;
    				}
    				return modelList[currentIndex + 1];
    			}
    			// toward to left
    			if (redirction === 'LEFT') {
    				currentIndex = this.getIndexByAlias(alias);
    				if (currentIndex === 0) {
    					return null;
    				}
    				return modelList[currentIndex - 1];
    			}
    			return null;
    		}
    	});
    	return new HeadItemCols();
    });
    define('collections/headItemRow',function() {
    	
    	var _ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		binary = require('basic/util/binary'),
    		LineRowModel = require('models/lineRow'),
    		selectRegions = require('collections/selectRegion'),
    		HeadItemRows;
    	/**
    	 * 行模型集合类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class HeadItemRow 
    	 * @module collections
    	 * @extends Backbone.Collection
    	 * @constructor
    	 */
    	HeadItemRows = Backbone.Collection.extend({
    		/**
    		 * 集合成员类型
    		 * @property model 
    		 * @type app.Models.LineRow
    		 */
    		model: LineRowModel,
    		url: 'itemrow',
    		/**
    		 * 获取选中区域初始单元格行标
    		 * @method getModelInitSelectRegion
    		 * @return {app.Models.LineRow} LineRow对象
    		 */
    		getModelInitSelectRegion: function() {
    			return this.models[selectRegions.models[0].toJSON().initPosi.startY];
    		},
    		/**
    		 * 获取区域的所有列对象
    		 * @method getModelListByIndex
    		 * @return {Array} lineRow数组
    		 */
    		getModelListByIndex: function(startRowIndex, endRowIndex) {
    			var i, modelList = [];
    			for (i = startRowIndex; i < endRowIndex + 1; i++) {
    				modelList.push(this.models[i]);
    			}
    			return modelList;
    		},
    		/**
    		 * 获取选中区域的所有列对象
    		 * @method getModelListByWholeSelectRegion
    		 * @return {app.Models.LineRow} LineRow对象
    		 */
    		getModelListByWholeSelectRegion: function() {
    			var modelList = [],
    				selectRegion,
    				between,
    				startIndexRow,
    				endIndexRow,
    				i = 0;
    
    			selectRegion = selectRegions.models[0];
    			startIndexRow = selectRegion.get('wholePosi').startY;
    			endIndexRow = selectRegion.get('wholePosi').endY;
    			between = endIndexRow - startIndexRow + 1;
    			for (; i < between; i++) {
    				modelList.push(this.models[startIndexRow + i]);
    			}
    			return modelList;
    		},
    		getIndexByDisplayname: function(displayName) {
    			var model = this.findWhere({
    				'displayName': displayName
    			});
    			return _.indexOf(this.models, model);
    		},
    		/**
    		 * 获取整个列标容器宽度
    		 * @method getMaxDistanceHeight
    		 * @return {int} 高度
    		 */
    		getMaxDistanceHeight: function() {
    			var currentModel = this.models[this.models.length - 1];
    			return currentModel.get('top') + currentModel.get('height');
    		},
    		/**
    		 * 通过别名查询符合条件标线的对象
    		 * @method getModelByAlias
    		 * @param  {alias} alias 别名
    		 * @return {app.Models.LineCol} 对象
    		 */
    		getModelByAlias: function(alias) {
    			return this.findWhere({
    				'alias': alias
    			});
    		},
    		/**
    		 * 获取标线对象通过别名
    		 * @method getModelByAlias
    		 * @param  {alias} alias 别名
    		 * @return {app.Models.LineRow} 对象
    		 */
    		getModelByPosition: function(posi) {
    			var currentIndex = binary.newModelBinary(posi, this.models, 'top', 'height', 0, this.models.length - 1);
    			return this.models[currentIndex];
    		},
    		/**
    		 * 通过别名查询符合条件标线的索引
    		 * @method getIndexByAlias
    		 * @param  {alias} alias 别名
    		 * @return {int} 索引
    		 */
    		getIndexByAlias: function(alias) {
    			var model = this.findWhere({
    				'alias': alias
    			});
    			return _.indexOf(this.models, model);
    		},
    		getNextAliasByAlias: function(alias) {
    			var index,
    				model;
    			model = this.findWhere({
    				'alias': alias
    			});
    			index = _.indexOf(this.models, model);
    			return this.models[index + 1].get('alias');
    		},
    		/**
    		 * 获取相邻标线的对象
    		 * @method getNeighborModelByAlias
    		 * @param  {alias} alias 别名
    		 * @param {string} redirction 方向
    		 * @return {app.Models.LineCol} 对象
    		 */
    		getNeighborModelByAlias: function(alias, redirction) {
    			var modelList = this.models,
    				len = modelList.length,
    				currentIndex;
    			//toward to right
    			if (redirction === 'RIGHT') {
    				currentIndex = this.getIndexByAlias(alias);
    				if (currentIndex === len - 1) {
    					return null;
    				}
    				return modelList[currentIndex + 1];
    			}
    			// toward to left
    			if (redirction === 'LEFT') {
    				currentIndex = this.getIndexByAlias(alias);
    				if (currentIndex === 0) {
    					return null;
    				}
    				return modelList[currentIndex - 1];
    			}
    			return null;
    		}
    	});
    	return new HeadItemRows();
    });
    define('models/siderLineCol',function() {
    	
    	var Backbone = require('lib/backbone');
    	var BackboneNest = require('lib/backbone.nested');
    
    	
    	/**
    	 * siderLineCol model对象
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class SiderLineCol  
    	 * @module models
    	 * @extends Backbone.Model
    	 * @constructor
    	 */
    	var SiderLineColModel = Backbone.Model.extend({
    		defaults: {
    			/**
    			 * 相对位置`left`值
    			 * @property {number} left
    			 */
    			left: 0,
    			/**
    			 * 宽度
    			 * @property {number} width
    			 */
    			width: 69
    		}
    	});
    	return SiderLineColModel;
    });
    define('collections/siderLineCol',function() {
    	
    	var Backbone = require('lib/backbone'),
    		SiderLineColModel = require('models/siderLineCol'),
    		SiderLineCols;
    	/**
    	 * 选中区域列标线类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class SiderLineCol  
    	 * @module collections
    	 * @extends Backbone.Collection
    	 * @constructor
    	 */
    	SiderLineCols = Backbone.Collection.extend({
    		/**
    		 * 集合成员类型
    		 * @property model 
    		 * @type app.Models.SiderLineCol
    		 */
    		model: SiderLineColModel,
    		url: 'sidercol'
    	});
    	return new SiderLineCols();
    });
    
    define('models/siderLineRow',function() {
    	
    	var Backbone = require('lib/backbone'),
    		BackboneNest = require('lib/backbone.nested'),
    		SiderLineRowModel;
    	
    	/**
    	 * SiderLineRow model对象
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class SiderLineRow  
    	 * @module models
    	 * @extends Backbone.Model
    	 * @constructor
    	 */
    	SiderLineRowModel = Backbone.Model.extend({
    		defaults: {
    			/**
    			 * 相对位置`top`值
    			 * @property {number} top
    			 */
    			top: 0,
    			/**
    			 * 高度
    			 * @property {number} height
    			 */
    			height: 17
    		}
    	});
    	return SiderLineRowModel;
    });
    define('collections/siderLineRow',function() {
    	
    	var Backbone = require('lib/backbone'),
    		SiderLineRowModel = require('models/siderLineRow'),
    		SiderLineRows;
    
    	/**
    	 * 选中区域行标线类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class SiderLineRow  
    	 * @module collections
    	 * @extends Backbone.Collection
    	 * @constructor
    	 */
    	SiderLineRows = Backbone.Collection.extend({
    		/**
    		 * 集合成员类型
    		 * @property model 
    		 * @type app.Models.SiderLineRow
    		 */
    		model: SiderLineRowModel,
    		url: 'siderrow'
    	});
    	return new SiderLineRows();
    });
    define('models/sheet',function() {
        
        var Backbone = require('lib/backbone'),
            BackboneNest = require('lib/backbone.nested'),
            SheetModel;
        SheetModel = Backbone.Model.extend({
            defaults: {
                name: 'book',
                sort: 0
            }
        });
        return SheetModel;
    });
    define('collections/sheets',function() {
    	
    	var Backbone = require('lib/backbone'),
    		SheetModel = require('models/sheet');
    
    
    	/**
    	 * 选中区域集合类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class SelectRegion  
    	 * @module collections
    	 * @extends Backbone.Collection
    	 * @constructor
    	 */
    	var Sheets = Backbone.Collection.extend({
    		/**
    		 * 集合成员类型
    		 * @property model 
    		 * @type app.Models.SelectRegion
    		 */
    		model: SheetModel
    	});
    	return new Sheets();
    });
    define('collections/cells',function() {
    	
    	var Backbone = require('lib/backbone'),
    		cache = require('basic/tools/cache'),
    		CellModel = require('models/cell'),
    		headItemCols = require('collections/headItemCol'),
    		headItemRows = require('collections/headItemRow'),
    		selectRegions = require('collections/selectRegion');
    	/**
    	 *cell集合类，管理cell对象
    	 *@class Cells 
    	 *@extends Backbone.Collection
    	 *@constructor
    	 *@author ray wu
    	 *@module collections
    	 *@since 0.1.0
    	 */
    	var Cells = Backbone.Collection.extend({
    		/**
    		 * 集合成员类型
    		 * @property model 
    		 * @type Cell
    		 */
    		model: CellModel,
    		url: '/cell.htm',
    		createCellModel: function(startColIndex, startRowIndex, endColIndex, endRowIndex) {
    			var headItemColList,
    				headItemRowList,
    				rowLen,
    				colLen,
    				i = 0,
    				j = 0,
    				occupyCol = [],
    				occupyRow = [],
    				width = 0,
    				height = 0,
    				top,
    				left;
    			if (endColIndex === undefined) {
    				endColIndex = startColIndex;
    			}
    			if (endRowIndex === undefined) {
    				endRowIndex = startRowIndex;
    			}
    			headItemColList = headItemCols.models;
    			headItemRowList = headItemRows.models;
    
    			left = headItemColList[startColIndex].get('left');
    			top = headItemRowList[startRowIndex].get('top');
    
    			rowLen = endRowIndex - startRowIndex + 1;
    			colLen = endColIndex - startColIndex + 1;
    
    			//获取occupy信息
    			for (i = 0; i < colLen; i++) {
    				occupyCol.push(headItemColList[startColIndex + i].get('alias'));
    				width += headItemColList[startColIndex + i].get('width') + 1;
    			}
    			for (i = 0; i < rowLen; i++) {
    				occupyRow.push(headItemRowList[startRowIndex + i].get('alias'));
    				height += headItemRowList[startRowIndex + i].get('height') + 1;
    			}
    			for (i = 0; i < rowLen; i++) {
    				for (j = 0; j < colLen; j++) {
    					cache.cachePosition(headItemRowList[startRowIndex + i].get('alias'), headItemColList[startColIndex + j].get('alias'), this.length);
    				}
    			}
    			this.add({
    				occupy: {
    					x: occupyCol,
    					y: occupyRow
    				},
    				physicsBox: {
    					top: top,
    					left: left,
    					width: width - 1,
    					height: height - 1
    				}
    			});
    			return this.models[this.length - 1];
    		},
    		/**
    		 * 通过cache.CellsPosition.strandX变量，获取区域内，包含所有cell对象
    		 * @method getCellByX 
    		 * @param  startIndexX {int} 区域左上顶点X轴索引
    		 * @param  startIndexY {int} 区域左上顶点Y轴索引
    		 * @param  endIndexX {[int]} 区域右下顶点X轴索引
    		 * @param  endIndexY {[int]} 区域右下顶点Y轴索引
    		 * @return {array} Cell数组
    		 */
    		getCellByX: function(startIndexX, startIndexY, endIndexX, endIndexY) {
    			if (endIndexY === undefined) {
    				endIndexY = startIndexY;
    			}
    			if (endIndexX === undefined) {
    				endIndexX = startIndexX;
    			}
    			var cells = [],
    				i, j;
    			for (i = 0; i < endIndexX - startIndexX + 1; i++) {
    				for (j = 0; j < endIndexY - startIndexY + 1; j++) {
    					var indexX, indexY;
    					indexX = headItemCols.models[startIndexX + i].get('alias');
    					indexY = headItemRows.models[startIndexY + j].get('alias');
    
    					if (cache.CellsPosition.strandX[indexX] !== undefined && cache.CellsPosition.strandX[indexX][indexY] !== undefined) {
    						//cells去掉重复
    						if (cells.indexOf(this.at(cache.CellsPosition.strandX[indexX][indexY])) == -1) {
    							cells.push(this.at(cache.CellsPosition.strandX[indexX][indexY]));
    						}
    					}
    
    				}
    			}
    			return cells;
    		},
    		/**
    		 * 查询区域内包含所有cell对象
    		 * @method getCellByX 
    		 * @param  startIndexX {int} 区域左上顶点X轴索引
    		 * @param  startIndexY {int} 区域左上顶点Y轴索引
    		 * @param  endIndexX {[int]} 区域右下顶点X轴索引
    		 * @param  endIndexY {[int]} 区域右下顶点Y轴索引
    		 * @return {array} Cell数组
    		 */
    		getCellByRow: function(startIndexRow, startIndexCol, endIndexRow, endIndexCol) {
    			if (endIndexRow === undefined) {
    				endIndexRow = startIndexRow;
    			}
    			if (endIndexCol === undefined) {
    				endIndexCol = startIndexCol;
    			}
    			var cells = [],
    				i, j,
    				rowAlias,
    				colAlias;
    			for (i = 0; i < endIndexRow - startIndexRow + 1; i++) {
    				for (j = 0; j < endIndexCol - startIndexCol + 1; j++) {
    					rowAlias = headItemRows.models[startIndexRow + i].get('alias');
    					colAlias = headItemCols.models[startIndexCol + j].get('alias');
    
    					if (cache.CellsPosition.strandY[rowAlias] !== undefined && cache.CellsPosition.strandY[rowAlias][colAlias] !== undefined) {
    						//cells去掉重复
    						if (cells.indexOf(this.at(cache.CellsPosition.strandY[rowAlias][colAlias])) == -1) {
    							cells.push(this.at(cache.CellsPosition.strandY[rowAlias][colAlias]));
    						}
    					}
    
    				}
    			}
    			return cells;
    
    		},
    		/**
    		 * 获取区域内包含所有cell对象
    		 * @method getSelectRegionCells 
    		 * @param  startIndexCol {int} 区域左上顶点X轴索引
    		 * @param  startIndexRow {int} 区域左上顶点Y轴索引
    		 * @param  endIndexCol {[int]} 区域右下顶点X轴索引
    		 * @param  endIndexRow {[int]} 区域右下顶点Y轴索引
    		 * @return  {array} Cell数组
    		 */
    		getRegionCells: function(startIndexCol, startIndexRow, endIndexCol, endIndexRow) {
    			if (endIndexCol === undefined) {
    				endIndexCol = startIndexCol;
    			}
    			if (endIndexRow === undefined) {
    				endIndexRow = startIndexRow;
    			}
    			var cellList = [],
    				i = 0,
    				j = 0,
    				aliasCol,
    				aliasRow,
    				betweenRow = endIndexRow - startIndexRow + 1,
    				betweenCol = endIndexCol - startIndexCol + 1,
    				gridModelListRow = headItemRows.models,
    				gridModelListCol = headItemCols.models,
    				cellsPositionX = cache.CellsPosition.strandX;
    
    			for (; i < betweenRow; i++) {
    				for (j = 0; j < betweenCol; j++) {
    					aliasRow = gridModelListRow[startIndexRow + i].get('alias');
    					aliasCol = gridModelListCol[startIndexCol + j].get('alias');
    					if (cellsPositionX[aliasCol] !== undefined && cellsPositionX[aliasCol][aliasRow] !== undefined) {
    						cellList.push(this.models[cellsPositionX[aliasCol][aliasRow]]);
    					} else {
    						cellList.push(null);
    					}
    				}
    
    			}
    			return cellList;
    		},
    		/**
    		 * 获取选中区域内包含所有cell对象
    		 * @method getCellsByWholeSelectRegion 
    		 * @return  {array} Cell数组
    		 */
    		getCellsByWholeSelectRegion: function() {
    			var cellList = [],
    				i,
    				j,
    				modelSelectRegion = selectRegions.models[0],
    				betweenRow = modelSelectRegion.get('wholePosi').endY - modelSelectRegion.get('wholePosi').startY + 1,
    				betweenCol = modelSelectRegion.get('wholePosi').endX - modelSelectRegion.get('wholePosi').startX + 1,
    				headModelListRow = headItemRows.models,
    				headModelListCol = headItemCols.models,
    				cellsPositionX = cache.CellsPosition.strandX,
    				aliasRow,
    				aliasCol;
    			for (i = 0; i < betweenRow; i++) {
    				for (j = 0; j < betweenCol; j++) {
    					aliasRow = headModelListRow[modelSelectRegion.get('wholePosi').startY + i].get('alias');
    					aliasCol = headModelListCol[modelSelectRegion.get('wholePosi').startX + j].get('alias');
    					if (cellsPositionX[aliasCol] !== undefined && cellsPositionX[aliasCol][aliasRow] !== undefined) {
    						cellList.push(this.models[cellsPositionX[aliasCol][aliasRow]]);
    					} else {
    						cellList.push(null);
    					}
    				}
    			}
    			return cellList;
    		},
    		/**
    		 * 根据选择域的边线位置查找cell对象集合
    		 * @method  getCellsBySiderSelectRegion 
    		 * @return {object} cell模型列表
    		 */
    		getCellsBySiderSelectRegion: function() {
    			var verticalModelList,
    				transverModelList,
    				cellModelList = {};
    			verticalModelList = this.getCellsByVerticalSiderSelectRegion();
    			transverModelList = this.getCellsByTransverSiderSelectRegion();
    
    			cellModelList.vertical = verticalModelList;
    			cellModelList.transver = transverModelList;
    			return cellModelList;
    		},
    		/**
    		 * 根据列选中位置查找cell对象集合
    		 * @method  getCellsByVerticalSiderSelectRegion
    		 * @return {object} cell模型列表
    		 */
    		getCellsByVerticalSiderSelectRegion: function() {
    			var modelList = {
    					left: [],
    					right: []
    				},
    				aliasCol,
    				aliasRow,
    				headLineColModelList,
    				headLineRowModelList,
    				colLen,
    				rowLen,
    				i, j,
    				cellsPositionX;
    			cellsPositionX = cache.CellsPosition.strandX;
    			headLineColModelList = headItemCols.getModelListByWholeSelectRegion();
    			headLineRowModelList = headItemRows.getModelListByWholeSelectRegion();
    			colLen = headLineColModelList.length;
    			rowLen = headLineRowModelList.length;
    			for (i = 0; i < rowLen; i++) {
    				for (j = 0; j < colLen; j++) {
    					if (j === 0) {
    						aliasRow = headLineRowModelList[i].get('alias');
    						aliasCol = headLineColModelList[j].get('alias');
    						if (cellsPositionX[aliasCol] !== undefined && cellsPositionX[aliasCol][aliasRow] !== undefined) {
    							modelList.left.push(this.models[cellsPositionX[aliasCol][aliasRow]]);
    						} else {
    							modelList.left.push(null);
    						}
    					}
    					if (j === colLen - 1) {
    						aliasRow = headLineRowModelList[i].get('alias');
    						aliasCol = headLineColModelList[j].get('alias');
    						if (cellsPositionX[aliasCol] !== undefined && cellsPositionX[aliasCol][aliasRow] !== undefined) {
    							modelList.right.push(this.models[cellsPositionX[aliasCol][aliasRow]]);
    						} else {
    							modelList.right.push(null);
    						}
    					}
    				}
    			}
    			return modelList;
    		},
    		/**
    		 * 根据行选中位置查找cell对象集合
    		 * @method  getCellsByTransverSiderSelectRegion
    		 * @return {object} cell模型列表
    		 */
    		getCellsByTransverSiderSelectRegion: function() {
    			var modelList = {
    					top: [],
    					bottom: []
    				},
    				aliasCol,
    				aliasRow,
    				headLineColModelList,
    				headLineRowModelList,
    				colLen,
    				rowLen,
    				i, j,
    				cellsPositionX;
    
    			cellsPositionX = cache.CellsPosition.strandX;
    			headLineColModelList = headItemCols.getModelListByWholeSelectRegion();
    			headLineRowModelList = headItemRows.getModelListByWholeSelectRegion();
    			colLen = headLineColModelList.length;
    			rowLen = headLineRowModelList.length;
    			for (i = 0; i < colLen; i++) {
    				for (j = 0; j < rowLen; j++) {
    					if (j === 0) {
    						aliasRow = headLineRowModelList[j].get('alias');
    						aliasCol = headLineColModelList[i].get('alias');
    						if (cellsPositionX[aliasCol] !== undefined && cellsPositionX[aliasCol][aliasRow] !== undefined) {
    							modelList.top.push(this.models[cellsPositionX[aliasCol][aliasRow]]);
    						} else {
    							modelList.top.push(null);
    						}
    					}
    					if (j === rowLen - 1) {
    						aliasRow = headLineRowModelList[j].get('alias');
    						aliasCol = headLineColModelList[i].get('alias');
    						if (cellsPositionX[aliasCol] !== undefined && cellsPositionX[aliasCol][aliasRow] !== undefined) {
    							modelList.bottom.push(this.models[cellsPositionX[aliasCol][aliasRow]]);
    						} else {
    							modelList.bottom.push(null);
    						}
    					}
    				}
    			}
    			return modelList;
    		},
    		/**
    		 * 获取选中区域内，所有单元格坐标
    		 * @method  getHeadModelByWholeSelectRegion
    		 * @return {array} 单元格坐标数组
    		 */
    		getHeadModelByWholeSelectRegion: function() {
    			var partModelList = [],
    				partModel,
    				headLineColModelList,
    				headLineRowModelList,
    				colLen,
    				rowLen,
    				i, j;
    
    			headLineColModelList = headItemCols.getModelListByWholeSelectRegion();
    			headLineRowModelList = headItemRows.getModelListByWholeSelectRegion();
    			colLen = headLineColModelList.length;
    			rowLen = headLineRowModelList.length;
    			for (i = 0; i < rowLen; i++) {
    				for (j = 0; j < colLen; j++) {
    					partModel = {
    						wholePosi: {
    							startX: selectRegions.models[0].get('wholePosi').startX + j,
    							startY: selectRegions.models[0].get('wholePosi').startY + i
    						},
    						occupy: {
    							x: headLineColModelList[j].get('alias'),
    							y: headLineRowModelList[i].get('alias')
    						},
    						physicsBox: {
    							top: headLineRowModelList[i].get('top'),
    							left: headLineColModelList[j].get('left'),
    							width: headLineColModelList[j].get('width'),
    							height: headLineRowModelList[i].get('height'),
    						}
    					};
    					partModelList.push(partModel);
    				}
    			}
    			return partModelList;
    		},
    		/** 获取选中区域内边框单元格
    		 * @method getHeadModelBySiderSelectRegion
    		 * @return {array} cell模型结合
    		 */
    		getHeadModelBySiderSelectRegion: function() {
    			var verticalModelList,
    				transverModelList,
    				siderModelList = {};
    			verticalModelList = this.getHeadModelByVerticalSiderSelectRegion();
    			transverModelList = this.getHeadModelByTransverSiderSelectRegion();
    			siderModelList.vertical = verticalModelList;
    			siderModelList.transverse = transverModelList;
    			return siderModelList;
    		},
    		/**
    		 * 选中区域内，获取垂直方向，最左方与最右方单元格
    		 * @method getHeadModelByVerticalSiderSelectRegion
    		 * @return {array} cell模型结合
    		 */
    		getHeadModelByVerticalSiderSelectRegion: function() {
    			var partModelList = {
    					left: [],
    					right: []
    				},
    				partModel,
    				headLineColModelList,
    				headLineRowModelList,
    				colLen,
    				rowLen,
    				i, j;
    
    			headLineColModelList = headItemCols.getModelListByWholeSelectRegion();
    			headLineRowModelList = headItemRows.getModelListByWholeSelectRegion();
    			colLen = headLineColModelList.length;
    			rowLen = headLineRowModelList.length;
    			for (i = 0; i < rowLen; i++) {
    				for (j = 0; j < colLen; j++) {
    					if (j === 0) {
    						partModel = {
    							wholePosi: {
    								startX: selectRegions.models[0].get('wholePosi').startX + j,
    								startY: selectRegions.models[0].get('wholePosi').startY + i
    							},
    							occupy: {
    								x: headLineColModelList[j].get('alias'),
    								y: headLineRowModelList[i].get('alias')
    							},
    							physicsBox: {
    								top: headLineRowModelList[i].get('top'),
    								left: headLineColModelList[j].get('left'),
    								width: headLineColModelList[j].get('width'),
    								height: headLineRowModelList[i].get('height'),
    							}
    						};
    						partModelList.left.push(partModel);
    					}
    					if (j === colLen - 1) {
    						partModel = {
    							wholePosi: {
    								startX: selectRegions.models[0].get('wholePosi').startX + j,
    								startY: selectRegions.models[0].get('wholePosi').startY + i
    							},
    							occupy: {
    								x: headLineColModelList[j].get('alias'),
    								y: headLineRowModelList[i].get('alias')
    							},
    							physicsBox: {
    								top: headLineRowModelList[i].get('top'),
    								left: headLineColModelList[j].get('left'),
    								width: headLineColModelList[j].get('width'),
    								height: headLineRowModelList[i].get('height'),
    							}
    						};
    						partModelList.right.push(partModel);
    					}
    				}
    			}
    			return partModelList;
    		},
    		/**
    		 * 选中区域内，获取水平方向，最上方与最下方单元格
    		 * @method getHeadModelByTransverSiderSelectRegion
    		 * @return {array} cell模型结合
    		 */
    		getHeadModelByTransverSiderSelectRegion: function() {
    			var partModelList = {
    					top: [],
    					bottom: []
    				},
    				partModel,
    				headLineColModelList,
    				headLineRowModelList,
    				colLen,
    				rowLen,
    				i, j;
    
    			headLineColModelList = headItemCols.getModelListByWholeSelectRegion();
    			headLineRowModelList = headItemRows.getModelListByWholeSelectRegion();
    			colLen = headLineColModelList.length;
    			rowLen = headLineRowModelList.length;
    			for (i = 0; i < colLen; i++) {
    				for (j = 0; j < rowLen; j++) {
    					if (j === 0) {
    						partModel = {
    							wholePosi: {
    								startX: selectRegions.models[0].get('wholePosi').startX + i,
    								startY: selectRegions.models[0].get('wholePosi').startY + j
    							},
    							occupy: {
    								x: headLineColModelList[i].get('alias'),
    								y: headLineRowModelList[j].get('alias')
    							},
    							physicsBox: {
    								top: headLineRowModelList[j].get('top'),
    								left: headLineColModelList[i].get('left'),
    								width: headLineColModelList[i].get('width'),
    								height: headLineRowModelList[j].get('height'),
    							}
    						};
    						partModelList.top.push(partModel);
    					}
    					if (j === rowLen - 1) {
    						partModel = {
    							wholePosi: {
    								startX: selectRegions.models[0].get('wholePosi').startX + i,
    								startY: selectRegions.models[0].get('wholePosi').startY + j
    							},
    							occupy: {
    								x: headLineColModelList[i].get('alias'),
    								y: headLineRowModelList[j].get('alias')
    							},
    							physicsBox: {
    								top: headLineRowModelList[j].get('top'),
    								left: headLineColModelList[i].get('left'),
    								width: headLineColModelList[i].get('width'),
    								height: headLineRowModelList[j].get('height'),
    							}
    						};
    						partModelList.bottom.push(partModel);
    					}
    				}
    			}
    			return partModelList;
    		},
    		/**
    		 * 区域内，最左端单元格数组
    		 * @method getLeftHeadModelByIndex
    		 * @return {array} cell模型结合
    		 */
    		getLeftHeadModelByIndex: function(startColIndex, startRowIndex, endColIndex, endRowIndex) {
    			var result = [],
    				partModel,
    				headLineColModelList,
    				headLineRowModelList,
    				cellsPositionCol,
    				cellsPositionX,
    				tempCell,
    				colLen,
    				rowLen,
    				aliasCol,
    				aliasRow,
    				i, j;
    
    			if (endColIndex === undefined) endColIndex = startColIndex;
    			if (endRowIndex === undefined) endRowIndex = startRowIndex;
    			headLineRowModelList = headItemRows.models;
    			headLineColModelList = headItemCols.models;
    
    			colLen = endColIndex - startColIndex + 1;
    			rowLen = endRowIndex - startRowIndex + 1;
    
    			cellsPositionX = cache.CellsPosition.strandX;
    			aliasCol = headLineColModelList[startColIndex].get('alias');
    			for (i = 0; i < rowLen; i++) {
    				aliasRow = headLineRowModelList[startRowIndex + i].get('alias');
    				if (cellsPositionX[aliasCol] !== undefined &&
    					cellsPositionX[aliasCol][aliasRow] !== undefined) {
    					tempCell = this.models[cellsPositionX[aliasCol][aliasRow]];
    				} else {
    					tempCell = this.createCellModel(startColIndex, startRowIndex + i);
    				}
    				result.push(tempCell);
    			}
    			return result;
    		},
    		/**
    		 * 区域内，最右端单元格数组
    		 * @method getLeftHeadModelByIndex
    		 * @return {array} cell模型结合
    		 */
    		getRightHeadModelByIndex: function(startColIndex, startRowIndex, endColIndex, endRowIndex) {
    			var result = [],
    				partModel,
    				headLineColModelList,
    				headLineRowModelList,
    				cellsPositionCol,
    				cellsPositionX,
    				tempCell,
    				colLen,
    				rowLen,
    				aliasCol,
    				aliasRow,
    				i, j;
    			if (endColIndex === undefined) endColIndex = startColIndex;
    			if (endRowIndex === undefined) endRowIndex = startRowIndex;
    			headLineRowModelList = headItemRows.models;
    			headLineColModelList = headItemCols.models;
    
    			colLen = endColIndex - startColIndex + 1;
    			rowLen = endRowIndex - startRowIndex + 1;
    
    			cellsPositionX = cache.CellsPosition.strandX;
    			aliasCol = headLineColModelList[endColIndex].get('alias');
    			for (i = 0; i < rowLen; i++) {
    				aliasRow = headLineRowModelList[startRowIndex + i].get('alias');
    				if (cellsPositionX[aliasCol] !== undefined &&
    					cellsPositionX[aliasCol][aliasRow] !== undefined) {
    					tempCell = this.models[cellsPositionX[aliasCol][aliasRow]];
    				} else {
    					tempCell = this.createCellModel(endColIndex, startRowIndex + i);
    				}
    				result.push(tempCell);
    			}
    			return result;
    		},
    		/**
    		 * 区域内，最上端单元格数组
    		 * @method getTopHeadModelByIndex
    		 * @return {array} cell模型结合
    		 */
    		getTopHeadModelByIndex: function(startColIndex, startRowIndex, endColIndex, endRowIndex) {
    			var result = [],
    				partModel,
    				headLineColModelList,
    				headLineRowModelList,
    				cellsPositionCol,
    				cellsPositionX,
    				tempCell,
    				colLen,
    				rowLen,
    				aliasCol,
    				aliasRow,
    				i, j;
    			if (endColIndex === undefined) endColIndex = startColIndex;
    			if (endRowIndex === undefined) endRowIndex = startRowIndex;
    			headLineRowModelList = headItemRows.models;
    			headLineColModelList = headItemCols.models;
    
    			colLen = endColIndex - startColIndex + 1;
    			rowLen = endRowIndex - startRowIndex + 1;
    
    			cellsPositionX = cache.CellsPosition.strandX;
    			aliasRow = headLineRowModelList[startRowIndex].get('alias');
    			for (i = 0; i < colLen; i++) {
    				aliasCol = headLineColModelList[startColIndex + i].get('alias');
    				if (cellsPositionX[aliasCol] !== undefined &&
    					cellsPositionX[aliasCol][aliasRow] !== undefined) {
    					tempCell = this.models[cellsPositionX[aliasCol][aliasRow]];
    				} else {
    					tempCell = this.createCellModel(startColIndex + i, startRowIndex);
    				}
    				result.push(tempCell);
    			}
    			return result;
    		},
    		/**
    		 * 区域内，最下端单元格数组
    		 * @method getLeftHeadModelByIndex
    		 * @return {array} cell模型结合
    		 */
    		getBottomHeadModelByIndex: function(startColIndex, startRowIndex, endColIndex, endRowIndex) {
    			var result = [],
    				partModel,
    				headLineColModelList,
    				headLineRowModelList,
    				cellsPositionCol,
    				cellsPositionX,
    				tempCell,
    				colLen,
    				rowLen,
    				aliasCol,
    				aliasRow,
    				i, j;
    			if (endColIndex === undefined) endColIndex = startColIndex;
    			if (endRowIndex === undefined) endRowIndex = startRowIndex;
    			headLineRowModelList = headItemRows.models;
    			headLineColModelList = headItemCols.models;
    
    			colLen = endColIndex - startColIndex + 1;
    			rowLen = endRowIndex - startRowIndex + 1;
    
    			cellsPositionX = cache.CellsPosition.strandX;
    			aliasRow = headLineColModelList[endRowIndex].get('alias');
    			for (i = 0; i < colLen; i++) {
    				aliasCol = headLineRowModelList[startColIndex + i].get('alias');
    				if (cellsPositionX[aliasCol] !== undefined &&
    					cellsPositionX[aliasCol][aliasRow] !== undefined) {
    					tempCell = this.models[cellsPositionX[aliasCol][aliasRow]];
    				} else {
    					tempCell = this.createCellModel(startColIndex + i, endRowIndex);
    				}
    				result.push(tempCell);
    			}
    			return result;
    		},
    		// getAliasByWholeSelectRegion: function() {
    		// 	var aliasList = [],
    		// 		i,
    		// 		j,
    		// 		modelSelectRegion = selectRegions.models[0],
    		// 		betweenRow = modelSelectRegion.get('wholePosi').endY - modelSelectRegion.get('wholePosi').startY + 1,
    		// 		betweenCol = modelSelectRegion.get('wholePosi').endX - modelSelectRegion.get('wholePosi').startX + 1,
    		// 		headModelListRow = headItemRows.models,
    		// 		headModelListCol = headItemCols.models,
    		// 		aliasRow,
    		// 		aliasCol,
    		// 		modelAlias;
    		// 	for (i = 0; i < betweenRow; i++) {
    		// 		for (j = 0; j < betweenCol; j++) {
    		// 			modelAlias.aliasRow = headModelListRow[modelSelectRegion.get('wholePosi').startY + i].get('alias');
    		// 			modelAlias.aliasCol = headModelListCol[modelSelectRegion.get('wholePosi').startX + j].get('alias');
    		// 			aliasList.push(modelAlias);
    		// 		}
    		// 	}
    		// 	return aliasList;
    		// },
    
    		/**
    		 * 获取单元格相邻单元格
    		 * @method  getAdjacent
    		 * @param {object} currentModel cell对象
    		 * @param {string} direction 相邻方向
    		 * @return {array} cell模型列表
    		 */
    		getAdjacent: function(currentModel, direction) {
    			var gridLineRowModelList,
    				gridLineColModelList,
    				modelIndexRow,
    				modelIndexCol,
    				modelCelllList,
    				modelJSON = currentModel.toJSON();
    
    			gridLineColModelList = headItemCols.models;
    			gridLineRowModelList = headItemRows.models;
    
    			//currentModel, direction models or null object
    
    			modelIndexRow = app.basic.modelBinary(modelJSON.physicsBox.top, gridLineRowModelList, 'top', 'height', 0, gridLineRowModelList.length - 1);
    			modelIndexCol = app.basic.modelBinary(modelJSON.physicsBox.left, gridLineColModelList, 'left', 'width', 0, gridLineColModelList.length - 1);
    			switch (direction) {
    				case 'LEFT':
    					modelCelllList = cells.getSelectRegionCells(modelIndexCol - 1, modelIndexRow);
    					break;
    				case 'RIGHT':
    					modelCelllList = cells.getSelectRegionCells(modelIndexCol + 1, modelIndexRow);
    					break;
    				case 'UP':
    					modelCelllList = cells.getSelectRegionCells(modelIndexCol, modelIndexRow - 1);
    					break;
    				case 'DOWN':
    					modelCelllList = cells.getSelectRegionCells(modelIndexCol, modelIndexRow + 1);
    					break;
    			}
    			return modelCelllList[0];
    		},
    		/**
    		 * 获取选中区域初始化单元格对象
    		 * @method getInitCellBySelectRegion 
    		 * @return  {Cell} 单元格对象
    		 */
    		getInitCellBySelectRegion: function() {
    			var headLineColModelList,
    				headLineRowModelList,
    				modelSelectRegion,
    				modelJSON,
    				aliasRow,
    				aliasCol,
    				initCellIndex,
    				cellsPositionX,
    				collections = app.collections;
    
    			modelSelectRegion = collections.selectRegion.models[0];
    			modelJSON = modelSelectRegion.toJSON();
    
    			headLineColModelList = collections.headLineCol.models;
    			headLineRowModelList = collections.headLineRow.models;
    
    			aliasRow = headLineRowModelList[modelJSON.initPosi.startY].get('alias');
    			aliasCol = headLineColModelList[modelJSON.initPosi.startX].get('alias');
    
    			cellsPositionX = cache.CellsPosition.strandX;
    			if (cellsPositionX[aliasCol] === undefined || cellsPositionX[aliasCol][aliasRow] === undefined) {
    				initCellIndex = -1;
    			} else {
    				initCellIndex = cellsPositionX[aliasCol][aliasRow];
    			}
    			if (initCellIndex !== -1) {
    				return collections.cell.models[initCellIndex];
    			}
    			return null;
    		},
    		/**
    		 * 按照行索引，获取两行之间的所有包含所有cell对象
    		 * @method getCellsByRowIndex 
    		 * @param  startPosi {int} 行开始索引
    		 * @param  endPosi {int} 行结束索引
    		 * @return {array} Cell数组
    		 */
    		getCellsByRowIndex: function(startIndex, endIndex) {
    			var tempObj,
    				tempAttr,
    				cacheCellArray,
    				cachePosition,
    				cellModelList,
    				alias,
    				i, j;
    
    			cacheCellArray = [];
    			cellModelList = this.models;
    			cachePosition = cache.CellsPosition.strandY;
    			//遍历cache.CellsPosition中符合索引，生成cells[]集合
    			for (i = startIndex; i < endIndex + 1; i++) {
    				if (headItemRows.models[i] !== undefined) {
    					alias = headItemRows.models[i].get('alias');
    					if (cachePosition[alias] !== undefined) {
    						tempObj = cachePosition[alias];
    						for (tempAttr in tempObj) {
    							if (cacheCellArray.indexOf(cellModelList[tempObj[tempAttr]]) === -1) {
    								cacheCellArray.push(cellModelList[tempObj[tempAttr]]);
    							}
    						}
    					}
    				}
    			}
    			return cacheCellArray;
    		},
    		/**
    		 * 通过列索引查询，区域内包含单元格
    		 * @method  getCellsByColIndex
    		 * @return {array} cell模型列表
    		 */
    		getCellsByColIndex: function(startIndex, endIndex) {
    			var tempObj,
    				tempAttr,
    				cacheCellArray,
    				cachePosition,
    				cellModelList,
    				alias,
    				i, j;
    
    			cacheCellArray = [];
    			cellModelList = this.models;
    			cachePosition = cache.CellsPosition.strandX;
    			//遍历cache.CellsPosition中符合索引，生成cells[]集合
    			for (i = startIndex; i < endIndex + 1; i++) {
    				if (headItemCols.models[i] !== undefined) {
    					alias = headItemCols.models[i].get('alias');
    					if (cachePosition[alias] !== undefined) {
    						tempObj = cachePosition[alias];
    						for (tempAttr in tempObj) {
    							if (cacheCellArray.indexOf(cellModelList[tempObj[tempAttr]]) === -1) {
    								cacheCellArray.push(cellModelList[tempObj[tempAttr]]);
    							}
    						}
    					}
    				}
    			}
    			return cacheCellArray;
    		},
    		/**
    		 * 按照行列索引，获取两列之间的所有包含所有cell对象
    		 * @method getCellsByColIndex 
    		 * @param  startPosi {int} 列开始索引
    		 * @param  endPosi {int} 列结束索引
    		 * @return {array} Cell数组
    		 */
    		getCellsByColPosition: function(startPosi, endPosi) {
    			var tempColObj,
    				tempAttr,
    				cacheCellArray,
    				cachePosition,
    				cellModelList,
    				aliasCol,
    				i = 0,
    				j;
    
    			cacheCellArray = [];
    			cellModelList = this.models;
    			cachePosition = cache.CellsPosition.strandX;
    
    			//遍历cache.CellsPosition中符合索引，生成cells[]集合
    			for (; i < endPosi - startPosi + 1; i++) {
    				if (headItemCols.models[startPosi + i] !== undefined) {
    					aliasCol = headItemCols.models[startPosi + i].get('alias');
    					if (cachePosition[aliasCol] !== undefined) {
    						tempColObj = cachePosition[aliasCol];
    						for (tempAttr in tempColObj) {
    							if (cacheCellArray.indexOf(cellModelList[tempColObj[tempAttr]]) === -1) {
    								cacheCellArray.push(cellModelList[tempColObj[tempAttr]]);
    							}
    						}
    					}
    				}
    			}
    			return cacheCellArray;
    		},
    		/**
    		 * 根据alias获取单元格对象
    		 * @method getCellByAlias 
    		 * @param  aliasCol {string} 行别名
    		 * @param  aliasRow {string} 行列别名
    		 * @return {Cell} 单元格对象
    		 */
    		getCellByAlias: function(aliasCol, aliasRow) {
    			var tempCellIndex;
    			if (cache.CellsPosition.strandY[aliasRow] === undefined || cache.CellsPosition.strandY[aliasRow][aliasCol] === undefined) {
    				return null;
    			}
    			tempCellIndex = cache.CellsPosition.strandY[aliasRow][aliasCol];
    			return this.models[tempCellIndex];
    		},
    		/**
    		 * 按照行列索引，获取两列之间开始区域不超过开始行的cell对象
    		 * @method getCellsInStartRowRegion 
    		 * @param  startRowIndex {int} 行开始索引
    		 * @param  endRowIndex {int} 行结束索引
    		 * @return {array} Cell数组
    		 */
    		getCellsInStartRowRegion: function(startRowIndex, endRowIndex) {
    			var tempRowObj,
    				tempAttr,
    				cacheCellArray,
    				cachePosition,
    				cellModelList,
    				aliasRow,
    				tempCell,
    				cellStartRowIndex,
    				i = 0,
    				j;
    
    			cacheCellArray = [];
    			cellModelList = this.models;
    			cachePosition = cache.CellsPosition.strandY;
    
    			//遍历cache.CellsPosition中符合索引，生成cells[]集合
    			for (i = startRowIndex; i < endRowIndex + 1; i++) {
    
    				if (headItemRows.models[i] !== undefined) {
    					aliasRow = headItemRows.models[i].get('alias');
    					if (cachePosition[aliasRow] !== undefined) {
    						tempRowObj = cachePosition[aliasRow];
    						for (tempAttr in tempRowObj) {
    							//判断cell是否超出区域
    							tempCell = cellModelList[tempRowObj[tempAttr]];
    							cellStartRowIndex = headItemRows.getIndexByAlias(tempCell.get('occupy').y[0]);
    							if (cellStartRowIndex >= startRowIndex && cacheCellArray.indexOf(tempCell) == -1) {
    								cacheCellArray.push(tempCell);
    							}
    
    						}
    					}
    				}
    			}
    			return cacheCellArray;
    		},
    		/**
    		 * 按照行列索引，获取两列之间开始区域不超过开始列的cell对象
    		 * @method getCellsInStartColRegion 
    		 * @param  startColIndex {int} 列开始索引
    		 * @param  endColIndex {int} 列结束索引
    		 * @return {array} Cell数组
    		 */
    		getCellsInStartColRegion: function(startColIndex, endColIndex) {
    			var tempColObj,
    				tempAttr,
    				cacheCellArray,
    				cachePosition,
    				cellModelList,
    				aliasCol,
    				tempCell,
    				cellStartColIndex,
    				i = 0,
    				j;
    
    			cacheCellArray = [];
    			cellModelList = this.models;
    			cachePosition = cache.CellsPosition.strandX;
    
    			//遍历cache.CellsPosition中符合索引，生成cells[]集合
    			for (; i < endColIndex - startColIndex + 1; i++) {
    
    				if (headItemCols.models[startColIndex + i] !== undefined) {
    
    					aliasCol = headItemCols.models[startColIndex + i].get('alias');
    					if (cachePosition[aliasCol] !== undefined) {
    						tempColObj = cachePosition[aliasCol];
    						for (tempAttr in tempColObj) {
    							//判断cell是否超出区域
    							tempCell = cellModelList[tempColObj[tempAttr]];
    							cellStartColIndex = headItemCols.getIndexByAlias(tempCell.get('occupy').x[0]);
    							if (cellStartColIndex >= startColIndex && cacheCellArray.indexOf(tempCell) == -1) {
    								cacheCellArray.push(tempCell);
    							}
    
    						}
    					}
    				}
    			}
    			return cacheCellArray;
    		},
    		/**
    		 * 获取区域内的cell集合对象,用于页面初始化
    		 * @method getCellsByRegion
    		 * @param  {int} startRowIndex 行开始索引
    		 * @param  {int} endRowIndex   列开始索引
    		 * @param  {int} startColIndex 行结束索引
    		 * @param  {int} endColIndex   列结束索引
    		 * @return {object} cell集合
    		 */
    		getCellsByRegion: function(startRowIndex, endRowIndex, startColIndex, endColIndex) {
    			var gridLineRowList,
    				gridLineColList,
    				cellModelList,
    				cacheCellModelList = [],
    				rowAliasArray,
    				colAliasArray,
    				cellRowStartIndex,
    				cellRowEndIndex,
    				cellColStartIndex,
    				cellColEndIndex,
    				flag,
    				i, j, k;
    
    			gridLineRowList = app.collections.gridLineRow;
    			gridLineColList = app.collections.gridLineRow;
    			cellModelList = cellss;
    
    			if (startRowIndex === undefined && startColIndex === undefined && endRowIndex === undefined && endColIndex === undefined) {
    				return cellModelList;
    			}
    
    			if (startRowIndex === undefined) startRowIndex = 0;
    			if (startColIndex === undefined) startColIndex = 0;
    			if (endRowIndex === undefined) endRowIndex = gridLineRowList.length - 1;
    			if (endColIndex === undefined) endColIndex = gridLineColList.length - 1;
    
    			for (i = 0; i < cellModelList.length; i++) {
    				rowAliasArray = cellModelList[i].get('occupy').y;
    				colAliasArray = cellModelList[i].get('occupy').x;
    				for (j = 0; j < rowAliasArray.length; j++) {
    					cellRowStartIndex = gridLineRowList.getIndexByAlias(rowAliasArray[j]);
    					if (cellRowStartIndex !== -1) {
    						break;
    					}
    				}
    				for (j = rowAliasArray.length - 1; j > -1; j--) {
    					cellRowEndIndex = gridLineRowList.getIndexByAlias(rowAliasArray[j]);
    					if (cellRowEndIndex !== -1) {
    						break;
    					}
    				}
    				for (k = 0; k < colAliasArray.length; k++) {
    					cellColStartIndex = gridLineColList.getIndexByAlias(colAliasArray[k]);
    					if (cellColStartIndex !== -1) {
    						break;
    					}
    				}
    				for (k = colAliasArray.length - 1; k > -1; k--) {
    					cellColEndIndex = gridLineColList.getIndexByAlias(colAliasArray[j]);
    					if (cellColEndIndex !== -1) {
    						break;
    					}
    				}
    				if (!(cellRowStartIndex > endRowIndex || cellRowEndIndex < startRowIndex) && !(cellColStartIndex > endColIndex || cellColEndIndex < startColIndex)) {
    					cacheCellModelList = cellModelList[i];
    				}
    			}
    			return cacheCellModelList;
    		}
    	});
    	return new Cells();
    });
    define('basic/tools/original',function() {
    	
    	var $ = require('lib/jquery'),
    		config = require('spreadsheet/config'),
    		binary = require('basic/util/binary'),
    		cache = require('basic/tools/cache'),
    		send = require('basic/tools/send'),
    		loadRecorder = require('basic/tools/loadrecorder'),
    		buildColAlias = require('basic/tools/buildcolalias'),
    		LineRow = require('models/lineRow'),
    		LineCol = require('models/lineCol'),
    		Cell = require('models/cell'),
    		headItemCols = require('collections/headItemCol'),
    		headItemRows = require('collections/headItemRow'),
    		siderLineCols = require('collections/siderLineCol'),
    		siderLineRows = require('collections/siderLineRow'),
    		selectRegions = require('collections/selectRegion'),
    		sheets = require('collections/sheets'),
    		cells = require('collections/cells');
    
    	/**
    	 * 后台数据还原类
    	 * 系统配置变量
    	 * @author caijl
    	 * @module basic
    	 * @since 0.1.0
    	 */
    	return {
    		/**
    		 * 创建新Excel表单
    		 * @method bulidNewExcel
    		 */
    		bulidNewExcel: function() {
    			var i,
    				j,
    				lenCol,
    				lenRow,
    				currentObject;
    			lenCol = config.User.initColNum;
    			lenRow = config.User.initRowNum;
    
    			for (i = 0; i < lenCol; i++) {
    				currentObject = {
    					sort: i,
    					alias: (i + 1).toString(),
    					left: i * config.User.cellWidth,
    					width: config.User.cellWidth - 1,
    					displayName: buildColAlias(i)
    				};
    				headItemCols.add(currentObject);
    			}
    			for (j = 0; j < lenRow; j++) {
    				currentObject = {
    					sort: j,
    					alias: (j + 1).toString(),
    					top: j * config.User.cellHeight,
    					height: config.User.cellHeight - 1,
    					displayName: binary.buildRowAlias(j)
    				};
    				headItemRows.add(currentObject);
    			}
    			this.restoreSelectRegion();
    			loadRecorder.insertPosi(0, headItemRows.models[lenRow - 1].height + headItemRows.models[lenRow - 1].top, cache.rowRegionPosi);
    			loadRecorder.insertPosi(0, headItemRows.models[lenRow - 1].height + headItemRows.models[lenRow - 1].top, cache.cellRegionPosi.vertical);
    		},
    		/**
    		 * 解析后台返回行索引数据，如果行数未满足加载区域，则生成新行，进行补充
    		 * @method analysisRowData
    		 * @param  {Array} rows 行数据数组
    		 */
    		analysisRowData: function(rows, startRowSort) {
    			var tempRow,
    				tempHeadRow,
    				index, //插入Rows中的索引值
    				i,
    				j,
    				len,
    				rowLen;
    			
    			for (i = 0; i < rows.length; i++) {
    				index = binary.indexModelBinary(rows[i].top, headItemRows.models, 'top', 'height');
    				if (headItemRows.getIndexByAlias(rows[i].aliasY) != -1) {
    					index++;
    					continue;
    				}
    				tempHeadRow = new LineRow();
    				tempHeadRow.set('sort', startRowSort + i);
    				tempHeadRow.set('top', rows[i].top);
    				tempHeadRow.set('height', rows[i].height);
    				tempHeadRow.set('alias', rows[i].aliasY);
    				tempHeadRow.set('displayName', binary.buildRowAlias(startRowSort + i));
    				headItemRows.push(tempHeadRow, {
    					at: index
    				});
    			}
    			//ps:数据还原
    		},
    		/**
    		 * 解析后台返回列索引数据，如果列数未满足加载区域，则生成新列，进行补充
    		 * @method analysisColData
    		 * @param  {Array} cols 列数据数组
    		 */
    		analysisColData: function(cols, startColSort) {
    			var tempCol, tempHeadCol, i, j, len, collen;
    			for (i = 0; i < cols.length; i++) {
    				//去重
    				if (headItemCols.getIndexByAlias(cols[i].aliasY) != -1) {
    					continue;
    				}
    				tempHeadCol = new LineCol();
    				tempHeadCol.set('sort', startColSort + i);
    				tempHeadCol.set('left', cols[i].left);
    				tempHeadCol.set('width', cols[i].width);
    				tempHeadCol.set('alias', cols[i].aliasX);
    				tempHeadCol.set('displayName', buildColAlias(startColSort + i));
    				headItemCols.add(tempHeadCol);
    			}
    
    
    			if (headItemCols.length < config.User.initColNum) {
    				len = config.User.initColNum - headItemCols.length;
    				collen = headItemCols.length;
    				for (j = 0; j < len; j++) {
    					tempHeadCol = new LineCol();
    					tempHeadCol.set('left', headItemCols.models[collen + j - 1].get('left') + headItemCols.models[collen + j - 1].get('width') + 1);
    					tempHeadCol.set('width', 71);
    					tempHeadCol.set('alias', (headItemCols.length + 1).toString());
    					tempHeadCol.set('displayName', buildColAlias(collen + j));
    					headItemCols.add(tempHeadCol);
    				}
    			}
    		},
    
    		/**
    		 * @method 解析cell模型数据
    		 * @param  {Array} cellsData cell模型数组数据
    		 */
    		analysisCellData: function(cellsData) {
    			var j, k, //循环变量
    				tempCell,
    				existCell, //已存在单元格
    				gridLineColList,
    				gridLineRowList,
    				cellAttributes, //cell模型属性 
    				physicsBox = {},
    				gridAliasColList, //cell列索引list
    				gridAliasRowList, //cell行索引list
    				cellStartRowIndex, //cell起始row索引
    				cellStartColIndex, //cell起始col索引
    				cellEndRowIndex, //cell结束row索引
    				cellEndColIndex, //cell结束row索引
    				cellsPositionX,
    				width,
    				height,
    				left,
    				top,
    				rowEndIndex,
    				i,
    				model; //gridrow加载数量
    
    			gridLineColList = headItemCols.models;
    			gridLineRowList = headItemRows.models;
    
    
    			//解析cell
    			for (i = 0; i < cellsData.length; i++) {
    				cellAttributes = cellsData[i];
    				if (cellAttributes === null) {
    					continue;
    				}
    
    				gridAliasColList = cellAttributes.occupy.x;
    				gridAliasRowList = cellAttributes.occupy.y;
    				width = 0;
    				height = 0;
    				//获取已加载行模型内，cell起始索引，结束索引
    				for (j = 0; j < gridAliasRowList.length; j++) {
    					if (headItemRows.getIndexByAlias(gridAliasRowList[j]) != -1) {
    						cellStartRowIndex = headItemRows.getIndexByAlias(gridAliasRowList[j]);
    						break;
    					}
    				}
    				for (j = gridAliasRowList.length - 1; j > -1; j--) {
    					if (headItemRows.getIndexByAlias(gridAliasRowList[j]) != -1) {
    						cellEndRowIndex = headItemRows.getIndexByAlias(gridAliasRowList[j]);
    						break;
    					}
    				}
    				if (cellStartRowIndex == -1 || cellEndRowIndex == -1) {
    					continue;
    				}
    				//列模型未涉及动态加载功能，直接使用cell模型列索引
    				cellStartColIndex = headItemCols.getIndexByAlias(gridAliasColList[0]);
    				cellEndColIndex = headItemCols.getIndexByAlias(gridAliasColList[gridAliasColList.length - 1]);
    
    				//判断cell模型是否已加载
    				cellsPositionX = cache.CellsPosition.strandX;
    				if (cellsPositionX[gridAliasColList[0]] !== undefined &&
    					cellsPositionX[gridAliasColList[0]][gridAliasRowList[0]] !== undefined) {
    					existCell = cells.models[cellsPositionX[gridAliasColList[0]][gridAliasRowList[0]]];
    				}
    
    				//计算cell模型宽高
    				for (j = cellStartColIndex; j < cellEndColIndex + 1; j++) {
    					model = gridLineColList[j];
    					width += model.get('width') + 1;
    				}
    				for (j = cellStartRowIndex; j < cellEndRowIndex + 1; j++) {
    					model = gridLineRowList[j];
    					height += model.get('height') + 1;
    				}
    				physicsBox = {
    					top: gridLineRowList[cellStartRowIndex].get('top') + 1,
    					left: gridLineColList[cellStartColIndex].get('left') + 1,
    					width: width - 2,
    					height: height - 2
    				};
    				if (existCell !== null && existCell !== undefined) {
    					//重新渲染cell模型宽高
    					existCell.set('physicsBox', physicsBox);
    				} else {
    					tempCell = new Cell(cellAttributes);
    					tempCell.set('physicsBox', physicsBox);
    					cells.add(tempCell);
    					//维护postion
    					for (j = 0; j < gridAliasColList.length; j++) {
    						for (k = 0; k < gridAliasRowList.length; k++) {
    							cache.cachePosition(gridAliasRowList[k], gridAliasColList[j], cells.length - 1);
    						}
    					}
    				}
    				existCell = null;
    			}
    		},
    		analysisSheetData: function(sheetsData) {
    			var i;
    			for (i = 0; i < sheetsData.length; i++) {
    				sheets.add({
    					name: sheetsData[i],
    					sort: i
    				});
    			}
    		},
    		/**
    		 * 还原选中区域
    		 * @method restoreSelectRegion
    		 * @param  {Array} cellsData cell模型数组数据
    		 */
    		restoreSelectRegion: function() {
    			var headItemRowModel,
    				headItemColModel,
    				aliasGridRow,
    				aliasGridCol,
    				cellsPositionX,
    				modelCell,
    				selectRegionModel;
    
    			headItemRowModel = headItemRows.getModelByAlias(cache.UserView.rowAlias);
    			headItemColModel = headItemCols.getModelByAlias(cache.UserView.colAlias);
    			cellsPositionX = cache.CellsPosition.strandX;
    			if (cellsPositionX[aliasGridCol] !== undefined &&
    				cellsPositionX[aliasGridCol][aliasGridRow] !== undefined) {
    				modelCell = cells.models[cellsPositionX[aliasGridCol][aliasGridRow]];
    			}
    			if (modelCell !== undefined) {
    				selectRegionModel = {
    					physicsPosi: {
    						top: modelCell.get("physicsBox").top,
    						left: modelCell.get("physicsBox").left
    					},
    					physicsBox: {
    						width: modelCell.get('physicsBox').width,
    						height: modelCell.get('physicsBox').height
    					}
    				};
    				selectRegions.add(selectRegionModel);
    				siderLineCols.add({
    					left: modelCell.get("physicsBox").left,
    					width: modelCell.get('physicsBox').width
    				});
    				siderLineRows.add({
    					top: modelCell.get("physicsBox").top,
    					height: modelCell.get("physicsBox").height
    				});
    			} else {
    				selectRegionModel = {
    					physicsPosi: {
    						top: headItemRowModel.get("top"),
    						left: headItemColModel.get("left")
    					},
    					physicsBox: {
    						width: headItemColModel.get('width'),
    						height: headItemRowModel.get('height')
    					}
    				};
    				selectRegions.add(selectRegionModel);
    				siderLineCols.add({
    					left: headItemColModel.get("left"),
    					width: headItemColModel.get('width')
    				});
    				siderLineRows.add({
    					top: headItemRowModel.get('top'),
    					height: headItemRowModel.get('height')
    				});
    			}
    
    		},
    
    		/**
    		 * 从后台发送请求，得到excel数据，进行重新加载
    		 * @method  
    		 */
    		restoreExcel: function() {
    			var excelId = window.SPREADSHEET_AUTHENTIC_KEY,
    				build = window.SPREADSHEET_BUILD_STATE,
    				localRowPosi = 0, //后台存储excel数据总高度
    				startRowAliasY,
    				startRowSort,
    				startColSort,
    				sheetNames = [],
    				mainContainerHeight = $("#tableContainer").height - 19,
    				self = this,
    				i;
    
    			if (build === "true" || build === undefined) {
    				this.bulidNewExcel();
    				cache.localRowPosi = 0;
    				return;
    			}
    			
    
    			$.ajax({
    				url: config.rootPath + 'excel.htm?m=position&excelId=' + excelId + '&sheetId=1&containerHeight=' + $('#spreadSheet').height(),
    				async: false,
    				dataType: 'json',
    				success: function(data) {
    					if (data === '') {
    						return;
    					}
    					cache.UserView.colAlias = data.displayRowStartAlias;
    					cache.UserView.rowAlias = data.displayColStartAlias;
    
    					if (data.returndata.spreadSheet[0].sheet.frozen.state === "1") {
    						cache.TempProp = {
    							isFrozen: true,
    							colAlias: data.returndata.spreadSheet[0].sheet.frozen.colIndex,
    							rowAlias: data.returndata.spreadSheet[0].sheet.frozen.rowIndex,
    							rowFrozen: true,
    							colFrozen: true
    						};
    					}
    					for (i = 0; i < data.returndata.spreadSheet.length; i++) {
    						sheetNames.push(data.returndata.spreadSheet[i].name);
    					}
    					cache.localRowPosi = data.maxPixel;
    					startRowSort = data.dataRowStartIndex;
    					startColSort = data.dataColStartIndex;
    					data = data.returndata;
    					var cellModels = data.spreadSheet[0].sheet.cells;
    					var rows = data.spreadSheet[0].sheet.glY;
    					var cols = data.spreadSheet[0].sheet.glX;
    					self.analysisSheetData(sheetNames);
    					self.analysisRowData(rows, startRowSort);
    					self.analysisColData(cols, startColSort);
    					self.analysisCellData(cellModels);
    					self.restoreSelectRegion();
    
    				}
    
    			});
    			loadRecorder.insertPosi(headItemRows.models[0].get('top'), headItemRows.models[headItemRows.length - 1].get('top') + headItemRows.models[headItemRows.length - 1].get('height'), cache.rowRegionPosi);
    		}
    	};
    });
    define('basic/util/listener',function() {
    	
    	var cache = require('basic/tools/cache'),
    		listenerList = cache.listenerList,
    		listener;
    
    	listener = {
    		addEventListener: function(event, callback ) {
    			var key;
    			if (event.indexOf('on') !== 0) event = 'on' + event;
    
    			listenerList = listenerList || {};
    			listenerList[event] = listenerList[event] || {};
    
    			if (callback.listener === undefined) {
    				callback.listener = [];
    			}
    			if (typeof callback === 'function') {
    				key = Object.getOwnPropertyNames(listenerList[event]).length;
    				callback.listener.push(key);
    				listenerList[event][key] = callback;
    			}
    		},
    		removeEventListener: function(event, callback) {
    			if (event.indexOf('on') !== 0) event = 'on' + event;
    			if (callback === undefined) {
    				delete listenerList[event];
    				return;
    			}
    			if (callback.listener !== undefined && listenerList[event] !== undefined) {
    				for (var key in callback.listener) {
    					if (listenerList[event][key] !== undefined) delete listenerList[event][key];
    				}
    			}
    
    		},
    		excute: function(event, e) {
    			if (event.indexOf('on') !== 0) event = 'on' + event;
    			if (listenerList[event] !== undefined) {
    				for (var i in listenerList[event]) {
    					listenerList[event][i](e);
    				}
    			}
    		}
    	};
    	return listener;
    });
    define('basic/util/extend',function() {
    	
    	var extend = function(options) {
    		var target = this,
    			name;
    		if (options !== undefined && typeof(options) === "object") {
    			for (name in options) {
    				target[name] = options;
    			}
    		}
    	};
    	return extend;
    });
    define('entrance/regionoperation',function() {
    	
    	var Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		cache = require('basic/tools/cache'),
    		binary = require('basic/util/binary'),
    		Cell = require('models/cell'),
    		headItemRow = require('collections/headItemRow'),
    		headItemCol = require('collections/headItemCol'),
    		cells = require('collections/cells'),
    		headItemCols = require('collections/headItemCol'),
    		headItemRows = require('collections/headItemRow'),
    		selectRegions = require('collections/selectRegion');
    
    
    	var common = {
    		getRegionIndexByRegionLabel: function(regionLabel) {
    			var region = {},
    				startColIndex,
    				startRowIndex,
    				endColIndex,
    				endRowIndex;
    			if (regionLabel instanceof Array) {
    				region.startColIndex = headItemCol.getIndexByDisplayname(getDisplayName(regionLabel[0],'col'));
    				region.startRowIndex = headItemRow.getIndexByDisplayname(getDisplayName(regionLabel[0],'row'));
    
    				region.endColIndex = headItemCol.getIndexByDisplayname(getDisplayName(regionLabel[1],'col'));
    				region.endRowIndex = headItemRow.getIndexByDisplayname(getDisplayName(regionLabel[1],'row'));
    			} else {
    				region.startColIndex = region.endColIndex = headItemCol.getIndexByDisplayname(getDisplayName(regionLabel,'col'));
    				region.startRowIndex = region.endRowIndex = headItemRow.getIndexByDisplayname(getDisplayName(regionLabel,'row'));
    			}
    			return region;
    
    			function getDisplayName(regionLabel, lineType) {
    				var result = '',
    					len = 0;
    				if(/[A-Z]/i.test(regionLabel)){
    					len = regionLabel.match(/[A-Z]/ig).length;
    				}
    				if (lineType === 'col') {
    					result = regionLabel.substring(0, len);
    				} else if (lineType === 'row') {
    					result = regionLabel.substring(len);
    				}
    				return result;
    			}
    		},
    		getFullSelectRegion: function(startColIndex, startRowIndex, endColIndex, endRowIndex) {
    			var headItemRowList = headItemRows.models,
    				headItemColList = headItemCols.models,
    				tempCellList,
    				cellstartColIndex,
    				cellstartRowIndex,
    				cellendColIndex,
    				cellendRowIndex,
    				cache, region,
    				flag = true,
    				i = 0;
    
    			if (startColIndex > endColIndex) {
    				cache = startColIndex;
    				startColIndex = endColIndex;
    				endColIndex = cache;
    			}
    			if (startRowIndex > endRowIndex) {
    				cache = startRowIndex;
    				startRowIndex = endRowIndex;
    				endRowIndex = cache;
    			}
    			while (flag) {
    				flag = false;
    				tempCellList = cells.getCellByX(startColIndex, startRowIndex, endColIndex, endRowIndex);
    				for (; i < tempCellList.length; i++) {
    					cellstartRowIndex = binary.modelBinary(tempCellList[i].get('physicsBox').top, headItemRowList, 'top', 'height', 0, headItemRowList.length - 1);
    					cellstartColIndex = binary.modelBinary(tempCellList[i].get('physicsBox').left, headItemColList, 'left', 'width', 0, headItemColList.length - 1);
    					cellendRowIndex = binary.modelBinary(tempCellList[i].get('physicsBox').top + tempCellList[i].get('physicsBox').height, headItemRowList, 'top', 'height', 0, headItemRowList.length - 1);
    					cellendColIndex = binary.modelBinary(tempCellList[i].get('physicsBox').left + tempCellList[i].get('physicsBox').width, headItemColList, 'left', 'width', 0, headItemColList.length - 1);
    					if (cellstartColIndex < startColIndex) {
    						startColIndex = cellstartColIndex;
    						flag = true;
    						break;
    					}
    					if (cellstartRowIndex < startRowIndex) {
    						startRowIndex = cellstartRowIndex;
    						flag = true;
    						break;
    					}
    					if (cellendRowIndex > endRowIndex) {
    						endRowIndex = cellendRowIndex;
    						flag = true;
    						break;
    					}
    					if (cellendColIndex > endColIndex) {
    						endColIndex = cellendColIndex;
    						flag = true;
    						break;
    					}
    				}
    			}
    			region = {
    				startRowIndex: startRowIndex,
    				startColIndex: startColIndex,
    				endRowIndex: endRowIndex,
    				endColIndex: endColIndex
    			};
    			return region;
    		},
    		regionOperation: function(sheetId, regionLabel, callback) {
    			var region = {},
    				resultRegion,
    				regionCellsList,
    				headLineColModelList,
    				headLineRowModelList,
    				colLen,
    				rowLen,
    				startRowIndex,
    				startColIndex,
    				endRowIndex,
    				endColIndex,
    				cellList,
    				currentCell,
    				i, j, h = 0;
    			if (regionLabel !== null && regionLabel !== undefined) {
    				region = this.getRegionIndexByRegionLabel(regionLabel);
    				region = this.getFullSelectRegion(region.startColIndex, region.startRowIndex, region.endColIndex, region.endRowIndex);
    			} else {
    				region.startColIndex = selectRegions.models[0].get('wholePosi').startX;
    				region.startRowIndex = selectRegions.models[0].get('wholePosi').startY;
    				region.endColIndex = selectRegions.models[0].get('wholePosi').endX;
    				region.endRowIndex = selectRegions.models[0].get('wholePosi').endY;
    			}
    
    			startRowIndex = region.startRowIndex;
    			startColIndex = region.startColIndex;
    			endColIndex = region.endColIndex;
    			endRowIndex = region.endRowIndex;
    			cellList = cells.getRegionCells(startColIndex, startRowIndex, endColIndex, endRowIndex);
    			for (i = startRowIndex; i < endRowIndex + 1; i++) {
    				for (j = startColIndex; j < endColIndex + 1; j++) {
    					currentCell = cellList[h];
    					if (currentCell === null) {
    						currentCell = this.createCell(i, j);
    					}
    					callback(currentCell);
    					h++;
    				}
    			}
    			resultRegion = {
    				startColIndex: startColIndex,
    				startRowIndex: startRowIndex,
    				endColIndex: endColIndex,
    				endRowIndex: endRowIndex
    			};
    			return region;
    		},
    		cellListOperation: function(sheetId, cellList, callback) {
    			var len, i = 0;
    			len = cellList.length;
    			for (; i < len; i++) {
    				callback(cellList[i]);
    			}
    		},
    		createCell: function(indexRow, indexCol) {
    			var cacheCell,
    				aliasCol,
    				aliasRow,
    				gridLineColList,
    				gridLineRowList;
    
    			gridLineColList = headItemCols.models;
    			gridLineRowList = headItemRows.models;
    			aliasCol = gridLineColList[indexCol].get('alias');
    			aliasRow = gridLineRowList[indexRow].get('alias');
    			var top, left, width, height;
    			top = gridLineRowList[indexRow].get('top');
    			left = gridLineColList[indexCol].get('left');
    			width = gridLineColList[indexCol].get('width');
    			height = gridLineRowList[indexRow].get('height');
    			cacheCell = new Cell();
    			cacheCell.set('occupy', {
    				x: [aliasCol],
    				y: [aliasRow]
    			});
    			cacheCell.set('physicsBox', {
    				top: top,
    				left: left,
    				width: width,
    				height: height
    			});
    			cache.cachePosition(aliasRow, aliasCol, cells.length);
    			cells.add(cacheCell);
    			return cacheCell;
    		}
    	};
    	return common;
    
    });
    define('entrance/tool/setFontColor',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		selectRegions = require('collections/selectRegion'),
    		common = require('entrance/regionoperation');
    
    
    	var setFontColor = function(sheetId, color, region) {
    		var sendRegion = common.regionOperation(sheetId, region, function(cell) {
    			cell.set('content.color', color);
    		});
    		send.PackAjax({
    			url: 'text.htm?m=font_color',
    			data: JSON.stringify({
    				excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    				sheetId: '1',
    				coordinate: {
    					startX: sendRegion.startColIndex,
    					startY: sendRegion.startRowIndex,
    					endX: sendRegion.endColIndex,
    					endY: sendRegion.endRowIndex
    				},
    				color: color
    			})
    		});
    	};
    	return setFontColor;
    });
    define('entrance/tool/setFillColor',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		selectRegions = require('collections/selectRegion'),
    		common = require('entrance/regionoperation');
    
    
    	var setFillColor = function(sheetId, color, region) {
    
    		var sendRegion = common.regionOperation(sheetId, region, function(cell) {
    			cell.set('customProp.background', color);
    		});
    		
    		send.PackAjax({
    			url: 'text.htm?m=fill_bgcolor',
    			data: JSON.stringify({
    				excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    				sheetId: '1',
    				coordinate: {
    					startX: sendRegion.startColIndex,
    					startY: sendRegion.startRowIndex,
    					endX: sendRegion.endColIndex,
    					endY: sendRegion.endRowIndex
    				},
    				bgcolor: color
    			})
    		});
    
    	};
    	return setFillColor;
    });
    define('entrance/tool/setFontFamily',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		selectRegions = require('collections/selectRegion'),
    		common = require('entrance/regionoperation'),
    		sendRegion;
    
    	var setFontFamily = function(sheetId, fontFamily, region) {
    		sendRegion = common.regionOperation(sheetId, region, function(cell) {
    			cell.set('content.family', fontFamily);
    		});
    
    		send.PackAjax({
    			url: 'text.htm?m=font_family',
    			data: JSON.stringify({
    				excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    				sheetId: '1',
    				coordinate: {
    					startX: sendRegion.startColIndex,
    					startY: sendRegion.startRowIndex,
    					endX: sendRegion.endColIndex,
    					endY: sendRegion.endRowIndex
    				},
    				family: fontFamily
    			})
    		});
    	};
    	return setFontFamily;
    });
    define('entrance/cell/setCellHeight',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		headItemRows = require('collections/headItemRow'),
    		selectRegions = require('collections/selectRegion'),
    		common = require('entrance/regionoperation'),
    		sendRegion;
    
    
    	var setCellHeight = function(sheetId, rowLabel, height) {
    		var index;
    		index = headItemRows.getIndexByDisplayname(rowLabel);
    		if (index > -1) {
    			// adjustHeight = height - headItemRows.models[index].get('height');
    			Backbone.trigger('event:rowHeightAdjust', index, height);
    		}
    	};
    	return setCellHeight;
    });
    define('entrance/cell/setCellWidth',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		selectRegions = require('collections/selectRegion'),
    		headItemCols = require('collections/headItemCol'),
    		common = require('entrance/regionoperation'),
    		sendRegion;
    
    
    	var setCellWidth = function(sheetId, colLable, width) {
    		var index;
    		index = headItemCols.getIndexByDisplayname(colLable);
    		if (index > -1) {
    			Backbone.trigger('event:colWidthAdjust', index, width);
    		}
    	};
    	return setCellWidth;
    });
    define('entrance/cell/selectCell',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		binary = require('basic/util/binary'),
    		selectRegions = require('collections/selectRegion'),
    		siderLineRows = require('collections/siderLineRow'),
    		siderLineCols = require('collections/siderLineCol'),
    		cells = require('collections/cells'),
    		headItemCols = require('collections/headItemCol'),
    		headItemRows = require('collections/headItemRow'),
    		regionOperation = require('entrance/regionoperation'),
    		sendRegion;
    
    
    	var selectCell = function(sheetId, region) {
    		var startColIndex,
    			startRowIndex,
    			endColIndex,
    			endRowIndex,
    			operationRegion,
    			headItemColList = headItemCols.models,
    			headItemRowList = headItemRows.models,
    			top = 0,
    			left = 0,
    			width = 0,
    			height = 0,
    			len, i;
    
    		operationRegion = regionOperation.getRegionIndexByRegionLabel(region);
    		if (operationRegion.startColIndex < 0 || operationRegion.startRowIndex < 0 || operationRegion.endColIndex < 0 || operationRegion.endRowIndex < 0) return;
    
    		operationRegion = regionOperation.getFullSelectRegion(operationRegion.startColIndex, operationRegion.startRowIndex, operationRegion.endColIndex, operationRegion.endRowIndex);
    		startColIndex = operationRegion.startColIndex;
    		startRowIndex = operationRegion.startRowIndex;
    		endColIndex = operationRegion.endColIndex;
    		endRowIndex = operationRegion.endRowIndex;
    
    
    		width = headItemColList[endColIndex].get('width') + headItemColList[endColIndex].get('left') - headItemColList[startColIndex].get('left');
    		height = headItemRowList[endRowIndex].get('height') + headItemRowList[endRowIndex].get('top') - headItemRowList[startRowIndex].get('top');
    
    		selectRegions.models[0].set({
    			initPosi: {
    				startX: startColIndex,
    				startY: startRowIndex
    			},
    			mousePosi: {
    				mouseX: endColIndex,
    				mouseY: endRowIndex
    			},
    			physicsPosi: {
    				top: headItemRowList[startRowIndex].get('top'),
    				left: headItemColList[startColIndex].get('left')
    
    			},
    			physicsBox: {
    				width: width - 1,
    				height: height - 1
    			},
    			wholePosi: {
    				startX: startColIndex,
    				startY: startRowIndex,
    				endX: endColIndex,
    				endY: endRowIndex
    			}
    		});
    		siderLineRows.models[0].set({
    			top: headItemRowList[startRowIndex].get('top'),
    			height: height - 1
    		});
    		siderLineCols.models[0].set({
    			left: headItemColList[startColIndex].get('left'),
    			width: width - 1
    
    		});
    		len = headItemRowList.length;
    
    		for (i = 0; i < len; i++) {
    			headItemRowList[i].set({
    				activeState: false
    			});
    		}
    
    		len = headItemColList.length;
    		for (i = 0; i < len; i++) {
    			headItemColList[i].set({
    				activeState: false
    			});
    		}
    		for (i = 0; i < endColIndex - startColIndex + 1; i++) {
    			headItemColList[startColIndex + i].set({
    				activeState: true
    			});
    		}
    		for (i = 0; i < endRowIndex - startRowIndex + 1; i++) {
    			headItemRowList[startRowIndex + i].set({
    				activeState: true
    			});
    		}
    	};
    	return selectCell;
    });
    define('entrance/tool/mergeCell',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		cache = require('basic/tools/cache'),
    		selectRegions = require('collections/selectRegion'),
    		cells = require('collections/cells'),
    		headItemCols = require('collections/headItemCol'),
    		headItemRows = require('collections/headItemRow'),
    		common = require('entrance/regionoperation'),
    		sendRegion;
    
    	var mergeCell = function(sheetId, region) {
    		var operationRegion = {};
    		if (region !== undefined && region !== null) {
    			operationRegion = common.getRegionIndexByRegionLabel(region);
    			operationRegion = common.getFullSelectRegion(operationRegion.startColIndex, operationRegion.startRowIndex, operationRegion.endColIndex, operationRegion.endRowIndex);
    		} else {
    			operationRegion.startColIndex = selectRegions.models[0].get('wholePosi').startX;
    			operationRegion.startRowIndex = selectRegions.models[0].get('wholePosi').startY;
    			operationRegion.endColIndex = selectRegions.models[0].get('wholePosi').endX;
    			operationRegion.endRowIndex = selectRegions.models[0].get('wholePosi').endY;
    		}
    
    		var startIndexCol = operationRegion.startColIndex,
    			startIndexRow = operationRegion.startRowIndex,
    			endIndexCol = operationRegion.endColIndex,
    			endIndexRow = operationRegion.endRowIndex,
    			selectRegionCells = cells.getCellByRow(startIndexRow, startIndexCol, endIndexRow, endIndexCol),
    			i, j,
    			len,
    			textNum = 0,
    			cacheCell,
    			gridLineColList = headItemCols.models,
    			gridLineRowList = headItemRows.models,
    			occupyX = [],
    			occupyY = [],
    			tempCell,
    			width = 0,
    			height = 0,
    			aliasCol,
    			aliasRow;
    
    		//ajax action
    		var data = {
    			excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    			sheetId: '1',
    			coordinate: {
    				startX: startIndexCol,
    				startY: startIndexRow,
    				endX: endIndexCol,
    				endY: endIndexRow
    			}
    
    		};
    		send.PackAjax({
    			url: 'cells.htm?m=merge',
    			data: JSON.stringify(data),
    			success: function(data) {}
    		});
    		len = selectRegionCells.length;
    		for (i = 0; i < len; i++) {
    			if (selectRegionCells[i].get('content').texts !== '') {
    				textNum++;
    				cacheCell = selectRegionCells[i].clone();
    			}
    		}
    		if (textNum > 1) return;
    		if (len) {
    			//销毁选中的单元格
    			for (i = 0; i < len; i++) {
    				selectRegionCells[i].set('isDestroy', true);
    			}
    		}
    		//删除position索引
    		for (i = 0; i < endIndexCol - startIndexCol + 1; i++) {
    			for (j = 0; j < endIndexRow - startIndexRow + 1; j++) {
    				aliasCol = gridLineColList[startIndexCol + i].get('alias');
    				aliasRow = gridLineRowList[startIndexRow + j].get('alias');
    				deletePosi(aliasCol, aliasRow);
    			}
    		}
    		//获取occupy信息
    		for (i = 0; i < endIndexCol - startIndexCol + 1; i++) {
    			occupyX.push(gridLineColList[startIndexCol + i].get('alias'));
    			width += gridLineColList[startIndexCol + i].get('width') + 1;
    		}
    		for (i = 0; i < endIndexRow - startIndexRow + 1; i++) {
    			occupyY.push(gridLineRowList[startIndexRow + i].get('alias'));
    			height += gridLineRowList[startIndexRow + i].get('height') + 1;
    		}
    		tempCell = {
    			occupy: {
    				x: occupyX,
    				y: occupyY
    			},
    			physicsBox: {
    				top: gridLineRowList[startIndexRow].get('top'),
    				left: gridLineColList[startIndexCol].get('left'),
    				width: width - 1,
    				height: height - 1
    			}
    		};
    		if (cacheCell) {
    			cacheCell.set('occupy', tempCell.occupy);
    			cacheCell.set('physicsBox', tempCell.physicsBox);
    			tempCell = cacheCell;
    		}
    		cells.add(tempCell);
    		//维护posi
    		for (i = 0; i < endIndexCol - startIndexCol + 1; i++) {
    			for (j = 0; j < endIndexRow - startIndexRow + 1; j++) {
    				cache.cachePosition(gridLineRowList[startIndexRow + j].get('alias'), gridLineColList[startIndexCol + i].get('alias'), cells.length - 1);
    			}
    		}
    		//更新选中视图
    	};
    
    	function deletePosi(indexCol, indexRow) {
    		var currentCellPosition = cache.CellsPosition,
    			currentStrandX = currentCellPosition.strandX,
    			currentStrandY = currentCellPosition.strandY;
    		if (currentStrandX[indexCol] !== undefined && currentStrandX[indexCol][indexRow] !== undefined) {
    			delete currentStrandX[indexCol][indexRow];
    			if (!Object.getOwnPropertyNames(currentStrandX[indexCol]).length) {
    				delete currentStrandX[indexCol];
    			}
    		}
    		if (currentStrandY[indexRow] !== undefined && currentStrandY[indexRow][indexCol] !== undefined) {
    			delete currentStrandY[indexRow][indexCol];
    			if (!Object.getOwnPropertyNames(currentStrandY[indexRow]).length) {
    				delete currentStrandY[indexRow];
    			}
    		}
    	}
    	return mergeCell;
    });
    define('entrance/tool/splitCell',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		cache = require('basic/tools/cache'),
    		binary = require('basic/util/binary'),
    		selectRegions = require('collections/selectRegion'),
    		cells = require('collections/cells'),
    		headItemCols = require('collections/headItemCol'),
    		headItemRows = require('collections/headItemRow'),
    		common = require('entrance/regionoperation'),
    		sendRegion;
    
    	var splitCell = function(sheetId, region) {
    		var operationRegion = {};
    		//选中区域内开始坐标，结束坐标
    		if (region !== undefined && region !== null) {
    			operationRegion = common.getRegionIndexByRegionLabel(region);
    			operationRegion = common.getFullSelectRegion(operationRegion.startColIndex, operationRegion.startRowIndex, operationRegion.endColIndex, operationRegion.endRowIndex);
    		} else {
    			operationRegion.startColIndex = selectRegions.models[0].get('wholePosi').startX;
    			operationRegion.startRowIndex = selectRegions.models[0].get('wholePosi').startY;
    			operationRegion.endColIndex = selectRegions.models[0].get('wholePosi').endX;
    			operationRegion.endRowIndex = selectRegions.models[0].get('wholePosi').endY;
    		}
    
    		var startIndexCol = operationRegion.startColIndex,
    			startIndexRow = operationRegion.startRowIndex,
    			endIndexCol = operationRegion.endColIndex,
    			endIndexRow = operationRegion.endRowIndex,
    			selectRegionCells,
    			cacheCell,
    			headLineColList,
    			headLineRowList,
    			i, j, len,
    			aliasCol, aliasRow;
    
    
    		var data = {
    			excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    			sheetId: '1',
    			coordinate: {
    				startX: startIndexCol,
    				startY: startIndexRow,
    				endX: endIndexCol,
    				endY: endIndexRow
    			}
    		};
    		send.PackAjax({
    			url: 'cells.htm?m=merge_delete',
    			data: JSON.stringify(data),
    			success: function(data) {}
    		});
    
    
    		//选中区域内所有单元格对象
    		selectRegionCells = cells.getCellByX(startIndexCol, startIndexRow, endIndexCol, endIndexRow);
    		headLineColList = headItemCols.models;
    		headLineRowList = headItemRows.models;
    		//删除position索引
    		for (i = 0; i < endIndexCol - startIndexCol + 1; i++) {
    			for (j = 0; j < endIndexRow - startIndexRow + 1; j++) {
    				aliasCol = headLineColList[startIndexCol + i].get('alias');
    				aliasRow = headLineRowList[startIndexRow + j].get('alias');
    				deletePosi(aliasCol, aliasRow);
    			}
    		}
    		len = selectRegionCells.length;
    		for (i = 0; i < len; i++) {
    			cacheCell = selectRegionCells[i].clone();
    			selectRegionCells[i].set('isDestroy', true);
    			splitCreateCell(cacheCell);
    		}
    	};
    
    	function deletePosi(indexCol, indexRow) {
    		var currentCellPosition = cache.CellsPosition,
    			currentStrandX = currentCellPosition.strandX,
    			currentStrandY = currentCellPosition.strandY;
    		if (currentStrandX[indexCol] !== undefined && currentStrandX[indexCol][indexRow] !== undefined) {
    			delete currentStrandX[indexCol][indexRow];
    			if (!Object.getOwnPropertyNames(currentStrandX[indexCol]).length) {
    				delete currentStrandX[indexCol];
    			}
    		}
    		if (currentStrandY[indexRow] !== undefined && currentStrandY[indexRow][indexCol] !== undefined) {
    			delete currentStrandY[indexRow][indexCol];
    			if (!Object.getOwnPropertyNames(currentStrandY[indexRow]).length) {
    				delete currentStrandY[indexRow];
    			}
    		}
    	}
    
    	function splitCreateCell(cacheCell) {
    		var gridLineColList,
    			gridLineRowList,
    			startIndexCol,
    			startIndexRow,
    			endIndexRow,
    			endIndexCol;
    		gridLineColList = headItemCols.models;
    		gridLineRowList = headItemRows.models;
    
    		startIndexRow = binary.modelBinary(cacheCell.get('physicsBox').top, gridLineRowList, 'top', 'height', 0, gridLineRowList.length - 1);
    		startIndexCol = binary.modelBinary(cacheCell.get('physicsBox').left, gridLineColList, 'left', 'width', 0, gridLineColList.length - 1);
    		endIndexRow = binary.modelBinary(cacheCell.get('physicsBox').top + cacheCell.get('physicsBox').height, gridLineRowList, 'top', 'height', 0, gridLineRowList.length - 1);
    		endIndexCol = binary.modelBinary(cacheCell.get('physicsBox').left + cacheCell.get('physicsBox').width, gridLineColList, 'left', 'width', 0, gridLineColList.length - 1);
    
    		var i = 0,
    			top, left, width, height, tempCell, aliasCol, aliasRow;
    		for (; i < endIndexCol - startIndexCol + 1; i++) {
    			for (var j = 0; j < endIndexRow - startIndexRow + 1; j++) {
    				aliasCol = gridLineColList[startIndexCol + i].get('alias');
    				aliasRow = gridLineRowList[startIndexRow + j].get('alias');
    				left = gridLineColList[startIndexCol + i].get('left');
    				top = gridLineRowList[startIndexRow + j].get('top');
    				width = gridLineColList[startIndexCol + i].get('width');
    				height = gridLineRowList[startIndexRow + j].get('height');
    				tempCell = cacheCell.clone();
    				tempCell.set('occupy', {
    					x: aliasCol,
    					y: aliasRow
    				});
    				tempCell.set('physicsBox', {
    					top: top,
    					left: left,
    					width: width,
    					height: height
    				});
    				if (i !== 0) {
    					tempCell.set('border.left', false);
    				}
    				if (j !== 0) {
    					tempCell.set('border.top', false);
    				}
    				if (i !== 0 || j !== 0) {
    					tempCell.set('content.texts', '');
    				}
    				cache.cachePosition(aliasRow, aliasCol, cells.length);
    				cells.add(tempCell);
    			}
    		}
    	}
    	return splitCell;
    });
    define('entrance/tool/setCellContent',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		selectRegions = require('collections/selectRegion'),
    		common = require('entrance/regionoperation'),
    		sendRegion;
    
    	var setCellContent = function(sheetId, text, region) {
    		sendRegion = common.regionOperation(sheetId, region, function(cell) {
    			cell.set('content.texts', text);
    		});
    		
    		send.PackAjax({
    			url: 'text.htm?m=data',
    			data: JSON.stringify({
    				excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    				sheetId: '1',
    				coordinate: {
    					startX: sendRegion.startColIndex,
    					startY: sendRegion.startRowIndex,
    				},
    				content: text
    			})
    		});
    	};
    	return setCellContent;
    });
    define('entrance/cell/selectCellCols',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		cache = require('basic/tools/cache'),
    		listener = require('basic/util/listener'),
    		selectRegions = require('collections/selectRegion'),
    		cells = require('collections/cells'),
    		headItemCols = require('collections/headItemCol'),
    		headItemRows = require('collections/headItemRow'),
    		siderLineCols = require('collections/siderLineCol'),
    		siderLineRows = require('collections/siderLineRow'),
    		regionOperation = require('entrance/regionoperation'),
    		sendRegion;
    
    	var selectCellCols = function(sheetId, displayName, index, e) {
    		var modelIndexRow,
    			headModelRow,
    			headModelCol,
    			headLineColModelList,
    			headLineRowModelList,
    			colDisplayNames=[],
    			rowDisplayNames=[],
    			left,
    			top,
    			width,
    			height,
    			point,
    			len, i;
    
    		if (displayName !== null) {
    			modelIndexRow = headItemRows.getIndexByDisplayname(displayName);
    		} else {
    			modelIndexRow = index;
    		}
    		//headColModels,headRowModels list
    		headLineRowModelList = headItemRows.models;
    		headLineColModelList = headItemCols.models;
    		//this model index of headline
    		//head model information
    		headModelRow = headLineRowModelList[modelIndexRow];
    
    		if (e === undefined || e.isDefaultPrevented() === false) {
    			len = headLineColModelList.length;
    			width = headLineColModelList[len - 1].get('left') + headLineColModelList[len - 1].get('width');
    			top = headModelRow.toJSON().top;
    			height = headModelRow.toJSON().height;
    			left = 0;
    
    			colDisplayNames.push('A');
    			colDisplayNames.push(headLineColModelList[len - 1].get('displayName'));
    			rowDisplayNames.push(headLineRowModelList[modelIndexRow].get('displayName'));
    
    			point = {
    				col: colDisplayNames,
    				row: rowDisplayNames
    			};
    			if (cache.setDataSource === true) {
    
    				if (selectRegions.getModelByType("dataSource")[0] === undefined) {
    					Backbone.trigger('event:cellsContainer:createDataSourceRegion', {});
    				}
    				selectRegions.getModelByType("dataSource")[0].set({
    					physicsPosi: {
    						left: left,
    						top: top
    					},
    					physicsBox: {
    						width: width,
    						height: height
    					}
    				});
    				if (e !== undefined) {
    					e={};
    					e.point=point;
    					listener.excute('dataSourceRegionChange', e);
    					listener.excute('regionChange', e);
    					listener.excute('mousedown', e);
    				}
    			} else {
    				len = headLineRowModelList.length;
    				for (i = 0; i < len; i++) {
    					if (i === modelIndexRow) {
    						headLineRowModelList[i].set({
    							activeState: true
    						});
    						continue;
    					}
    					headLineRowModelList[i].set({
    						activeState: false
    					});
    				}
    				len = headLineColModelList.length;
    				for (i = 0; i < len; i++) {
    					headLineColModelList[i].set({
    						activeState: true
    					});
    				}
    
    				//select region
    				selectRegions.models[0].set({
    					physicsPosi: {
    						left: left,
    						top: top
    					},
    					physicsBox: {
    						width: width,
    						height: height
    					}
    				});
    				//siderline effect
    				siderLineCols.models[0].set({
    					left: left,
    					width: width
    				});
    				siderLineRows.models[0].set({
    					top: top,
    					height: height
    				});
    				if (e !== undefined) {
    					e={};
    					e.point=point;
    					listener.excute('selectRegionChange', e);
    					listener.excute('regionChange', e);
    					listener.excute('mousedown', e);
    				}
    			}
    
    		}
    
    	};
    	return selectCellCols;
    });
    define('entrance/cell/selectCellRows',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		cache = require('basic/tools/cache'),
    		listener = require('basic/util/listener'),
    		selectRegions = require('collections/selectRegion'),
    		cells = require('collections/cells'),
    		headItemCols = require('collections/headItemCol'),
    		headItemRows = require('collections/headItemRow'),
    		siderLineCols = require('collections/siderLineCol'),
    		siderLineRows = require('collections/siderLineRow'),
    		sendRegion;
    
    	var selectCellRows = function(sheetId, displayName, index, e) {
    		var modelIndexCol,
    			modelCell,
    			headModelRow,
    			headModelCol,
    			headLineColModelList,
    			headLineRowModelList,
    			colDisplayNames = [],
    			rowDisplayNames = [],
    			left,
    			top,
    			width,
    			height,
    			point,
    			len, i;
    
    		if (displayName !== null) {
    			modelIndexCol = headModelCol.getIndexByDisplayname(displayName);
    		} else {
    			modelIndexCol = index;
    		}
    		//headColModels,headRowModels list
    		headLineRowModelList = headItemRows.models;
    		headLineColModelList = headItemCols.models;
    		//this model index of headline
    		//head model information
    		headModelCol = headLineColModelList[modelIndexCol];
    
    		len = headLineRowModelList.length;
    		left = headModelCol.toJSON().left;
    		top = 0;
    		width = headModelCol.toJSON().width;
    		height = headLineRowModelList[len - 1].get('top') + headLineRowModelList[len - 1].get('height');
    		
    		rowDisplayNames.push('1');
    		rowDisplayNames.push(headLineRowModelList[len - 1].get('displayName'));
    		colDisplayNames.push(headLineColModelList[modelIndexCol].get('displayName'));
    
    		point = {
    			col: colDisplayNames,
    			row: rowDisplayNames
    		};
    
    		if (e === undefined || e.isDefaultPrevented() === false) {
    			if (cache.setDataSource === true) {
    
    				if (selectRegions.getModelByType("dataSource")[0] === undefined) {
    					Backbone.trigger('event:cellsContainer:createDataSourceRegion', {});
    				}
    				selectRegions.getModelByType("dataSource")[0].set({
    					physicsPosi: {
    						left: left,
    						top: top
    					},
    					physicsBox: {
    						width: width,
    						height: height
    					}
    				});
    				if (e !== undefined) {
    					e={};
    					e.point=point;
    					listener.excute('dataSourceRegionChange', e);
    					listener.excute('regionChange', e);
    					listener.excute('mousedown', e);
    				}
    			} else {
    				for (i = 0; i < len; i++) {
    					headLineRowModelList[i].set({
    						activeState: true
    					});
    				}
    				len = headLineColModelList.length;
    				for (i = 0; i < len; i++) {
    					if (i === modelIndexCol) {
    						headLineColModelList[i].set({
    							activeState: true
    						});
    						continue;
    					}
    					headLineColModelList[i].set({
    						activeState: false
    					});
    				}
    				//selectregion effect
    				selectRegions.models[0].set({
    					physicsPosi: {
    						left: left,
    						top: top
    					},
    					physicsBox: {
    						width: width,
    						height: height
    					}
    				});
    				//siderline effect
    				siderLineCols.models[0].set({
    					left: left,
    					width: width
    				});
    				siderLineRows.models[0].set({
    					top: top,
    					height: height
    				});
    				if (e !== undefined) {
    					e = {};
    					e.point=point;
    					listener.excute('selectRegionChange', e);
    					listener.excute('regionChange', e);
    					listener.excute('mousedown', e);
    				}
    			}
    
    		}
    	};
    	return selectCellRows;
    });
    define('entrance/tool/setCellBorder',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		cells = require('collections/cells'),
    		selectRegions = require('collections/selectRegion'),
    		common = require('entrance/regionoperation');
    
    	var setCellBorder = function(sheetId, border, region) {
    		var operationRegion = {};
    		if (region !== undefined && region !== null) {
    			operationRegion = common.getRegionIndexByRegionLabel(region);
    			operationRegion = common.getFullSelectRegion(operationRegion.startColIndex, operationRegion.startRowIndex, operationRegion.endColIndex, operationRegion.endRowIndex);
    		} else {
    			operationRegion.startColIndex = selectRegions.models[0].get('wholePosi').startX;
    			operationRegion.startRowIndex = selectRegions.models[0].get('wholePosi').startY;
    			operationRegion.endColIndex = selectRegions.models[0].get('wholePosi').endX;
    			operationRegion.endRowIndex = selectRegions.models[0].get('wholePosi').endY;
    		}
    		switch (border) {
    			case 'bottom':
    				setBottom(true);
    				break;
    			case 'top':
    				setTop(true);
    				break;
    			case 'left':
    				setLeft(true);
    				break;
    			case 'right':
    				setRight(true);
    				break;
    			case 'none':
    				setNone(region);
    				break;
    			case 'all':
    				setAll(region);
    				break;
    			case 'outer':
    				setOuter();
    				break;
    		}
    		send.PackAjax({
    			url: 'cells.htm?m=frame',
    			data: JSON.stringify({
    				excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    				sheetId: '1',
    				coordinate: {
    					startX: operationRegion.startColIndex,
    					startY: operationRegion.startRowIndex,
    					endX: operationRegion.endColIndex,
    					endY: operationRegion.endRowIndex
    				},
    				frameStyle: border
    			})
    		});
    		/**
    		 * 清除全边框
    		 * @method setNone
    		 */
    		function setNone(region) {
    			common.regionOperation('1', region, function(cell) {
    				cell.set('border.left', false);
    				cell.set('border.right', false);
    				cell.set('border.top', false);
    				cell.set('border.bottom', false);
    			});
    		}
    		/**
    		 * 设置全边框
    		 * @method setAll
    		 */
    		function setAll(region) {
    			common.regionOperation('1', region, function(cell) {
    				cell.set('border.left', true);
    				cell.set('border.right', true);
    				cell.set('border.top', true);
    				cell.set('border.bottom', true);
    			});
    		}
    		/**
    		 * 设置上边框
    		 * @method setTop
    		 * @param  {boolean} reverse
    		 */
    		function setTop(reverse) {
    			var cellList = cells.getTopHeadModelByIndex(operationRegion.startColIndex, operationRegion.startRowIndex, operationRegion.endColIndex, operationRegion.endRowIndex);
    			common.cellListOperation('1', cellList, function(cell) {
    				cell.set('border.top', reverse);
    			});
    		}
    		/**
    		 * 设置左边框
    		 * @method setLeft
    		 * @param  {boolean} reverse
    		 * @param  {object} [appointList]
    		 */
    		function setLeft(reverse) {
    			var cellList = cells.getLeftHeadModelByIndex(operationRegion.startColIndex, operationRegion.startRowIndex, operationRegion.endColIndex, operationRegion.endRowIndex);
    			common.cellListOperation('1', cellList, function(cell) {
    				cell.set('border.left', reverse);
    			});
    		}
    		/**
    		 * 设置下边框
    		 * @method setBottom
    		 * @param  {boolean} reverse
    		 * @param  {object} [appointList]
    		 */
    		function setBottom(reverse) {
    			var cellList = cells.getBottomHeadModelByIndex(operationRegion.startColIndex, operationRegion.startRowIndex, operationRegion.endColIndex, operationRegion.endRowIndex);
    			common.cellListOperation('1', cellList, function(cell) {
    				cell.set('border.bottom', reverse);
    			});
    		}
    		/**
    		 * 设置右边框
    		 * @method setRight
    		 * @param  {boolean} reverse
    		 * @param  {object} [appointList]
    		 */
    		function setRight(reverse) {
    			var cellList = cells.getRightHeadModelByIndex(operationRegion.startColIndex, operationRegion.startRowIndex, operationRegion.endColIndex, operationRegion.endRowIndex);
    			common.cellListOperation('1', cellList, function(cell) {
    				cell.set('border.right', reverse);
    			});
    		}
    		/**
    		 * 设置外边框
    		 * @method setOuter
    		 */
    		function setOuter() {
    			setTop(true);
    			setRight(true);
    			setBottom(true);
    			setLeft(true);
    		}
    
    	};
    	return setCellBorder;
    });
    define('entrance/tool/setFontFamilySize',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		selectRegions = require('collections/selectRegion'),
    		headItemRows = require('collections/headItemRow'),
    		common = require('entrance/regionoperation'),
    		setCellHeight = require('entrance/cell/setCellHeight'),
    		sendRegion;
    
    	var setFontFamilySize = function(sheetId, fontSize, region) {
    		var headItemModel,
    			headItemHeight,
    			fontHeight,
    			containerHeight,
    			i;
    		sendRegion = common.regionOperation(sheetId, region, function(cell) {
    			cell.set('content.size', fontSize + 'pt');
    		});
    		for (i = sendRegion.startRowIndex; i < sendRegion.endRowIndex + 1; i++) {
    			headItemModel = headItemRows.models[i];
    			//ps：确定是否进行轮询
    			headItemHeight = headItemModel.get('height');
    			fontHeight = Math.round(fontSize / 3 * 4);
    			containerHeight = fontHeight + 4;
    			if (containerHeight > headItemHeight) {
    				setCellHeight('sheetId',headItemModel.get('displayName'),containerHeight);
    			}
    		}
    		send.PackAjax({
    			url: 'text.htm?m=font_size',
    			data: JSON.stringify({
    				excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    				sheetId: '1',
    				coordinate: {
    					startX: sendRegion.startColIndex,
    					startY: sendRegion.startRowIndex,
    					endX: sendRegion.endColIndex,
    					endY: sendRegion.endRowIndex
    				},
    				size: fontSize
    			})
    		});
    	};
    	return setFontFamilySize;
    });
    define('entrance/tool/setFontWeight',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		common = require('entrance/regionoperation'),
    		selectRegions = require('collections/selectRegion'),
    		cells = require('collections/cells');
    
    	var setFontWeight = function(sheetId, bold, region) {
    
    		var sendRegion,
    			startColIndex,
    			startRowIndex,
    			endColIndex,
    			endRowIndex,
    			tempCellList;
    
    		if (bold === 'bold') {
    			bold = true;
    		} else if (bold === 'normal') {
    			bold = false;
    		} else {
    			startColIndex = selectRegions.models[0].get('wholePosi').startX;
    			startRowIndex = selectRegions.models[0].get('wholePosi').startY;
    			endColIndex = selectRegions.models[0].get('wholePosi').endX;
    			endRowIndex = selectRegions.models[0].get('wholePosi').endY;
    
    			tempCellList = cells.getCellByX(startColIndex, startRowIndex, endColIndex, endRowIndex);
    			if (tempCellList === null || tempCellList === undefined || tempCellList.length === 0) {
    				bold = true;
    			} else {
    				bold = !tempCellList[0].get('content').bd;
    			}
    		}
    
    		sendRegion = common.regionOperation(sheetId, region, function(cell) {
    			cell.set('content.bd', bold);
    		});
    
    		send.PackAjax({
    			url: 'text.htm?m=font_weight',
    			data: JSON.stringify({
    				excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    				sheetId: '1',
    				coordinate: {
    					startX: sendRegion.startColIndex,
    					startY: sendRegion.startRowIndex,
    					endX: sendRegion.endColIndex,
    					endY: sendRegion.endRowIndex
    				},
    				isBold: bold
    			})
    		});
    	};
    	return setFontWeight;
    });
    define('entrance/tool/setFontStyle',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		common = require('entrance/regionoperation'),
    		selectRegions = require('collections/selectRegion'),
    		cells = require('collections/cells');
    
    
    	var setFontStyle = function(sheetId, italic, region) {
    		var startColIndex,
    			startRowIndex,
    			endColIndex,
    			endRowIndex,
    			tempCellList,
    			sendRegion;
    
    		if (italic === 'italic') {
    			italic = true;
    		} else if (italic === 'normal') {
    			italic = false;
    		} else {
    			startColIndex = selectRegions.models[0].get('wholePosi').startX;
    			startRowIndex = selectRegions.models[0].get('wholePosi').startY;
    			endColIndex = selectRegions.models[0].get('wholePosi').endX;
    			endRowIndex = selectRegions.models[0].get('wholePosi').endY;
    
    			tempCellList = cells.getCellByX(startColIndex, startRowIndex, endColIndex, endRowIndex);
    			if (tempCellList === null || tempCellList === undefined || tempCellList.length === 0) {
    				italic = true;
    			} else {
    				italic = !tempCellList[0].get('content').italic;
    			}
    		}
    		sendRegion = common.regionOperation(sheetId, region, function(cell) {
    			cell.set('content.italic', italic);
    		});
    
    		send.PackAjax({
    			url: 'text.htm?m=font_italic',
    			data: JSON.stringify({
    				excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    				sheetId: '1',
    				coordinate: {
    					startX: sendRegion.startColIndex,
    					startY: sendRegion.startRowIndex,
    					endX: sendRegion.endColIndex,
    					endY: sendRegion.endRowIndex
    				},
    				italic: italic
    			})
    		});
    	};
    	return setFontStyle;
    });
    define('entrance/sheet/setFrozen',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		cache = require('basic/tools/cache'),
    		selectRegions = require('collections/selectRegion'),
    		cells = require('collections/cells'),
    		headItemCols = require('collections/headItemCol'),
    		headItemRows = require('collections/headItemRow'),
    		regionOperation = require('entrance/regionoperation'),
    		sendRegion;
    
    
    	var setFrozen = function(sheetId, frozenPositon, region) {
    		var operationRegion = {};
    		if (region !== undefined && region !== null) {
    			operationRegion = regionOperation.getRegionIndexByRegionLabel(region);
    			operationRegion = regionOperation.getFullSelectRegion(operationRegion.startColIndex, operationRegion.startRowIndex, operationRegion.endColIndex, operationRegion.endRowIndex);
    		} else {
    			operationRegion.startColIndex = selectRegions.models[0].get('wholePosi').startX;
    			operationRegion.startRowIndex = selectRegions.models[0].get('wholePosi').startY;
    			operationRegion.endColIndex = selectRegions.models[0].get('wholePosi').endX;
    			operationRegion.endRowIndex = selectRegions.models[0].get('wholePosi').endY;
    		}
    		switch (frozenPositon) {
    			case 'custom':
    				setCustom(operationRegion);
    				break;
    			case 'row':
    				setRow();
    				break;
    			case 'col':
    				setCol();
    				break;
    			case 'unfrozen':
    				setUnfrozen();
    				break;
    		}
    		Backbone.trigger('event:bodyContainer:executiveFrozen');
    	};
    	/**
    	 * 过滤超出用户可视区域操作
    	 * @method filterOutUserView
    	 */
    	var filterOutUserView = function(operationRegion) {
    		var headItemRowList = headItemRows.models,
    			headItemColList = headItemCols.models,
    			userViewColIndex = headItemCols.getIndexByAlias(cache.UserView.colAlias),
    			userViewRowIndex = headItemRows.getIndexByAlias(cache.UserView.rowAlias),
    			userViewEndColIndex = headItemCols.getIndexByAlias(cache.UserView.colEndAlias),
    			userViewEndRowIndex = headItemRows.getIndexByAlias(cache.UserView.rowEndAlias);
    		//初始化，未进行滚动
    		if (userViewRowIndex === userViewEndRowIndex) {
    			return false;
    		} else if (operationRegion.startColIndex < userViewColIndex || operationRegion.startRowIndex < userViewRowIndex || operationRegion.startColIndex > userViewEndColIndex || operationRegion.startRowIndex > userViewEndRowIndex) {
    			return true;
    		} else {
    			return false;
    		}
    	};
    	/**
    	 * 执行自定义冻结
    	 * @method setCustom
    	 */
    	var setCustom = function(operationRegion) {
    		if (filterOutUserView(operationRegion)) {
    			return;
    		}
    		var headItemRowList = headItemRows.models,
    			headItemColList = headItemCols.models,
    			splitColAlias = headItemColList[operationRegion.startColIndex].get('alias'),
    			splitRowAlias = headItemRowList[operationRegion.startRowIndex].get('alias');
    
    		cache.TempProp = {
    			isFrozen: true,
    			colAlias: splitColAlias,
    			rowAlias: splitRowAlias,
    			rowFrozen: true,
    			colFrozen: true
    		};
    
    		requestFrozen(splitColAlias, splitRowAlias, cache.UserView.colAlias, cache.UserView.rowAlias);
    	};
    	/**
    	 * 执行列冻结
    	 * @method setCustom
    	 */
    	var setCol = function() {
    		var neighborModel = headItemCols.getNeighborModelByAlias(cache.UserView.colAlias, 'RIGHT');
    		cache.TempProp = {
    			isFrozen: true,
    			colAlias: neighborModel.get('alias'),
    			rowAlias: '1',
    			colFrozen: true
    		};
    		cache.UserView.rowAlias = '1';
    		requestFrozen(neighborModel.get('alias'), '1', cache.UserView.colAlias, cache.UserView.rowAlias);
    	};
    	/**
    	 * 执行行冻结
    	 * @method setCustom
    	 */
    	var setRow = function() {
    		var neighborModel = headItemRows.getNeighborModelByAlias(cache.UserView.rowAlias, 'RIGHT');
    		cache.TempProp = {
    			isFrozen: true,
    			colAlias: '1',
    			rowAlias: neighborModel.get('alias'),
    			rowFrozen: true
    		};
    
    		cache.UserView.colAlias = '1';
    		requestFrozen('1', neighborModel.get('alias'), cache.UserView.colAlias, cache.UserView.rowAlias);
    	};
    	/**
    	 * 解除冻结
    	 * @method setUnfrozen
    	 */
    	var setUnfrozen = function() {
    		cache.TempProp = {
    			isFrozen: false,
    			colAlias: '1',
    			rowAlias: '1'
    		};
    
    		requestUnfrozen();
    	};
    	/**
    	 * 向后台请求冻结操作
    	 * @method requestFrozen
    	 */
    	var requestFrozen = function(frozenColAlias, frozenRowAlias, startColAlias, startRowAlias) {
    		var excelId = SPREADSHEET_AUTHENTIC_KEY,
    			sheetId = '1';
    		send.PackAjax({
    			url: 'sheet.htm?m=frozen&excelId=' + excelId + '&sheetId=' + sheetId + '&frozenX=' + frozenColAlias + '&frozenY=' + frozenRowAlias + '&startX=' + startColAlias + '&startY=' + startRowAlias,
    			success: function(data) {
    				console.log('success');
    			}
    		});
    	};
    	/**
    	 * 向后台请求解除冻操作
    	 * @method requestUnfrozen
    	 */
    	var requestUnfrozen = function() {
    		var excelId = window.SPREADSHEET_AUTHENTIC_KEY,
    			sheetId = $("#sheetId").val();
    		send.PackAjax({
    			url: 'sheet.htm?m=unFrozen&excelId=' + excelId + '&sheetId=' + sheetId,
    			success: function(data) {
    
    			}
    		});
    	};
    	return setFrozen;
    });
    define('entrance/tool/setAlign',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		selectRegions = require('collections/selectRegion'),
    		common = require('entrance/regionoperation'),
    		sendRegion;
    
    
    	var setAlign = function(sheetId, alignType, region) {
    		var url,
    			transverse,
    			vertical;
    		switch (alignType) {
    			case 'left':
    				url = "cells.htm?m=align_level";
    				transverse = 'left';
    				break;
    			case 'center':
    				url = "cells.htm?m=align_level";
    				transverse = 'center';
    				break;
    			case 'right':
    				url = "cells.htm?m=align_level";
    				transverse = 'right';
    				break;
    			case 'top':
    				url = "cells.htm?m=align_vertical";
    				vertical = 'top';
    				break;
    			case 'middle':
    				url = "cells.htm?m=align_vertical";
    				vertical = 'middle';
    				break;
    			case 'bottom':
    				url = "cells.htm?m=align_vertical";
    				vertical = 'bottom';
    				break;
    			default:
    				return;
    		}
    		sendRegion = common.regionOperation(sheetId, region, function(cell) {
    			if (transverse !== undefined) {
    				cell.set('content.alignRow', transverse);
    			} else {
    				cell.set('content.alignCol', vertical);
    			}
    		});
    		var type;
    		type = transverse || vertical;
    		send.PackAjax({
    			url: url,
    			data: JSON.stringify({
    				excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    				sheetId: '1',
    				coordinate: {
    					startX: sendRegion.startColIndex,
    					startY: sendRegion.startRowIndex,
    					endX: sendRegion.endColIndex,
    					endY: sendRegion.endRowIndex
    				},
    				alignStyle: type
    			})
    		});
    
    	};
    	return setAlign;
    });
    define('entrance/tool/setTextType',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		selectRegions = require('collections/selectRegion'),
    		common = require('entrance/regionoperation'),
    		sendRegion;
    
    
    	var setTextType = function(sheetId, format, region) {
    		var tempValue;
    		if (format === 'number') {
    			tempValue = 'num';
    		} else if (format === 'time') {
    			tempValue = 'time';
    		} else {
    			tempValue = 'text';
    		}
    		sendRegion = common.regionOperation(sheetId, region, function(cell) {
    			cell.set('customProp.format', tempValue);
    		});
    		send.PackAjax({
    			url: 'text.htm?m=date_format',
    			data: JSON.stringify({
    				excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    				sheetId: '1',
    				coordinate: {
    					startX: sendRegion.startColIndex,
    					startY: sendRegion.startRowIndex,
    					endX: sendRegion.endColIndex,
    					endY: sendRegion.endRowIndex
    				},
    				format: tempValue
    			})
    		});
    
    	};
    	return setTextType;
    });
    define('entrance/selectregion/dataSourceRegionOperation',function() {
    	
    	var cache = require('basic/tools/cache'),
    		operation;
    
    	operation = {
    		setDataSourceRegion: function() {
    			cache.setDataSource = true;
    		},
    		setSelectRegion: function() {
    			cache.setDataSource = false;
    		},
    		destroyDataSoureRegion: function() {
    			if (selectRegions.getModelByType("dataSource")[0] !== undefined) {
    				selectRegions.getModelByType("dataSource")[0].destroy();
    			}
    		}
    	};
    	return operation;
    });
    define('entrance/sheet/getPointByPosi',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		cache = require('basic/tools/cache'),
    		selectRegions = require('collections/selectRegion'),
    		cells = require('collections/cells'),
    		headItemCols = require('collections/headItemCol'),
    		headItemRows = require('collections/headItemRow'),
    		getPointByPosi;
    
    	getPointByPosi = function(sheetId, mouseColPosi, mouseRowPosi) {
    		var result = {};
    		var getResult = function() {
    			return function(callback) {
    				result.point = callback;
    			};
    		};
    		Backbone.trigger('event:cellsContainer:getCoordinate', getResult(), mouseColPosi, mouseRowPosi);
    		if (result.point === undefined) {
    			result.point = {
    				col: '',
    				row: ''
    			};
    			return result;
    		} else {
    			return result;
    		}
    	};
    	return getPointByPosi;
    });
    define('entrance/tool/setWordWrap',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		common = require('entrance/regionoperation'),
    		selectRegions = require('collections/selectRegion'),
    		cells = require('collections/cells');
    
    	var setWordWrap = function(sheetId, wordWrap, region) {
    
    		var sendRegion,
    			startColIndex,
    			startRowIndex,
    			endColIndex,
    			endRowIndex,
    			tempCellList;
    
    		if (wordWrap === undefined) {
    			startColIndex = selectRegions.models[0].get('wholePosi').startX;
    			startRowIndex = selectRegions.models[0].get('wholePosi').startY;
    			endColIndex = selectRegions.models[0].get('wholePosi').endX;
    			endRowIndex = selectRegions.models[0].get('wholePosi').endY;
    
    			tempCellList = cells.getCellByX(startColIndex, startRowIndex, endColIndex, endRowIndex);
    			if (tempCellList === null || tempCellList === undefined || tempCellList.length === 0) {
    				wordWrap = true;
    			} else {
    				wordWrap = !tempCellList[0].get('content').wordWrap;
    			}
    		}
    
    		sendRegion = common.regionOperation(sheetId, region, function(cell) {
    			cell.set('content.wordWrap', wordWrap);
    		});
    	};
    	return setWordWrap;
    });
    define('entrance/cell/getTextByCoordinate',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		cache = require('basic/tools/cache'),
    		selectRegions = require('collections/selectRegion'),
    		cells = require('collections/cells'),
    		headItemCols = require('collections/headItemCol'),
    		headItemRows = require('collections/headItemRow'),
    		regionOperation = require('entrance/regionoperation'),
    		getTextByCoordinate;
    
    	getTextByCoordinate = function(sheetId, region) {
    		var operationRegion = {},
    			headLineColModelList = headItemCols.models,
    			headLineRowModelList = headItemRows.models,
    			aliasGridRow,
    			aliasGridCol,
    			cellsPositionX,
    			modelCell;
    
    		if (region !== undefined && region !== null) {
    			operationRegion = regionOperation.getRegionIndexByRegionLabel(region);
    		} else {
    			operationRegion.startColIndex = selectRegions.models[0].get('wholePosi').startX;
    			operationRegion.startRowIndex = selectRegions.models[0].get('wholePosi').startY;
    		}
    		aliasGridCol = headLineColModelList[operationRegion.startColIndex].get('alias');
    		aliasGridRow = headLineRowModelList[operationRegion.startRowIndex].get('alias');
    
    		cellsPositionX = cache.CellsPosition.strandX;
    
    		if (cellsPositionX[aliasGridCol] !== undefined &&
    			cellsPositionX[aliasGridCol][aliasGridRow] !== undefined) {
    			modelCell = cells.models[cellsPositionX[aliasGridCol][aliasGridRow]];
    			return modelCell.get('content').texts;
    		} else {
    			return '';
    		}
    	};
    	return getTextByCoordinate;
    });
    define('entrance/sheet/adaptScreen',function() {
    	
    
    	var Backbone = require('lib/backbone');
    	var adaptScreen = function(sheetId) {
    		Backbone.trigger('call:screenContainer:adaptScreen');
    	};
    	return adaptScreen;
    });
    define('entrance/sheet/getFrozenState',function() {
    	
    
    	var cache = require('basic/tools/cache'),
    		getFrozenState;
    
    		getFrozenState = function(sheetId) {
    			return cache.TempProp.isFrozen;
    		};
    	return getFrozenState;
    });
    define('entrance/sheet/getSelectRegion',function() {
    	
    
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		cache = require('basic/tools/cache'),
    		selectRegions = require('collections/selectRegion'),
    		headItemCols = require('collections/headItemCol'),
    		headItemRows = require('collections/headItemRow'),
    		getSelectRegion;
    
    	/**
    	 * 获取选中区域信息
    	 * @param  {string} sheetId sheetId
    	 * @return {object} 
    	 */
    	getSelectRegion = function(sheetId) {
    		var result = {},
    			cols = [],
    			rows = [],
    			selectRegion,
    			startColIndex,
    			startRowIndex,
    			endColIndex,
    			endRowIndex, i;
    
    		selectRegion = selectRegions.findWhere({
    			'selectType': 'operation'
    		});
    		startColIndex = selectRegion.get('wholePosi').startX;
    		startRowIndex = selectRegion.get('wholePosi').startY;
    		endColIndex = selectRegion.get('wholePosi').endX;
    		endRowIndex = selectRegion.get('wholePosi').endY;
    		for (i = startColIndex; i < endColIndex + 1; i++) {
    			cols.push(headItemCols.models[i].get('displayName'));
    		}
    		for (i = startRowIndex; i < endRowIndex + 1; i++) {
    			rows.push(headItemRows.models[i].get('displayName'));
    		}
    		result.col = cols;
    		result.row = rows;
    		return result;
    	};
    	return getSelectRegion;
    });
    define('entrance/extention/highlight',function() {
    	
    	var Backbone = require('lib/backbone');
    	return {
    		startHighlight: function() {
    			Backbone.trigger('event:cellsContainer:startHighlight');
    		},
    		stopHighlight: function() {
    			Backbone.trigger('event:cellsContainer:stopHighlight');
    		}
    	};
    });
    define('entrance/cell/reloadCells',function() {
    	
    	var cells = require('collections/cells'),
    		cache = require('basic/tools/cache');
    
    	function reloadCells() {
    		Backbone.trigger('event:contentCellsContainer:reloadCells');
    		Backbone.trigger('event:cellsContainer:adaptSelectRegion');
    	}
    	return reloadCells;
    });
    define('basic/util/observer.pattern',function() {
    	
    
    	/**
    	 * 订阅模式装饰类
    	 * 系统配置变量
    	 * @author ray wu
    	 * @class observer
    	 * @since 0.1.0
    	 * @module basic
    	 */
    	var observer = {
    		/**
    		 * 发布器
    		 * @property {object} publisher
    		 */
    		publisher: {
    			subscribers: {
    				any: [] //事件类型：订阅者（subscribers）
    			},
    			subscribe: function(fn, type) {
    				type = type || 'any';
    				if (typeof this.subscribers[type] === "undefined") {
    					this.subscribers[type] = [];
    				}
    				this.subscribers[type].push(fn);
    			},
    			unsubscribe: function(fn, type) {
    				this.visitSubscribers("unsubscribe", fn, type);
    			},
    			publish: function(publication, type) {
    				this.visitSubscribers('publish', publication, type);
    			},
    			/**
    			 * 订阅者触发动作
    			 * @method visitSubscribers 
    			 * @param  {string} action 发布护着取消订阅
    			 * @param  {object} arg    传递发布的内容
    			 * @param  {string} type   订阅的类型
    			 */
    			visitSubscribers: function(action, arg, type) {
    				var pubtype = type || 'any',
    					subscribers = this.subscribers[pubtype],
    					subscriber,
    					i,
    					max;
    				max = subscribers !== undefined ? subscribers.length : 0;
    				for (i = 0; i < max; i++) {
    					if (action === 'publish') {
    						subscriber = subscribers[i];
    						subscriber.master[subscriber.behavior](arg, subscriber.args);
    					} else {
    						if (subscribers[i] === arg) {
    							subscribers.splice(i, 1);
    						}
    					}
    				}
    			}
    		},
    		/**
    		 * 建立发布者
    		 * @method buildPublisher 
    		 * @param  {object} obj 建立对象
    		 */
    		buildPublisher: function(obj) {
    			for (var i in this.publisher) {
    				if (this.publisher.hasOwnProperty(i) && typeof this.publisher[i] === "function") {
    					obj[i] = this.publisher[i];
    				}
    			}
    			obj.subscribers = {
    				any: []
    			};
    		}
    	};
    	return observer;
    });
    /*!
    
     handlebars v4.0.5
    
    Copyright (C) 2011-2015 by Yehuda Katz
    
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
    
    @license
    */
    define('lib/handlebars',function() {
    	return /******/ (function(modules) { // webpackBootstrap
    			/******/ // The module cache
    			/******/
    			var installedModules = {};
    
    			/******/ // The require function
    			/******/
    			function __webpack_require__(moduleId) {
    
    				/******/ // Check if module is in cache
    				/******/
    				if (installedModules[moduleId])
    				/******/
    					return installedModules[moduleId].exports;
    
    				/******/ // Create a new module (and put it into the cache)
    				/******/
    				var module = installedModules[moduleId] = {
    					/******/
    					exports: {},
    					/******/
    					id: moduleId,
    					/******/
    					loaded: false
    						/******/
    				};
    
    				/******/ // Execute the module function
    				/******/
    				modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    
    				/******/ // Flag the module as loaded
    				/******/
    				module.loaded = true;
    
    				/******/ // Return the exports of the module
    				/******/
    				return module.exports;
    				/******/
    			}
    
    
    			/******/ // expose the modules object (__webpack_modules__)
    			/******/
    			__webpack_require__.m = modules;
    
    			/******/ // expose the module cache
    			/******/
    			__webpack_require__.c = installedModules;
    
    			/******/ // __webpack_public_path__
    			/******/
    			__webpack_require__.p = "";
    
    			/******/ // Load entry module and return exports
    			/******/
    			return __webpack_require__(0);
    			/******/
    		})
    		/************************************************************************/
    		/******/
    		([
    			/* 0 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				
    
    				var _interopRequireDefault = __webpack_require__(1)['default'];
    
    				exports.__esModule = true;
    
    				var _handlebarsRuntime = __webpack_require__(2);
    
    				var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);
    
    				// Compiler imports
    
    				var _handlebarsCompilerAst = __webpack_require__(21);
    
    				var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);
    
    				var _handlebarsCompilerBase = __webpack_require__(22);
    
    				var _handlebarsCompilerCompiler = __webpack_require__(27);
    
    				var _handlebarsCompilerJavascriptCompiler = __webpack_require__(28);
    
    				var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);
    
    				var _handlebarsCompilerVisitor = __webpack_require__(25);
    
    				var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);
    
    				var _handlebarsNoConflict = __webpack_require__(20);
    
    				var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);
    
    				var _create = _handlebarsRuntime2['default'].create;
    
    				function create() {
    					var hb = _create();
    
    					hb.compile = function(input, options) {
    						return _handlebarsCompilerCompiler.compile(input, options, hb);
    					};
    					hb.precompile = function(input, options) {
    						return _handlebarsCompilerCompiler.precompile(input, options, hb);
    					};
    
    					hb.AST = _handlebarsCompilerAst2['default'];
    					hb.Compiler = _handlebarsCompilerCompiler.Compiler;
    					hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];
    					hb.Parser = _handlebarsCompilerBase.parser;
    					hb.parse = _handlebarsCompilerBase.parse;
    
    					return hb;
    				}
    
    				var inst = create();
    				inst.create = create;
    
    				_handlebarsNoConflict2['default'](inst);
    
    				inst.Visitor = _handlebarsCompilerVisitor2['default'];
    
    				inst['default'] = inst;
    
    				exports['default'] = inst;
    				module.exports = exports['default'];
    
    				/***/
    			},
    			/* 1 */
    			/***/
    			function(module, exports) {
    
    				
    
    				exports["default"] = function(obj) {
    					return obj && obj.__esModule ? obj : {
    						"default": obj
    					};
    				};
    
    				exports.__esModule = true;
    
    				/***/
    			},
    			/* 2 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				
    
    				var _interopRequireWildcard = __webpack_require__(3)['default'];
    
    				var _interopRequireDefault = __webpack_require__(1)['default'];
    
    				exports.__esModule = true;
    
    				var _handlebarsBase = __webpack_require__(4);
    
    				var base = _interopRequireWildcard(_handlebarsBase);
    
    				// Each of these augment the Handlebars object. No need to setup here.
    				// (This is done to easily share code between commonjs and browse envs)
    
    				var _handlebarsSafeString = __webpack_require__(18);
    
    				var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);
    
    				var _handlebarsException = __webpack_require__(6);
    
    				var _handlebarsException2 = _interopRequireDefault(_handlebarsException);
    
    				var _handlebarsUtils = __webpack_require__(5);
    
    				var Utils = _interopRequireWildcard(_handlebarsUtils);
    
    				var _handlebarsRuntime = __webpack_require__(19);
    
    				var runtime = _interopRequireWildcard(_handlebarsRuntime);
    
    				var _handlebarsNoConflict = __webpack_require__(20);
    
    				var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);
    
    				// For compatibility and usage outside of module systems, make the Handlebars object a namespace
    				function create() {
    					var hb = new base.HandlebarsEnvironment();
    
    					Utils.extend(hb, base);
    					hb.SafeString = _handlebarsSafeString2['default'];
    					hb.Exception = _handlebarsException2['default'];
    					hb.Utils = Utils;
    					hb.escapeExpression = Utils.escapeExpression;
    
    					hb.VM = runtime;
    					hb.template = function(spec) {
    						return runtime.template(spec, hb);
    					};
    
    					return hb;
    				}
    
    				var inst = create();
    				inst.create = create;
    
    				_handlebarsNoConflict2['default'](inst);
    
    				inst['default'] = inst;
    
    				exports['default'] = inst;
    				module.exports = exports['default'];
    
    				/***/
    			},
    			/* 3 */
    			/***/
    			function(module, exports) {
    
    				
    
    				exports["default"] = function(obj) {
    					if (obj && obj.__esModule) {
    						return obj;
    					} else {
    						var newObj = {};
    
    						if (obj != null) {
    							for (var key in obj) {
    								if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
    							}
    						}
    
    						newObj["default"] = obj;
    						return newObj;
    					}
    				};
    
    				exports.__esModule = true;
    
    				/***/
    			},
    			/* 4 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				
    
    				var _interopRequireDefault = __webpack_require__(1)['default'];
    
    				exports.__esModule = true;
    				exports.HandlebarsEnvironment = HandlebarsEnvironment;
    
    				var _utils = __webpack_require__(5);
    
    				var _exception = __webpack_require__(6);
    
    				var _exception2 = _interopRequireDefault(_exception);
    
    				var _helpers = __webpack_require__(7);
    
    				var _decorators = __webpack_require__(15);
    
    				var _logger = __webpack_require__(17);
    
    				var _logger2 = _interopRequireDefault(_logger);
    
    				var VERSION = '4.0.5';
    				exports.VERSION = VERSION;
    				var COMPILER_REVISION = 7;
    
    				exports.COMPILER_REVISION = COMPILER_REVISION;
    				var REVISION_CHANGES = {
    					1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
    					2: '== 1.0.0-rc.3',
    					3: '== 1.0.0-rc.4',
    					4: '== 1.x.x',
    					5: '== 2.0.0-alpha.x',
    					6: '>= 2.0.0-beta.1',
    					7: '>= 4.0.0'
    				};
    
    				exports.REVISION_CHANGES = REVISION_CHANGES;
    				var objectType = '[object Object]';
    
    				function HandlebarsEnvironment(helpers, partials, decorators) {
    					this.helpers = helpers || {};
    					this.partials = partials || {};
    					this.decorators = decorators || {};
    
    					_helpers.registerDefaultHelpers(this);
    					_decorators.registerDefaultDecorators(this);
    				}
    
    				HandlebarsEnvironment.prototype = {
    					constructor: HandlebarsEnvironment,
    
    					logger: _logger2['default'],
    					log: _logger2['default'].log,
    
    					registerHelper: function registerHelper(name, fn) {
    						if (_utils.toString.call(name) === objectType) {
    							if (fn) {
    								throw new _exception2['default']('Arg not supported with multiple helpers');
    							}
    							_utils.extend(this.helpers, name);
    						} else {
    							this.helpers[name] = fn;
    						}
    					},
    					unregisterHelper: function unregisterHelper(name) {
    						delete this.helpers[name];
    					},
    
    					registerPartial: function registerPartial(name, partial) {
    						if (_utils.toString.call(name) === objectType) {
    							_utils.extend(this.partials, name);
    						} else {
    							if (typeof partial === 'undefined') {
    								throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
    							}
    							this.partials[name] = partial;
    						}
    					},
    					unregisterPartial: function unregisterPartial(name) {
    						delete this.partials[name];
    					},
    
    					registerDecorator: function registerDecorator(name, fn) {
    						if (_utils.toString.call(name) === objectType) {
    							if (fn) {
    								throw new _exception2['default']('Arg not supported with multiple decorators');
    							}
    							_utils.extend(this.decorators, name);
    						} else {
    							this.decorators[name] = fn;
    						}
    					},
    					unregisterDecorator: function unregisterDecorator(name) {
    						delete this.decorators[name];
    					}
    				};
    
    				var log = _logger2['default'].log;
    
    				exports.log = log;
    				exports.createFrame = _utils.createFrame;
    				exports.logger = _logger2['default'];
    
    				/***/
    			},
    			/* 5 */
    			/***/
    			function(module, exports) {
    
    				
    
    				exports.__esModule = true;
    				exports.extend = extend;
    				exports.indexOf = indexOf;
    				exports.escapeExpression = escapeExpression;
    				exports.isEmpty = isEmpty;
    				exports.createFrame = createFrame;
    				exports.blockParams = blockParams;
    				exports.appendContextPath = appendContextPath;
    				var escape = {
    					'&': '&amp;',
    					'<': '&lt;',
    					'>': '&gt;',
    					'"': '&quot;',
    					"'": '&#x27;',
    					'`': '&#x60;',
    					'=': '&#x3D;'
    				};
    
    				var badChars = /[&<>"'`=]/g,
    					possible = /[&<>"'`=]/;
    
    				function escapeChar(chr) {
    					return escape[chr];
    				}
    
    				function extend(obj /* , ...source */ ) {
    					for (var i = 1; i < arguments.length; i++) {
    						for (var key in arguments[i]) {
    							if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
    								obj[key] = arguments[i][key];
    							}
    						}
    					}
    
    					return obj;
    				}
    
    				var toString = Object.prototype.toString;
    
    				exports.toString = toString;
    				// Sourced from lodash
    				// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
    				/* eslint-disable func-style */
    				var isFunction = function isFunction(value) {
    					return typeof value === 'function';
    				};
    				// fallback for older versions of Chrome and Safari
    				/* istanbul ignore next */
    				if (isFunction(/x/)) {
    					exports.isFunction = isFunction = function(value) {
    						return typeof value === 'function' && toString.call(value) === '[object Function]';
    					};
    				}
    				exports.isFunction = isFunction;
    
    				/* eslint-enable func-style */
    
    				/* istanbul ignore next */
    				var isArray = Array.isArray || function(value) {
    					return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
    				};
    
    				exports.isArray = isArray;
    				// Older IE versions do not directly support indexOf so we must implement our own, sadly.
    
    				function indexOf(array, value) {
    					for (var i = 0, len = array.length; i < len; i++) {
    						if (array[i] === value) {
    							return i;
    						}
    					}
    					return -1;
    				}
    
    				function escapeExpression(string) {
    					if (typeof string !== 'string') {
    						// don't escape SafeStrings, since they're already safe
    						if (string && string.toHTML) {
    							return string.toHTML();
    						} else if (string == null) {
    							return '';
    						} else if (!string) {
    							return string + '';
    						}
    
    						// Force a string conversion as this will be done by the append regardless and
    						// the regex test will do this transparently behind the scenes, causing issues if
    						// an object's to string has escaped characters in it.
    						string = '' + string;
    					}
    
    					if (!possible.test(string)) {
    						return string;
    					}
    					return string.replace(badChars, escapeChar);
    				}
    
    				function isEmpty(value) {
    					if (!value && value !== 0) {
    						return true;
    					} else if (isArray(value) && value.length === 0) {
    						return true;
    					} else {
    						return false;
    					}
    				}
    
    				function createFrame(object) {
    					var frame = extend({}, object);
    					frame._parent = object;
    					return frame;
    				}
    
    				function blockParams(params, ids) {
    					params.path = ids;
    					return params;
    				}
    
    				function appendContextPath(contextPath, id) {
    					return (contextPath ? contextPath + '.' : '') + id;
    				}
    
    				/***/
    			},
    			/* 6 */
    			/***/
    			function(module, exports) {
    
    				
    
    				exports.__esModule = true;
    
    				var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];
    
    				function Exception(message, node) {
    					var loc = node && node.loc,
    						line = undefined,
    						column = undefined;
    					if (loc) {
    						line = loc.start.line;
    						column = loc.start.column;
    
    						message += ' - ' + line + ':' + column;
    					}
    
    					var tmp = Error.prototype.constructor.call(this, message);
    
    					// Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
    					for (var idx = 0; idx < errorProps.length; idx++) {
    						this[errorProps[idx]] = tmp[errorProps[idx]];
    					}
    
    					/* istanbul ignore else */
    					if (Error.captureStackTrace) {
    						Error.captureStackTrace(this, Exception);
    					}
    
    					if (loc) {
    						this.lineNumber = line;
    						this.column = column;
    					}
    				}
    
    				Exception.prototype = new Error();
    
    				exports['default'] = Exception;
    				module.exports = exports['default'];
    
    				/***/
    			},
    			/* 7 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				
    
    				var _interopRequireDefault = __webpack_require__(1)['default'];
    
    				exports.__esModule = true;
    				exports.registerDefaultHelpers = registerDefaultHelpers;
    
    				var _helpersBlockHelperMissing = __webpack_require__(8);
    
    				var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);
    
    				var _helpersEach = __webpack_require__(9);
    
    				var _helpersEach2 = _interopRequireDefault(_helpersEach);
    
    				var _helpersHelperMissing = __webpack_require__(10);
    
    				var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);
    
    				var _helpersIf = __webpack_require__(11);
    
    				var _helpersIf2 = _interopRequireDefault(_helpersIf);
    
    				var _helpersLog = __webpack_require__(12);
    
    				var _helpersLog2 = _interopRequireDefault(_helpersLog);
    
    				var _helpersLookup = __webpack_require__(13);
    
    				var _helpersLookup2 = _interopRequireDefault(_helpersLookup);
    
    				var _helpersWith = __webpack_require__(14);
    
    				var _helpersWith2 = _interopRequireDefault(_helpersWith);
    
    				function registerDefaultHelpers(instance) {
    					_helpersBlockHelperMissing2['default'](instance);
    					_helpersEach2['default'](instance);
    					_helpersHelperMissing2['default'](instance);
    					_helpersIf2['default'](instance);
    					_helpersLog2['default'](instance);
    					_helpersLookup2['default'](instance);
    					_helpersWith2['default'](instance);
    				}
    
    				/***/
    			},
    			/* 8 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				
    
    				exports.__esModule = true;
    
    				var _utils = __webpack_require__(5);
    
    				exports['default'] = function(instance) {
    					instance.registerHelper('blockHelperMissing', function(context, options) {
    						var inverse = options.inverse,
    							fn = options.fn;
    
    						if (context === true) {
    							return fn(this);
    						} else if (context === false || context == null) {
    							return inverse(this);
    						} else if (_utils.isArray(context)) {
    							if (context.length > 0) {
    								if (options.ids) {
    									options.ids = [options.name];
    								}
    
    								return instance.helpers.each(context, options);
    							} else {
    								return inverse(this);
    							}
    						} else {
    							if (options.data && options.ids) {
    								var data = _utils.createFrame(options.data);
    								data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
    								options = {
    									data: data
    								};
    							}
    
    							return fn(context, options);
    						}
    					});
    				};
    
    				module.exports = exports['default'];
    
    				/***/
    			},
    			/* 9 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				
    
    				var _interopRequireDefault = __webpack_require__(1)['default'];
    
    				exports.__esModule = true;
    
    				var _utils = __webpack_require__(5);
    
    				var _exception = __webpack_require__(6);
    
    				var _exception2 = _interopRequireDefault(_exception);
    
    				exports['default'] = function(instance) {
    					instance.registerHelper('each', function(context, options) {
    						if (!options) {
    							throw new _exception2['default']('Must pass iterator to #each');
    						}
    
    						var fn = options.fn,
    							inverse = options.inverse,
    							i = 0,
    							ret = '',
    							data = undefined,
    							contextPath = undefined;
    
    						if (options.data && options.ids) {
    							contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
    						}
    
    						if (_utils.isFunction(context)) {
    							context = context.call(this);
    						}
    
    						if (options.data) {
    							data = _utils.createFrame(options.data);
    						}
    
    						function execIteration(field, index, last) {
    							if (data) {
    								data.key = field;
    								data.index = index;
    								data.first = index === 0;
    								data.last = !!last;
    
    								if (contextPath) {
    									data.contextPath = contextPath + field;
    								}
    							}
    
    							ret = ret + fn(context[field], {
    								data: data,
    								blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
    							});
    						}
    
    						if (context && typeof context === 'object') {
    							if (_utils.isArray(context)) {
    								for (var j = context.length; i < j; i++) {
    									if (i in context) {
    										execIteration(i, i, i === context.length - 1);
    									}
    								}
    							} else {
    								var priorKey = undefined;
    
    								for (var key in context) {
    									if (context.hasOwnProperty(key)) {
    										// We're running the iterations one step out of sync so we can detect
    										// the last iteration without have to scan the object twice and create
    										// an itermediate keys array.
    										if (priorKey !== undefined) {
    											execIteration(priorKey, i - 1);
    										}
    										priorKey = key;
    										i++;
    									}
    								}
    								if (priorKey !== undefined) {
    									execIteration(priorKey, i - 1, true);
    								}
    							}
    						}
    
    						if (i === 0) {
    							ret = inverse(this);
    						}
    
    						return ret;
    					});
    				};
    
    				module.exports = exports['default'];
    
    				/***/
    			},
    			/* 10 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				
    
    				var _interopRequireDefault = __webpack_require__(1)['default'];
    
    				exports.__esModule = true;
    
    				var _exception = __webpack_require__(6);
    
    				var _exception2 = _interopRequireDefault(_exception);
    
    				exports['default'] = function(instance) {
    					instance.registerHelper('helperMissing', function() /* [args, ]options */ {
    						if (arguments.length === 1) {
    							// A missing field in a {{foo}} construct.
    							return undefined;
    						} else {
    							// Someone is actually trying to call something, blow up.
    							throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
    						}
    					});
    				};
    
    				module.exports = exports['default'];
    
    				/***/
    			},
    			/* 11 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				
    
    				exports.__esModule = true;
    
    				var _utils = __webpack_require__(5);
    
    				exports['default'] = function(instance) {
    					instance.registerHelper('if', function(conditional, options) {
    						if (_utils.isFunction(conditional)) {
    							conditional = conditional.call(this);
    						}
    
    						// Default behavior is to render the positive path if the value is truthy and not empty.
    						// The `includeZero` option may be set to treat the condtional as purely not empty based on the
    						// behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
    						if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
    							return options.inverse(this);
    						} else {
    							return options.fn(this);
    						}
    					});
    
    					instance.registerHelper('unless', function(conditional, options) {
    						return instance.helpers['if'].call(this, conditional, {
    							fn: options.inverse,
    							inverse: options.fn,
    							hash: options.hash
    						});
    					});
    				};
    
    				module.exports = exports['default'];
    
    				/***/
    			},
    			/* 12 */
    			/***/
    			function(module, exports) {
    
    				
    
    				exports.__esModule = true;
    
    				exports['default'] = function(instance) {
    					instance.registerHelper('log', function() /* message, options */ {
    						var args = [undefined],
    							options = arguments[arguments.length - 1];
    						for (var i = 0; i < arguments.length - 1; i++) {
    							args.push(arguments[i]);
    						}
    
    						var level = 1;
    						if (options.hash.level != null) {
    							level = options.hash.level;
    						} else if (options.data && options.data.level != null) {
    							level = options.data.level;
    						}
    						args[0] = level;
    
    						instance.log.apply(instance, args);
    					});
    				};
    
    				module.exports = exports['default'];
    
    				/***/
    			},
    			/* 13 */
    			/***/
    			function(module, exports) {
    
    				
    
    				exports.__esModule = true;
    
    				exports['default'] = function(instance) {
    					instance.registerHelper('lookup', function(obj, field) {
    						return obj && obj[field];
    					});
    				};
    
    				module.exports = exports['default'];
    
    				/***/
    			},
    			/* 14 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				
    
    				exports.__esModule = true;
    
    				var _utils = __webpack_require__(5);
    
    				exports['default'] = function(instance) {
    					instance.registerHelper('with', function(context, options) {
    						if (_utils.isFunction(context)) {
    							context = context.call(this);
    						}
    
    						var fn = options.fn;
    
    						if (!_utils.isEmpty(context)) {
    							var data = options.data;
    							if (options.data && options.ids) {
    								data = _utils.createFrame(options.data);
    								data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
    							}
    
    							return fn(context, {
    								data: data,
    								blockParams: _utils.blockParams([context], [data && data.contextPath])
    							});
    						} else {
    							return options.inverse(this);
    						}
    					});
    				};
    
    				module.exports = exports['default'];
    
    				/***/
    			},
    			/* 15 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				
    
    				var _interopRequireDefault = __webpack_require__(1)['default'];
    
    				exports.__esModule = true;
    				exports.registerDefaultDecorators = registerDefaultDecorators;
    
    				var _decoratorsInline = __webpack_require__(16);
    
    				var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);
    
    				function registerDefaultDecorators(instance) {
    					_decoratorsInline2['default'](instance);
    				}
    
    				/***/
    			},
    			/* 16 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				
    
    				exports.__esModule = true;
    
    				var _utils = __webpack_require__(5);
    
    				exports['default'] = function(instance) {
    					instance.registerDecorator('inline', function(fn, props, container, options) {
    						var ret = fn;
    						if (!props.partials) {
    							props.partials = {};
    							ret = function(context, options) {
    								// Create a new partials stack frame prior to exec.
    								var original = container.partials;
    								container.partials = _utils.extend({}, original, props.partials);
    								var ret = fn(context, options);
    								container.partials = original;
    								return ret;
    							};
    						}
    
    						props.partials[options.args[0]] = options.fn;
    
    						return ret;
    					});
    				};
    
    				module.exports = exports['default'];
    
    				/***/
    			},
    			/* 17 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				
    
    				exports.__esModule = true;
    
    				var _utils = __webpack_require__(5);
    
    				var logger = {
    					methodMap: ['debug', 'info', 'warn', 'error'],
    					level: 'info',
    
    					// Maps a given level value to the `methodMap` indexes above.
    					lookupLevel: function lookupLevel(level) {
    						if (typeof level === 'string') {
    							var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
    							if (levelMap >= 0) {
    								level = levelMap;
    							} else {
    								level = parseInt(level, 10);
    							}
    						}
    
    						return level;
    					},
    
    					// Can be overridden in the host environment
    					log: function log(level) {
    						level = logger.lookupLevel(level);
    
    						if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
    							var method = logger.methodMap[level];
    							if (!console[method]) {
    								// eslint-disable-line no-console
    								method = 'log';
    							}
    
    							for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    								message[_key - 1] = arguments[_key];
    							}
    
    							console[method].apply(console, message); // eslint-disable-line no-console
    						}
    					}
    				};
    
    				exports['default'] = logger;
    				module.exports = exports['default'];
    
    				/***/
    			},
    			/* 18 */
    			/***/
    			function(module, exports) {
    
    				// Build out our basic SafeString type
    				
    
    				exports.__esModule = true;
    
    				function SafeString(string) {
    					this.string = string;
    				}
    
    				SafeString.prototype.toString = SafeString.prototype.toHTML = function() {
    					return '' + this.string;
    				};
    
    				exports['default'] = SafeString;
    				module.exports = exports['default'];
    
    				/***/
    			},
    			/* 19 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				
    
    				var _interopRequireWildcard = __webpack_require__(3)['default'];
    
    				var _interopRequireDefault = __webpack_require__(1)['default'];
    
    				exports.__esModule = true;
    				exports.checkRevision = checkRevision;
    				exports.template = template;
    				exports.wrapProgram = wrapProgram;
    				exports.resolvePartial = resolvePartial;
    				exports.invokePartial = invokePartial;
    				exports.noop = noop;
    
    				var _utils = __webpack_require__(5);
    
    				var Utils = _interopRequireWildcard(_utils);
    
    				var _exception = __webpack_require__(6);
    
    				var _exception2 = _interopRequireDefault(_exception);
    
    				var _base = __webpack_require__(4);
    
    				function checkRevision(compilerInfo) {
    					var compilerRevision = compilerInfo && compilerInfo[0] || 1,
    						currentRevision = _base.COMPILER_REVISION;
    
    					if (compilerRevision !== currentRevision) {
    						if (compilerRevision < currentRevision) {
    							var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
    								compilerVersions = _base.REVISION_CHANGES[compilerRevision];
    							throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
    						} else {
    							// Use the embedded version info since the runtime doesn't know about this revision yet
    							throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
    						}
    					}
    				}
    
    				function template(templateSpec, env) {
    					/* istanbul ignore next */
    					if (!env) {
    						throw new _exception2['default']('No environment passed to template');
    					}
    					if (!templateSpec || !templateSpec.main) {
    						throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
    					}
    
    					templateSpec.main.decorator = templateSpec.main_d;
    
    					// Note: Using env.VM references rather than local var references throughout this section to allow
    					// for external users to override these as psuedo-supported APIs.
    					env.VM.checkRevision(templateSpec.compiler);
    
    					function invokePartialWrapper(partial, context, options) {
    						if (options.hash) {
    							context = Utils.extend({}, context, options.hash);
    							if (options.ids) {
    								options.ids[0] = true;
    							}
    						}
    
    						partial = env.VM.resolvePartial.call(this, partial, context, options);
    						var result = env.VM.invokePartial.call(this, partial, context, options);
    
    						if (result == null && env.compile) {
    							options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
    							result = options.partials[options.name](context, options);
    						}
    						if (result != null) {
    							if (options.indent) {
    								var lines = result.split('\n');
    								for (var i = 0, l = lines.length; i < l; i++) {
    									if (!lines[i] && i + 1 === l) {
    										break;
    									}
    
    									lines[i] = options.indent + lines[i];
    								}
    								result = lines.join('\n');
    							}
    							return result;
    						} else {
    							throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
    						}
    					}
    
    					// Just add water
    					var container = {
    						strict: function strict(obj, name) {
    							if (!(name in obj)) {
    								throw new _exception2['default']('"' + name + '" not defined in ' + obj);
    							}
    							return obj[name];
    						},
    						lookup: function lookup(depths, name) {
    							var len = depths.length;
    							for (var i = 0; i < len; i++) {
    								if (depths[i] && depths[i][name] != null) {
    									return depths[i][name];
    								}
    							}
    						},
    						lambda: function lambda(current, context) {
    							return typeof current === 'function' ? current.call(context) : current;
    						},
    
    						escapeExpression: Utils.escapeExpression,
    						invokePartial: invokePartialWrapper,
    
    						fn: function fn(i) {
    							var ret = templateSpec[i];
    							ret.decorator = templateSpec[i + '_d'];
    							return ret;
    						},
    
    						programs: [],
    						program: function program(i, data, declaredBlockParams, blockParams, depths) {
    							var programWrapper = this.programs[i],
    								fn = this.fn(i);
    							if (data || depths || blockParams || declaredBlockParams) {
    								programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
    							} else if (!programWrapper) {
    								programWrapper = this.programs[i] = wrapProgram(this, i, fn);
    							}
    							return programWrapper;
    						},
    
    						data: function data(value, depth) {
    							while (value && depth--) {
    								value = value._parent;
    							}
    							return value;
    						},
    						merge: function merge(param, common) {
    							var obj = param || common;
    
    							if (param && common && param !== common) {
    								obj = Utils.extend({}, common, param);
    							}
    
    							return obj;
    						},
    
    						noop: env.VM.noop,
    						compilerInfo: templateSpec.compiler
    					};
    
    					function ret(context) {
    						var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    
    						var data = options.data;
    
    						ret._setup(options);
    						if (!options.partial && templateSpec.useData) {
    							data = initData(context, data);
    						}
    						var depths = undefined,
    							blockParams = templateSpec.useBlockParams ? [] : undefined;
    						if (templateSpec.useDepths) {
    							if (options.depths) {
    								depths = context !== options.depths[0] ? [context].concat(options.depths) : options.depths;
    							} else {
    								depths = [context];
    							}
    						}
    
    						function main(context /*, options*/ ) {
    							return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
    						}
    						main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
    						return main(context, options);
    					}
    					ret.isTop = true;
    
    					ret._setup = function(options) {
    						if (!options.partial) {
    							container.helpers = container.merge(options.helpers, env.helpers);
    
    							if (templateSpec.usePartial) {
    								container.partials = container.merge(options.partials, env.partials);
    							}
    							if (templateSpec.usePartial || templateSpec.useDecorators) {
    								container.decorators = container.merge(options.decorators, env.decorators);
    							}
    						} else {
    							container.helpers = options.helpers;
    							container.partials = options.partials;
    							container.decorators = options.decorators;
    						}
    					};
    
    					ret._child = function(i, data, blockParams, depths) {
    						if (templateSpec.useBlockParams && !blockParams) {
    							throw new _exception2['default']('must pass block params');
    						}
    						if (templateSpec.useDepths && !depths) {
    							throw new _exception2['default']('must pass parent depths');
    						}
    
    						return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
    					};
    					return ret;
    				}
    
    				function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
    					function prog(context) {
    						var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    
    						var currentDepths = depths;
    						if (depths && context !== depths[0]) {
    							currentDepths = [context].concat(depths);
    						}
    
    						return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
    					}
    
    					prog = executeDecorators(fn, prog, container, depths, data, blockParams);
    
    					prog.program = i;
    					prog.depth = depths ? depths.length : 0;
    					prog.blockParams = declaredBlockParams || 0;
    					return prog;
    				}
    
    				function resolvePartial(partial, context, options) {
    					if (!partial) {
    						if (options.name === '@partial-block') {
    							partial = options.data['partial-block'];
    						} else {
    							partial = options.partials[options.name];
    						}
    					} else if (!partial.call && !options.name) {
    						// This is a dynamic partial that returned a string
    						options.name = partial;
    						partial = options.partials[partial];
    					}
    					return partial;
    				}
    
    				function invokePartial(partial, context, options) {
    					options.partial = true;
    					if (options.ids) {
    						options.data.contextPath = options.ids[0] || options.data.contextPath;
    					}
    
    					var partialBlock = undefined;
    					if (options.fn && options.fn !== noop) {
    						options.data = _base.createFrame(options.data);
    						partialBlock = options.data['partial-block'] = options.fn;
    
    						if (partialBlock.partials) {
    							options.partials = Utils.extend({}, options.partials, partialBlock.partials);
    						}
    					}
    
    					if (partial === undefined && partialBlock) {
    						partial = partialBlock;
    					}
    
    					if (partial === undefined) {
    						throw new _exception2['default']('The partial ' + options.name + ' could not be found');
    					} else if (partial instanceof Function) {
    						return partial(context, options);
    					}
    				}
    
    				function noop() {
    					return '';
    				}
    
    				function initData(context, data) {
    					if (!data || !('root' in data)) {
    						data = data ? _base.createFrame(data) : {};
    						data.root = context;
    					}
    					return data;
    				}
    
    				function executeDecorators(fn, prog, container, depths, data, blockParams) {
    					if (fn.decorator) {
    						var props = {};
    						prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
    						Utils.extend(prog, props);
    					}
    					return prog;
    				}
    
    				/***/
    			},
    			/* 20 */
    			/***/
    			function(module, exports) {
    
    				/* WEBPACK VAR INJECTION */
    				(function(global) { /* global window */
    					
    
    					exports.__esModule = true;
    
    					exports['default'] = function(Handlebars) {
    						/* istanbul ignore next */
    						var root = typeof global !== 'undefined' ? global : window,
    							$Handlebars = root.Handlebars;
    						/* istanbul ignore next */
    						Handlebars.noConflict = function() {
    							if (root.Handlebars === Handlebars) {
    								root.Handlebars = $Handlebars;
    							}
    							return Handlebars;
    						};
    					};
    
    					module.exports = exports['default'];
    					/* WEBPACK VAR INJECTION */
    				}.call(exports, (function() {
    					return this;
    				}())))
    
    				/***/
    			},
    			/* 21 */
    			/***/
    			function(module, exports) {
    
    				
    
    				exports.__esModule = true;
    				var AST = {
    					// Public API used to evaluate derived attributes regarding AST nodes
    					helpers: {
    						// a mustache is definitely a helper if:
    						// * it is an eligible helper, and
    						// * it has at least one parameter or hash segment
    						helperExpression: function helperExpression(node) {
    							return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);
    						},
    
    						scopedId: function scopedId(path) {
    							return (/^\.|this\b/.test(path.original));
    						},
    
    						// an ID is simple if it only has one part, and that part is not
    						// `..` or `this`.
    						simpleId: function simpleId(path) {
    							return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;
    						}
    					}
    				};
    
    				// Must be exported as an object rather than the root of the module as the jison lexer
    				// must modify the object to operate properly.
    				exports['default'] = AST;
    				module.exports = exports['default'];
    
    				/***/
    			},
    			/* 22 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				
    
    				var _interopRequireDefault = __webpack_require__(1)['default'];
    
    				var _interopRequireWildcard = __webpack_require__(3)['default'];
    
    				exports.__esModule = true;
    				exports.parse = parse;
    
    				var _parser = __webpack_require__(23);
    
    				var _parser2 = _interopRequireDefault(_parser);
    
    				var _whitespaceControl = __webpack_require__(24);
    
    				var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);
    
    				var _helpers = __webpack_require__(26);
    
    				var Helpers = _interopRequireWildcard(_helpers);
    
    				var _utils = __webpack_require__(5);
    
    				exports.parser = _parser2['default'];
    
    				var yy = {};
    				_utils.extend(yy, Helpers);
    
    				function parse(input, options) {
    					// Just return if an already-compiled AST was passed in.
    					if (input.type === 'Program') {
    						return input;
    					}
    
    					_parser2['default'].yy = yy;
    
    					// Altering the shared object here, but this is ok as parser is a sync operation
    					yy.locInfo = function(locInfo) {
    						return new yy.SourceLocation(options && options.srcName, locInfo);
    					};
    
    					var strip = new _whitespaceControl2['default'](options);
    					return strip.accept(_parser2['default'].parse(input));
    				}
    
    				/***/
    			},
    			/* 23 */
    			/***/
    			function(module, exports) {
    
    				/* istanbul ignore next */
    				/* Jison generated parser */
    				
    
    				var handlebars = (function() {
    					var parser = {
    						trace: function trace() {},
    						yy: {},
    						symbols_: {
    							"error": 2,
    							"root": 3,
    							"program": 4,
    							"EOF": 5,
    							"program_repetition0": 6,
    							"statement": 7,
    							"mustache": 8,
    							"block": 9,
    							"rawBlock": 10,
    							"partial": 11,
    							"partialBlock": 12,
    							"content": 13,
    							"COMMENT": 14,
    							"CONTENT": 15,
    							"openRawBlock": 16,
    							"rawBlock_repetition_plus0": 17,
    							"END_RAW_BLOCK": 18,
    							"OPEN_RAW_BLOCK": 19,
    							"helperName": 20,
    							"openRawBlock_repetition0": 21,
    							"openRawBlock_option0": 22,
    							"CLOSE_RAW_BLOCK": 23,
    							"openBlock": 24,
    							"block_option0": 25,
    							"closeBlock": 26,
    							"openInverse": 27,
    							"block_option1": 28,
    							"OPEN_BLOCK": 29,
    							"openBlock_repetition0": 30,
    							"openBlock_option0": 31,
    							"openBlock_option1": 32,
    							"CLOSE": 33,
    							"OPEN_INVERSE": 34,
    							"openInverse_repetition0": 35,
    							"openInverse_option0": 36,
    							"openInverse_option1": 37,
    							"openInverseChain": 38,
    							"OPEN_INVERSE_CHAIN": 39,
    							"openInverseChain_repetition0": 40,
    							"openInverseChain_option0": 41,
    							"openInverseChain_option1": 42,
    							"inverseAndProgram": 43,
    							"INVERSE": 44,
    							"inverseChain": 45,
    							"inverseChain_option0": 46,
    							"OPEN_ENDBLOCK": 47,
    							"OPEN": 48,
    							"mustache_repetition0": 49,
    							"mustache_option0": 50,
    							"OPEN_UNESCAPED": 51,
    							"mustache_repetition1": 52,
    							"mustache_option1": 53,
    							"CLOSE_UNESCAPED": 54,
    							"OPEN_PARTIAL": 55,
    							"partialName": 56,
    							"partial_repetition0": 57,
    							"partial_option0": 58,
    							"openPartialBlock": 59,
    							"OPEN_PARTIAL_BLOCK": 60,
    							"openPartialBlock_repetition0": 61,
    							"openPartialBlock_option0": 62,
    							"param": 63,
    							"sexpr": 64,
    							"OPEN_SEXPR": 65,
    							"sexpr_repetition0": 66,
    							"sexpr_option0": 67,
    							"CLOSE_SEXPR": 68,
    							"hash": 69,
    							"hash_repetition_plus0": 70,
    							"hashSegment": 71,
    							"ID": 72,
    							"EQUALS": 73,
    							"blockParams": 74,
    							"OPEN_BLOCK_PARAMS": 75,
    							"blockParams_repetition_plus0": 76,
    							"CLOSE_BLOCK_PARAMS": 77,
    							"path": 78,
    							"dataName": 79,
    							"STRING": 80,
    							"NUMBER": 81,
    							"BOOLEAN": 82,
    							"UNDEFINED": 83,
    							"NULL": 84,
    							"DATA": 85,
    							"pathSegments": 86,
    							"SEP": 87,
    							"$accept": 0,
    							"$end": 1
    						},
    						terminals_: {
    							2: "error",
    							5: "EOF",
    							14: "COMMENT",
    							15: "CONTENT",
    							18: "END_RAW_BLOCK",
    							19: "OPEN_RAW_BLOCK",
    							23: "CLOSE_RAW_BLOCK",
    							29: "OPEN_BLOCK",
    							33: "CLOSE",
    							34: "OPEN_INVERSE",
    							39: "OPEN_INVERSE_CHAIN",
    							44: "INVERSE",
    							47: "OPEN_ENDBLOCK",
    							48: "OPEN",
    							51: "OPEN_UNESCAPED",
    							54: "CLOSE_UNESCAPED",
    							55: "OPEN_PARTIAL",
    							60: "OPEN_PARTIAL_BLOCK",
    							65: "OPEN_SEXPR",
    							68: "CLOSE_SEXPR",
    							72: "ID",
    							73: "EQUALS",
    							75: "OPEN_BLOCK_PARAMS",
    							77: "CLOSE_BLOCK_PARAMS",
    							80: "STRING",
    							81: "NUMBER",
    							82: "BOOLEAN",
    							83: "UNDEFINED",
    							84: "NULL",
    							85: "DATA",
    							87: "SEP"
    						},
    						productions_: [0, [3, 2],
    							[4, 1],
    							[7, 1],
    							[7, 1],
    							[7, 1],
    							[7, 1],
    							[7, 1],
    							[7, 1],
    							[7, 1],
    							[13, 1],
    							[10, 3],
    							[16, 5],
    							[9, 4],
    							[9, 4],
    							[24, 6],
    							[27, 6],
    							[38, 6],
    							[43, 2],
    							[45, 3],
    							[45, 1],
    							[26, 3],
    							[8, 5],
    							[8, 5],
    							[11, 5],
    							[12, 3],
    							[59, 5],
    							[63, 1],
    							[63, 1],
    							[64, 5],
    							[69, 1],
    							[71, 3],
    							[74, 3],
    							[20, 1],
    							[20, 1],
    							[20, 1],
    							[20, 1],
    							[20, 1],
    							[20, 1],
    							[20, 1],
    							[56, 1],
    							[56, 1],
    							[79, 2],
    							[78, 1],
    							[86, 3],
    							[86, 1],
    							[6, 0],
    							[6, 2],
    							[17, 1],
    							[17, 2],
    							[21, 0],
    							[21, 2],
    							[22, 0],
    							[22, 1],
    							[25, 0],
    							[25, 1],
    							[28, 0],
    							[28, 1],
    							[30, 0],
    							[30, 2],
    							[31, 0],
    							[31, 1],
    							[32, 0],
    							[32, 1],
    							[35, 0],
    							[35, 2],
    							[36, 0],
    							[36, 1],
    							[37, 0],
    							[37, 1],
    							[40, 0],
    							[40, 2],
    							[41, 0],
    							[41, 1],
    							[42, 0],
    							[42, 1],
    							[46, 0],
    							[46, 1],
    							[49, 0],
    							[49, 2],
    							[50, 0],
    							[50, 1],
    							[52, 0],
    							[52, 2],
    							[53, 0],
    							[53, 1],
    							[57, 0],
    							[57, 2],
    							[58, 0],
    							[58, 1],
    							[61, 0],
    							[61, 2],
    							[62, 0],
    							[62, 1],
    							[66, 0],
    							[66, 2],
    							[67, 0],
    							[67, 1],
    							[70, 1],
    							[70, 2],
    							[76, 1],
    							[76, 2]
    						],
    						performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$
    							/**/
    						) {
    
    							var $0 = $$.length - 1;
    							switch (yystate) {
    								case 1:
    									return $$[$0 - 1];
    									break;
    								case 2:
    									this.$ = yy.prepareProgram($$[$0]);
    									break;
    								case 3:
    									this.$ = $$[$0];
    									break;
    								case 4:
    									this.$ = $$[$0];
    									break;
    								case 5:
    									this.$ = $$[$0];
    									break;
    								case 6:
    									this.$ = $$[$0];
    									break;
    								case 7:
    									this.$ = $$[$0];
    									break;
    								case 8:
    									this.$ = $$[$0];
    									break;
    								case 9:
    									this.$ = {
    										type: 'CommentStatement',
    										value: yy.stripComment($$[$0]),
    										strip: yy.stripFlags($$[$0], $$[$0]),
    										loc: yy.locInfo(this._$)
    									};
    
    									break;
    								case 10:
    									this.$ = {
    										type: 'ContentStatement',
    										original: $$[$0],
    										value: $$[$0],
    										loc: yy.locInfo(this._$)
    									};
    
    									break;
    								case 11:
    									this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
    									break;
    								case 12:
    									this.$ = {
    										path: $$[$0 - 3],
    										params: $$[$0 - 2],
    										hash: $$[$0 - 1]
    									};
    									break;
    								case 13:
    									this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
    									break;
    								case 14:
    									this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
    									break;
    								case 15:
    									this.$ = {
    										open: $$[$0 - 5],
    										path: $$[$0 - 4],
    										params: $$[$0 - 3],
    										hash: $$[$0 - 2],
    										blockParams: $$[$0 - 1],
    										strip: yy.stripFlags($$[$0 - 5], $$[$0])
    									};
    									break;
    								case 16:
    									this.$ = {
    										path: $$[$0 - 4],
    										params: $$[$0 - 3],
    										hash: $$[$0 - 2],
    										blockParams: $$[$0 - 1],
    										strip: yy.stripFlags($$[$0 - 5], $$[$0])
    									};
    									break;
    								case 17:
    									this.$ = {
    										path: $$[$0 - 4],
    										params: $$[$0 - 3],
    										hash: $$[$0 - 2],
    										blockParams: $$[$0 - 1],
    										strip: yy.stripFlags($$[$0 - 5], $$[$0])
    									};
    									break;
    								case 18:
    									this.$ = {
    										strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]),
    										program: $$[$0]
    									};
    									break;
    								case 19:
    									var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),
    										program = yy.prepareProgram([inverse], $$[$0 - 1].loc);
    									program.chained = true;
    
    									this.$ = {
    										strip: $$[$0 - 2].strip,
    										program: program,
    										chain: true
    									};
    
    									break;
    								case 20:
    									this.$ = $$[$0];
    									break;
    								case 21:
    									this.$ = {
    										path: $$[$0 - 1],
    										strip: yy.stripFlags($$[$0 - 2], $$[$0])
    									};
    									break;
    								case 22:
    									this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
    									break;
    								case 23:
    									this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
    									break;
    								case 24:
    									this.$ = {
    										type: 'PartialStatement',
    										name: $$[$0 - 3],
    										params: $$[$0 - 2],
    										hash: $$[$0 - 1],
    										indent: '',
    										strip: yy.stripFlags($$[$0 - 4], $$[$0]),
    										loc: yy.locInfo(this._$)
    									};
    
    									break;
    								case 25:
    									this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
    									break;
    								case 26:
    									this.$ = {
    										path: $$[$0 - 3],
    										params: $$[$0 - 2],
    										hash: $$[$0 - 1],
    										strip: yy.stripFlags($$[$0 - 4], $$[$0])
    									};
    									break;
    								case 27:
    									this.$ = $$[$0];
    									break;
    								case 28:
    									this.$ = $$[$0];
    									break;
    								case 29:
    									this.$ = {
    										type: 'SubExpression',
    										path: $$[$0 - 3],
    										params: $$[$0 - 2],
    										hash: $$[$0 - 1],
    										loc: yy.locInfo(this._$)
    									};
    
    									break;
    								case 30:
    									this.$ = {
    										type: 'Hash',
    										pairs: $$[$0],
    										loc: yy.locInfo(this._$)
    									};
    									break;
    								case 31:
    									this.$ = {
    										type: 'HashPair',
    										key: yy.id($$[$0 - 2]),
    										value: $$[$0],
    										loc: yy.locInfo(this._$)
    									};
    									break;
    								case 32:
    									this.$ = yy.id($$[$0 - 1]);
    									break;
    								case 33:
    									this.$ = $$[$0];
    									break;
    								case 34:
    									this.$ = $$[$0];
    									break;
    								case 35:
    									this.$ = {
    										type: 'StringLiteral',
    										value: $$[$0],
    										original: $$[$0],
    										loc: yy.locInfo(this._$)
    									};
    									break;
    								case 36:
    									this.$ = {
    										type: 'NumberLiteral',
    										value: Number($$[$0]),
    										original: Number($$[$0]),
    										loc: yy.locInfo(this._$)
    									};
    									break;
    								case 37:
    									this.$ = {
    										type: 'BooleanLiteral',
    										value: $$[$0] === 'true',
    										original: $$[$0] === 'true',
    										loc: yy.locInfo(this._$)
    									};
    									break;
    								case 38:
    									this.$ = {
    										type: 'UndefinedLiteral',
    										original: undefined,
    										value: undefined,
    										loc: yy.locInfo(this._$)
    									};
    									break;
    								case 39:
    									this.$ = {
    										type: 'NullLiteral',
    										original: null,
    										value: null,
    										loc: yy.locInfo(this._$)
    									};
    									break;
    								case 40:
    									this.$ = $$[$0];
    									break;
    								case 41:
    									this.$ = $$[$0];
    									break;
    								case 42:
    									this.$ = yy.preparePath(true, $$[$0], this._$);
    									break;
    								case 43:
    									this.$ = yy.preparePath(false, $$[$0], this._$);
    									break;
    								case 44:
    									$$[$0 - 2].push({
    										part: yy.id($$[$0]),
    										original: $$[$0],
    										separator: $$[$0 - 1]
    									});
    									this.$ = $$[$0 - 2];
    									break;
    								case 45:
    									this.$ = [{
    										part: yy.id($$[$0]),
    										original: $$[$0]
    									}];
    									break;
    								case 46:
    									this.$ = [];
    									break;
    								case 47:
    									$$[$0 - 1].push($$[$0]);
    									break;
    								case 48:
    									this.$ = [$$[$0]];
    									break;
    								case 49:
    									$$[$0 - 1].push($$[$0]);
    									break;
    								case 50:
    									this.$ = [];
    									break;
    								case 51:
    									$$[$0 - 1].push($$[$0]);
    									break;
    								case 58:
    									this.$ = [];
    									break;
    								case 59:
    									$$[$0 - 1].push($$[$0]);
    									break;
    								case 64:
    									this.$ = [];
    									break;
    								case 65:
    									$$[$0 - 1].push($$[$0]);
    									break;
    								case 70:
    									this.$ = [];
    									break;
    								case 71:
    									$$[$0 - 1].push($$[$0]);
    									break;
    								case 78:
    									this.$ = [];
    									break;
    								case 79:
    									$$[$0 - 1].push($$[$0]);
    									break;
    								case 82:
    									this.$ = [];
    									break;
    								case 83:
    									$$[$0 - 1].push($$[$0]);
    									break;
    								case 86:
    									this.$ = [];
    									break;
    								case 87:
    									$$[$0 - 1].push($$[$0]);
    									break;
    								case 90:
    									this.$ = [];
    									break;
    								case 91:
    									$$[$0 - 1].push($$[$0]);
    									break;
    								case 94:
    									this.$ = [];
    									break;
    								case 95:
    									$$[$0 - 1].push($$[$0]);
    									break;
    								case 98:
    									this.$ = [$$[$0]];
    									break;
    								case 99:
    									$$[$0 - 1].push($$[$0]);
    									break;
    								case 100:
    									this.$ = [$$[$0]];
    									break;
    								case 101:
    									$$[$0 - 1].push($$[$0]);
    									break;
    							}
    						},
    						table: [{
    							3: 1,
    							4: 2,
    							5: [2, 46],
    							6: 3,
    							14: [2, 46],
    							15: [2, 46],
    							19: [2, 46],
    							29: [2, 46],
    							34: [2, 46],
    							48: [2, 46],
    							51: [2, 46],
    							55: [2, 46],
    							60: [2, 46]
    						}, {
    							1: [3]
    						}, {
    							5: [1, 4]
    						}, {
    							5: [2, 2],
    							7: 5,
    							8: 6,
    							9: 7,
    							10: 8,
    							11: 9,
    							12: 10,
    							13: 11,
    							14: [1, 12],
    							15: [1, 20],
    							16: 17,
    							19: [1, 23],
    							24: 15,
    							27: 16,
    							29: [1, 21],
    							34: [1, 22],
    							39: [2, 2],
    							44: [2, 2],
    							47: [2, 2],
    							48: [1, 13],
    							51: [1, 14],
    							55: [1, 18],
    							59: 19,
    							60: [1, 24]
    						}, {
    							1: [2, 1]
    						}, {
    							5: [2, 47],
    							14: [2, 47],
    							15: [2, 47],
    							19: [2, 47],
    							29: [2, 47],
    							34: [2, 47],
    							39: [2, 47],
    							44: [2, 47],
    							47: [2, 47],
    							48: [2, 47],
    							51: [2, 47],
    							55: [2, 47],
    							60: [2, 47]
    						}, {
    							5: [2, 3],
    							14: [2, 3],
    							15: [2, 3],
    							19: [2, 3],
    							29: [2, 3],
    							34: [2, 3],
    							39: [2, 3],
    							44: [2, 3],
    							47: [2, 3],
    							48: [2, 3],
    							51: [2, 3],
    							55: [2, 3],
    							60: [2, 3]
    						}, {
    							5: [2, 4],
    							14: [2, 4],
    							15: [2, 4],
    							19: [2, 4],
    							29: [2, 4],
    							34: [2, 4],
    							39: [2, 4],
    							44: [2, 4],
    							47: [2, 4],
    							48: [2, 4],
    							51: [2, 4],
    							55: [2, 4],
    							60: [2, 4]
    						}, {
    							5: [2, 5],
    							14: [2, 5],
    							15: [2, 5],
    							19: [2, 5],
    							29: [2, 5],
    							34: [2, 5],
    							39: [2, 5],
    							44: [2, 5],
    							47: [2, 5],
    							48: [2, 5],
    							51: [2, 5],
    							55: [2, 5],
    							60: [2, 5]
    						}, {
    							5: [2, 6],
    							14: [2, 6],
    							15: [2, 6],
    							19: [2, 6],
    							29: [2, 6],
    							34: [2, 6],
    							39: [2, 6],
    							44: [2, 6],
    							47: [2, 6],
    							48: [2, 6],
    							51: [2, 6],
    							55: [2, 6],
    							60: [2, 6]
    						}, {
    							5: [2, 7],
    							14: [2, 7],
    							15: [2, 7],
    							19: [2, 7],
    							29: [2, 7],
    							34: [2, 7],
    							39: [2, 7],
    							44: [2, 7],
    							47: [2, 7],
    							48: [2, 7],
    							51: [2, 7],
    							55: [2, 7],
    							60: [2, 7]
    						}, {
    							5: [2, 8],
    							14: [2, 8],
    							15: [2, 8],
    							19: [2, 8],
    							29: [2, 8],
    							34: [2, 8],
    							39: [2, 8],
    							44: [2, 8],
    							47: [2, 8],
    							48: [2, 8],
    							51: [2, 8],
    							55: [2, 8],
    							60: [2, 8]
    						}, {
    							5: [2, 9],
    							14: [2, 9],
    							15: [2, 9],
    							19: [2, 9],
    							29: [2, 9],
    							34: [2, 9],
    							39: [2, 9],
    							44: [2, 9],
    							47: [2, 9],
    							48: [2, 9],
    							51: [2, 9],
    							55: [2, 9],
    							60: [2, 9]
    						}, {
    							20: 25,
    							72: [1, 35],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							20: 36,
    							72: [1, 35],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							4: 37,
    							6: 3,
    							14: [2, 46],
    							15: [2, 46],
    							19: [2, 46],
    							29: [2, 46],
    							34: [2, 46],
    							39: [2, 46],
    							44: [2, 46],
    							47: [2, 46],
    							48: [2, 46],
    							51: [2, 46],
    							55: [2, 46],
    							60: [2, 46]
    						}, {
    							4: 38,
    							6: 3,
    							14: [2, 46],
    							15: [2, 46],
    							19: [2, 46],
    							29: [2, 46],
    							34: [2, 46],
    							44: [2, 46],
    							47: [2, 46],
    							48: [2, 46],
    							51: [2, 46],
    							55: [2, 46],
    							60: [2, 46]
    						}, {
    							13: 40,
    							15: [1, 20],
    							17: 39
    						}, {
    							20: 42,
    							56: 41,
    							64: 43,
    							65: [1, 44],
    							72: [1, 35],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							4: 45,
    							6: 3,
    							14: [2, 46],
    							15: [2, 46],
    							19: [2, 46],
    							29: [2, 46],
    							34: [2, 46],
    							47: [2, 46],
    							48: [2, 46],
    							51: [2, 46],
    							55: [2, 46],
    							60: [2, 46]
    						}, {
    							5: [2, 10],
    							14: [2, 10],
    							15: [2, 10],
    							18: [2, 10],
    							19: [2, 10],
    							29: [2, 10],
    							34: [2, 10],
    							39: [2, 10],
    							44: [2, 10],
    							47: [2, 10],
    							48: [2, 10],
    							51: [2, 10],
    							55: [2, 10],
    							60: [2, 10]
    						}, {
    							20: 46,
    							72: [1, 35],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							20: 47,
    							72: [1, 35],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							20: 48,
    							72: [1, 35],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							20: 42,
    							56: 49,
    							64: 43,
    							65: [1, 44],
    							72: [1, 35],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							33: [2, 78],
    							49: 50,
    							65: [2, 78],
    							72: [2, 78],
    							80: [2, 78],
    							81: [2, 78],
    							82: [2, 78],
    							83: [2, 78],
    							84: [2, 78],
    							85: [2, 78]
    						}, {
    							23: [2, 33],
    							33: [2, 33],
    							54: [2, 33],
    							65: [2, 33],
    							68: [2, 33],
    							72: [2, 33],
    							75: [2, 33],
    							80: [2, 33],
    							81: [2, 33],
    							82: [2, 33],
    							83: [2, 33],
    							84: [2, 33],
    							85: [2, 33]
    						}, {
    							23: [2, 34],
    							33: [2, 34],
    							54: [2, 34],
    							65: [2, 34],
    							68: [2, 34],
    							72: [2, 34],
    							75: [2, 34],
    							80: [2, 34],
    							81: [2, 34],
    							82: [2, 34],
    							83: [2, 34],
    							84: [2, 34],
    							85: [2, 34]
    						}, {
    							23: [2, 35],
    							33: [2, 35],
    							54: [2, 35],
    							65: [2, 35],
    							68: [2, 35],
    							72: [2, 35],
    							75: [2, 35],
    							80: [2, 35],
    							81: [2, 35],
    							82: [2, 35],
    							83: [2, 35],
    							84: [2, 35],
    							85: [2, 35]
    						}, {
    							23: [2, 36],
    							33: [2, 36],
    							54: [2, 36],
    							65: [2, 36],
    							68: [2, 36],
    							72: [2, 36],
    							75: [2, 36],
    							80: [2, 36],
    							81: [2, 36],
    							82: [2, 36],
    							83: [2, 36],
    							84: [2, 36],
    							85: [2, 36]
    						}, {
    							23: [2, 37],
    							33: [2, 37],
    							54: [2, 37],
    							65: [2, 37],
    							68: [2, 37],
    							72: [2, 37],
    							75: [2, 37],
    							80: [2, 37],
    							81: [2, 37],
    							82: [2, 37],
    							83: [2, 37],
    							84: [2, 37],
    							85: [2, 37]
    						}, {
    							23: [2, 38],
    							33: [2, 38],
    							54: [2, 38],
    							65: [2, 38],
    							68: [2, 38],
    							72: [2, 38],
    							75: [2, 38],
    							80: [2, 38],
    							81: [2, 38],
    							82: [2, 38],
    							83: [2, 38],
    							84: [2, 38],
    							85: [2, 38]
    						}, {
    							23: [2, 39],
    							33: [2, 39],
    							54: [2, 39],
    							65: [2, 39],
    							68: [2, 39],
    							72: [2, 39],
    							75: [2, 39],
    							80: [2, 39],
    							81: [2, 39],
    							82: [2, 39],
    							83: [2, 39],
    							84: [2, 39],
    							85: [2, 39]
    						}, {
    							23: [2, 43],
    							33: [2, 43],
    							54: [2, 43],
    							65: [2, 43],
    							68: [2, 43],
    							72: [2, 43],
    							75: [2, 43],
    							80: [2, 43],
    							81: [2, 43],
    							82: [2, 43],
    							83: [2, 43],
    							84: [2, 43],
    							85: [2, 43],
    							87: [1, 51]
    						}, {
    							72: [1, 35],
    							86: 52
    						}, {
    							23: [2, 45],
    							33: [2, 45],
    							54: [2, 45],
    							65: [2, 45],
    							68: [2, 45],
    							72: [2, 45],
    							75: [2, 45],
    							80: [2, 45],
    							81: [2, 45],
    							82: [2, 45],
    							83: [2, 45],
    							84: [2, 45],
    							85: [2, 45],
    							87: [2, 45]
    						}, {
    							52: 53,
    							54: [2, 82],
    							65: [2, 82],
    							72: [2, 82],
    							80: [2, 82],
    							81: [2, 82],
    							82: [2, 82],
    							83: [2, 82],
    							84: [2, 82],
    							85: [2, 82]
    						}, {
    							25: 54,
    							38: 56,
    							39: [1, 58],
    							43: 57,
    							44: [1, 59],
    							45: 55,
    							47: [2, 54]
    						}, {
    							28: 60,
    							43: 61,
    							44: [1, 59],
    							47: [2, 56]
    						}, {
    							13: 63,
    							15: [1, 20],
    							18: [1, 62]
    						}, {
    							15: [2, 48],
    							18: [2, 48]
    						}, {
    							33: [2, 86],
    							57: 64,
    							65: [2, 86],
    							72: [2, 86],
    							80: [2, 86],
    							81: [2, 86],
    							82: [2, 86],
    							83: [2, 86],
    							84: [2, 86],
    							85: [2, 86]
    						}, {
    							33: [2, 40],
    							65: [2, 40],
    							72: [2, 40],
    							80: [2, 40],
    							81: [2, 40],
    							82: [2, 40],
    							83: [2, 40],
    							84: [2, 40],
    							85: [2, 40]
    						}, {
    							33: [2, 41],
    							65: [2, 41],
    							72: [2, 41],
    							80: [2, 41],
    							81: [2, 41],
    							82: [2, 41],
    							83: [2, 41],
    							84: [2, 41],
    							85: [2, 41]
    						}, {
    							20: 65,
    							72: [1, 35],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							26: 66,
    							47: [1, 67]
    						}, {
    							30: 68,
    							33: [2, 58],
    							65: [2, 58],
    							72: [2, 58],
    							75: [2, 58],
    							80: [2, 58],
    							81: [2, 58],
    							82: [2, 58],
    							83: [2, 58],
    							84: [2, 58],
    							85: [2, 58]
    						}, {
    							33: [2, 64],
    							35: 69,
    							65: [2, 64],
    							72: [2, 64],
    							75: [2, 64],
    							80: [2, 64],
    							81: [2, 64],
    							82: [2, 64],
    							83: [2, 64],
    							84: [2, 64],
    							85: [2, 64]
    						}, {
    							21: 70,
    							23: [2, 50],
    							65: [2, 50],
    							72: [2, 50],
    							80: [2, 50],
    							81: [2, 50],
    							82: [2, 50],
    							83: [2, 50],
    							84: [2, 50],
    							85: [2, 50]
    						}, {
    							33: [2, 90],
    							61: 71,
    							65: [2, 90],
    							72: [2, 90],
    							80: [2, 90],
    							81: [2, 90],
    							82: [2, 90],
    							83: [2, 90],
    							84: [2, 90],
    							85: [2, 90]
    						}, {
    							20: 75,
    							33: [2, 80],
    							50: 72,
    							63: 73,
    							64: 76,
    							65: [1, 44],
    							69: 74,
    							70: 77,
    							71: 78,
    							72: [1, 79],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							72: [1, 80]
    						}, {
    							23: [2, 42],
    							33: [2, 42],
    							54: [2, 42],
    							65: [2, 42],
    							68: [2, 42],
    							72: [2, 42],
    							75: [2, 42],
    							80: [2, 42],
    							81: [2, 42],
    							82: [2, 42],
    							83: [2, 42],
    							84: [2, 42],
    							85: [2, 42],
    							87: [1, 51]
    						}, {
    							20: 75,
    							53: 81,
    							54: [2, 84],
    							63: 82,
    							64: 76,
    							65: [1, 44],
    							69: 83,
    							70: 77,
    							71: 78,
    							72: [1, 79],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							26: 84,
    							47: [1, 67]
    						}, {
    							47: [2, 55]
    						}, {
    							4: 85,
    							6: 3,
    							14: [2, 46],
    							15: [2, 46],
    							19: [2, 46],
    							29: [2, 46],
    							34: [2, 46],
    							39: [2, 46],
    							44: [2, 46],
    							47: [2, 46],
    							48: [2, 46],
    							51: [2, 46],
    							55: [2, 46],
    							60: [2, 46]
    						}, {
    							47: [2, 20]
    						}, {
    							20: 86,
    							72: [1, 35],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							4: 87,
    							6: 3,
    							14: [2, 46],
    							15: [2, 46],
    							19: [2, 46],
    							29: [2, 46],
    							34: [2, 46],
    							47: [2, 46],
    							48: [2, 46],
    							51: [2, 46],
    							55: [2, 46],
    							60: [2, 46]
    						}, {
    							26: 88,
    							47: [1, 67]
    						}, {
    							47: [2, 57]
    						}, {
    							5: [2, 11],
    							14: [2, 11],
    							15: [2, 11],
    							19: [2, 11],
    							29: [2, 11],
    							34: [2, 11],
    							39: [2, 11],
    							44: [2, 11],
    							47: [2, 11],
    							48: [2, 11],
    							51: [2, 11],
    							55: [2, 11],
    							60: [2, 11]
    						}, {
    							15: [2, 49],
    							18: [2, 49]
    						}, {
    							20: 75,
    							33: [2, 88],
    							58: 89,
    							63: 90,
    							64: 76,
    							65: [1, 44],
    							69: 91,
    							70: 77,
    							71: 78,
    							72: [1, 79],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							65: [2, 94],
    							66: 92,
    							68: [2, 94],
    							72: [2, 94],
    							80: [2, 94],
    							81: [2, 94],
    							82: [2, 94],
    							83: [2, 94],
    							84: [2, 94],
    							85: [2, 94]
    						}, {
    							5: [2, 25],
    							14: [2, 25],
    							15: [2, 25],
    							19: [2, 25],
    							29: [2, 25],
    							34: [2, 25],
    							39: [2, 25],
    							44: [2, 25],
    							47: [2, 25],
    							48: [2, 25],
    							51: [2, 25],
    							55: [2, 25],
    							60: [2, 25]
    						}, {
    							20: 93,
    							72: [1, 35],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							20: 75,
    							31: 94,
    							33: [2, 60],
    							63: 95,
    							64: 76,
    							65: [1, 44],
    							69: 96,
    							70: 77,
    							71: 78,
    							72: [1, 79],
    							75: [2, 60],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							20: 75,
    							33: [2, 66],
    							36: 97,
    							63: 98,
    							64: 76,
    							65: [1, 44],
    							69: 99,
    							70: 77,
    							71: 78,
    							72: [1, 79],
    							75: [2, 66],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							20: 75,
    							22: 100,
    							23: [2, 52],
    							63: 101,
    							64: 76,
    							65: [1, 44],
    							69: 102,
    							70: 77,
    							71: 78,
    							72: [1, 79],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							20: 75,
    							33: [2, 92],
    							62: 103,
    							63: 104,
    							64: 76,
    							65: [1, 44],
    							69: 105,
    							70: 77,
    							71: 78,
    							72: [1, 79],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							33: [1, 106]
    						}, {
    							33: [2, 79],
    							65: [2, 79],
    							72: [2, 79],
    							80: [2, 79],
    							81: [2, 79],
    							82: [2, 79],
    							83: [2, 79],
    							84: [2, 79],
    							85: [2, 79]
    						}, {
    							33: [2, 81]
    						}, {
    							23: [2, 27],
    							33: [2, 27],
    							54: [2, 27],
    							65: [2, 27],
    							68: [2, 27],
    							72: [2, 27],
    							75: [2, 27],
    							80: [2, 27],
    							81: [2, 27],
    							82: [2, 27],
    							83: [2, 27],
    							84: [2, 27],
    							85: [2, 27]
    						}, {
    							23: [2, 28],
    							33: [2, 28],
    							54: [2, 28],
    							65: [2, 28],
    							68: [2, 28],
    							72: [2, 28],
    							75: [2, 28],
    							80: [2, 28],
    							81: [2, 28],
    							82: [2, 28],
    							83: [2, 28],
    							84: [2, 28],
    							85: [2, 28]
    						}, {
    							23: [2, 30],
    							33: [2, 30],
    							54: [2, 30],
    							68: [2, 30],
    							71: 107,
    							72: [1, 108],
    							75: [2, 30]
    						}, {
    							23: [2, 98],
    							33: [2, 98],
    							54: [2, 98],
    							68: [2, 98],
    							72: [2, 98],
    							75: [2, 98]
    						}, {
    							23: [2, 45],
    							33: [2, 45],
    							54: [2, 45],
    							65: [2, 45],
    							68: [2, 45],
    							72: [2, 45],
    							73: [1, 109],
    							75: [2, 45],
    							80: [2, 45],
    							81: [2, 45],
    							82: [2, 45],
    							83: [2, 45],
    							84: [2, 45],
    							85: [2, 45],
    							87: [2, 45]
    						}, {
    							23: [2, 44],
    							33: [2, 44],
    							54: [2, 44],
    							65: [2, 44],
    							68: [2, 44],
    							72: [2, 44],
    							75: [2, 44],
    							80: [2, 44],
    							81: [2, 44],
    							82: [2, 44],
    							83: [2, 44],
    							84: [2, 44],
    							85: [2, 44],
    							87: [2, 44]
    						}, {
    							54: [1, 110]
    						}, {
    							54: [2, 83],
    							65: [2, 83],
    							72: [2, 83],
    							80: [2, 83],
    							81: [2, 83],
    							82: [2, 83],
    							83: [2, 83],
    							84: [2, 83],
    							85: [2, 83]
    						}, {
    							54: [2, 85]
    						}, {
    							5: [2, 13],
    							14: [2, 13],
    							15: [2, 13],
    							19: [2, 13],
    							29: [2, 13],
    							34: [2, 13],
    							39: [2, 13],
    							44: [2, 13],
    							47: [2, 13],
    							48: [2, 13],
    							51: [2, 13],
    							55: [2, 13],
    							60: [2, 13]
    						}, {
    							38: 56,
    							39: [1, 58],
    							43: 57,
    							44: [1, 59],
    							45: 112,
    							46: 111,
    							47: [2, 76]
    						}, {
    							33: [2, 70],
    							40: 113,
    							65: [2, 70],
    							72: [2, 70],
    							75: [2, 70],
    							80: [2, 70],
    							81: [2, 70],
    							82: [2, 70],
    							83: [2, 70],
    							84: [2, 70],
    							85: [2, 70]
    						}, {
    							47: [2, 18]
    						}, {
    							5: [2, 14],
    							14: [2, 14],
    							15: [2, 14],
    							19: [2, 14],
    							29: [2, 14],
    							34: [2, 14],
    							39: [2, 14],
    							44: [2, 14],
    							47: [2, 14],
    							48: [2, 14],
    							51: [2, 14],
    							55: [2, 14],
    							60: [2, 14]
    						}, {
    							33: [1, 114]
    						}, {
    							33: [2, 87],
    							65: [2, 87],
    							72: [2, 87],
    							80: [2, 87],
    							81: [2, 87],
    							82: [2, 87],
    							83: [2, 87],
    							84: [2, 87],
    							85: [2, 87]
    						}, {
    							33: [2, 89]
    						}, {
    							20: 75,
    							63: 116,
    							64: 76,
    							65: [1, 44],
    							67: 115,
    							68: [2, 96],
    							69: 117,
    							70: 77,
    							71: 78,
    							72: [1, 79],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							33: [1, 118]
    						}, {
    							32: 119,
    							33: [2, 62],
    							74: 120,
    							75: [1, 121]
    						}, {
    							33: [2, 59],
    							65: [2, 59],
    							72: [2, 59],
    							75: [2, 59],
    							80: [2, 59],
    							81: [2, 59],
    							82: [2, 59],
    							83: [2, 59],
    							84: [2, 59],
    							85: [2, 59]
    						}, {
    							33: [2, 61],
    							75: [2, 61]
    						}, {
    							33: [2, 68],
    							37: 122,
    							74: 123,
    							75: [1, 121]
    						}, {
    							33: [2, 65],
    							65: [2, 65],
    							72: [2, 65],
    							75: [2, 65],
    							80: [2, 65],
    							81: [2, 65],
    							82: [2, 65],
    							83: [2, 65],
    							84: [2, 65],
    							85: [2, 65]
    						}, {
    							33: [2, 67],
    							75: [2, 67]
    						}, {
    							23: [1, 124]
    						}, {
    							23: [2, 51],
    							65: [2, 51],
    							72: [2, 51],
    							80: [2, 51],
    							81: [2, 51],
    							82: [2, 51],
    							83: [2, 51],
    							84: [2, 51],
    							85: [2, 51]
    						}, {
    							23: [2, 53]
    						}, {
    							33: [1, 125]
    						}, {
    							33: [2, 91],
    							65: [2, 91],
    							72: [2, 91],
    							80: [2, 91],
    							81: [2, 91],
    							82: [2, 91],
    							83: [2, 91],
    							84: [2, 91],
    							85: [2, 91]
    						}, {
    							33: [2, 93]
    						}, {
    							5: [2, 22],
    							14: [2, 22],
    							15: [2, 22],
    							19: [2, 22],
    							29: [2, 22],
    							34: [2, 22],
    							39: [2, 22],
    							44: [2, 22],
    							47: [2, 22],
    							48: [2, 22],
    							51: [2, 22],
    							55: [2, 22],
    							60: [2, 22]
    						}, {
    							23: [2, 99],
    							33: [2, 99],
    							54: [2, 99],
    							68: [2, 99],
    							72: [2, 99],
    							75: [2, 99]
    						}, {
    							73: [1, 109]
    						}, {
    							20: 75,
    							63: 126,
    							64: 76,
    							65: [1, 44],
    							72: [1, 35],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							5: [2, 23],
    							14: [2, 23],
    							15: [2, 23],
    							19: [2, 23],
    							29: [2, 23],
    							34: [2, 23],
    							39: [2, 23],
    							44: [2, 23],
    							47: [2, 23],
    							48: [2, 23],
    							51: [2, 23],
    							55: [2, 23],
    							60: [2, 23]
    						}, {
    							47: [2, 19]
    						}, {
    							47: [2, 77]
    						}, {
    							20: 75,
    							33: [2, 72],
    							41: 127,
    							63: 128,
    							64: 76,
    							65: [1, 44],
    							69: 129,
    							70: 77,
    							71: 78,
    							72: [1, 79],
    							75: [2, 72],
    							78: 26,
    							79: 27,
    							80: [1, 28],
    							81: [1, 29],
    							82: [1, 30],
    							83: [1, 31],
    							84: [1, 32],
    							85: [1, 34],
    							86: 33
    						}, {
    							5: [2, 24],
    							14: [2, 24],
    							15: [2, 24],
    							19: [2, 24],
    							29: [2, 24],
    							34: [2, 24],
    							39: [2, 24],
    							44: [2, 24],
    							47: [2, 24],
    							48: [2, 24],
    							51: [2, 24],
    							55: [2, 24],
    							60: [2, 24]
    						}, {
    							68: [1, 130]
    						}, {
    							65: [2, 95],
    							68: [2, 95],
    							72: [2, 95],
    							80: [2, 95],
    							81: [2, 95],
    							82: [2, 95],
    							83: [2, 95],
    							84: [2, 95],
    							85: [2, 95]
    						}, {
    							68: [2, 97]
    						}, {
    							5: [2, 21],
    							14: [2, 21],
    							15: [2, 21],
    							19: [2, 21],
    							29: [2, 21],
    							34: [2, 21],
    							39: [2, 21],
    							44: [2, 21],
    							47: [2, 21],
    							48: [2, 21],
    							51: [2, 21],
    							55: [2, 21],
    							60: [2, 21]
    						}, {
    							33: [1, 131]
    						}, {
    							33: [2, 63]
    						}, {
    							72: [1, 133],
    							76: 132
    						}, {
    							33: [1, 134]
    						}, {
    							33: [2, 69]
    						}, {
    							15: [2, 12]
    						}, {
    							14: [2, 26],
    							15: [2, 26],
    							19: [2, 26],
    							29: [2, 26],
    							34: [2, 26],
    							47: [2, 26],
    							48: [2, 26],
    							51: [2, 26],
    							55: [2, 26],
    							60: [2, 26]
    						}, {
    							23: [2, 31],
    							33: [2, 31],
    							54: [2, 31],
    							68: [2, 31],
    							72: [2, 31],
    							75: [2, 31]
    						}, {
    							33: [2, 74],
    							42: 135,
    							74: 136,
    							75: [1, 121]
    						}, {
    							33: [2, 71],
    							65: [2, 71],
    							72: [2, 71],
    							75: [2, 71],
    							80: [2, 71],
    							81: [2, 71],
    							82: [2, 71],
    							83: [2, 71],
    							84: [2, 71],
    							85: [2, 71]
    						}, {
    							33: [2, 73],
    							75: [2, 73]
    						}, {
    							23: [2, 29],
    							33: [2, 29],
    							54: [2, 29],
    							65: [2, 29],
    							68: [2, 29],
    							72: [2, 29],
    							75: [2, 29],
    							80: [2, 29],
    							81: [2, 29],
    							82: [2, 29],
    							83: [2, 29],
    							84: [2, 29],
    							85: [2, 29]
    						}, {
    							14: [2, 15],
    							15: [2, 15],
    							19: [2, 15],
    							29: [2, 15],
    							34: [2, 15],
    							39: [2, 15],
    							44: [2, 15],
    							47: [2, 15],
    							48: [2, 15],
    							51: [2, 15],
    							55: [2, 15],
    							60: [2, 15]
    						}, {
    							72: [1, 138],
    							77: [1, 137]
    						}, {
    							72: [2, 100],
    							77: [2, 100]
    						}, {
    							14: [2, 16],
    							15: [2, 16],
    							19: [2, 16],
    							29: [2, 16],
    							34: [2, 16],
    							44: [2, 16],
    							47: [2, 16],
    							48: [2, 16],
    							51: [2, 16],
    							55: [2, 16],
    							60: [2, 16]
    						}, {
    							33: [1, 139]
    						}, {
    							33: [2, 75]
    						}, {
    							33: [2, 32]
    						}, {
    							72: [2, 101],
    							77: [2, 101]
    						}, {
    							14: [2, 17],
    							15: [2, 17],
    							19: [2, 17],
    							29: [2, 17],
    							34: [2, 17],
    							39: [2, 17],
    							44: [2, 17],
    							47: [2, 17],
    							48: [2, 17],
    							51: [2, 17],
    							55: [2, 17],
    							60: [2, 17]
    						}],
    						defaultActions: {
    							4: [2, 1],
    							55: [2, 55],
    							57: [2, 20],
    							61: [2, 57],
    							74: [2, 81],
    							83: [2, 85],
    							87: [2, 18],
    							91: [2, 89],
    							102: [2, 53],
    							105: [2, 93],
    							111: [2, 19],
    							112: [2, 77],
    							117: [2, 97],
    							120: [2, 63],
    							123: [2, 69],
    							124: [2, 12],
    							136: [2, 75],
    							137: [2, 32]
    						},
    						parseError: function parseError(str, hash) {
    							throw new Error(str);
    						},
    						parse: function parse(input) {
    							var self = this,
    								stack = [0],
    								vstack = [null],
    								lstack = [],
    								table = this.table,
    								yytext = "",
    								yylineno = 0,
    								yyleng = 0,
    								recovering = 0,
    								TERROR = 2,
    								EOF = 1;
    							this.lexer.setInput(input);
    							this.lexer.yy = this.yy;
    							this.yy.lexer = this.lexer;
    							this.yy.parser = this;
    							if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
    							var yyloc = this.lexer.yylloc;
    							lstack.push(yyloc);
    							var ranges = this.lexer.options && this.lexer.options.ranges;
    							if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
    
    							function popStack(n) {
    								stack.length = stack.length - 2 * n;
    								vstack.length = vstack.length - n;
    								lstack.length = lstack.length - n;
    							}
    
    							function lex() {
    								var token;
    								token = self.lexer.lex() || 1;
    								if (typeof token !== "number") {
    									token = self.symbols_[token] || token;
    								}
    								return token;
    							}
    							var symbol,
    								preErrorSymbol,
    								state,
    								action,
    								a,
    								r,
    								yyval = {},
    								p,
    								len,
    								newState,
    								expected;
    							while (true) {
    								state = stack[stack.length - 1];
    								if (this.defaultActions[state]) {
    									action = this.defaultActions[state];
    								} else {
    									if (symbol === null || typeof symbol == "undefined") {
    										symbol = lex();
    									}
    									action = table[state] && table[state][symbol];
    								}
    								if (typeof action === "undefined" || !action.length || !action[0]) {
    									var errStr = "";
    									if (!recovering) {
    										expected = [];
    										for (p in table[state])
    											if (this.terminals_[p] && p > 2) {
    												expected.push("'" + this.terminals_[p] + "'");
    											}
    										if (this.lexer.showPosition) {
    											errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
    										} else {
    											errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
    										}
    										this.parseError(errStr, {
    											text: this.lexer.match,
    											token: this.terminals_[symbol] || symbol,
    											line: this.lexer.yylineno,
    											loc: yyloc,
    											expected: expected
    										});
    									}
    								}
    								if (action[0] instanceof Array && action.length > 1) {
    									throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
    								}
    								switch (action[0]) {
    									case 1:
    										stack.push(symbol);
    										vstack.push(this.lexer.yytext);
    										lstack.push(this.lexer.yylloc);
    										stack.push(action[1]);
    										symbol = null;
    										if (!preErrorSymbol) {
    											yyleng = this.lexer.yyleng;
    											yytext = this.lexer.yytext;
    											yylineno = this.lexer.yylineno;
    											yyloc = this.lexer.yylloc;
    											if (recovering > 0) recovering--;
    										} else {
    											symbol = preErrorSymbol;
    											preErrorSymbol = null;
    										}
    										break;
    									case 2:
    										len = this.productions_[action[1]][1];
    										yyval.$ = vstack[vstack.length - len];
    										yyval._$ = {
    											first_line: lstack[lstack.length - (len || 1)].first_line,
    											last_line: lstack[lstack.length - 1].last_line,
    											first_column: lstack[lstack.length - (len || 1)].first_column,
    											last_column: lstack[lstack.length - 1].last_column
    										};
    										if (ranges) {
    											yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
    										}
    										r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
    										if (typeof r !== "undefined") {
    											return r;
    										}
    										if (len) {
    											stack = stack.slice(0, -1 * len * 2);
    											vstack = vstack.slice(0, -1 * len);
    											lstack = lstack.slice(0, -1 * len);
    										}
    										stack.push(this.productions_[action[1]][0]);
    										vstack.push(yyval.$);
    										lstack.push(yyval._$);
    										newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
    										stack.push(newState);
    										break;
    									case 3:
    										return true;
    								}
    							}
    							return true;
    						}
    					};
    					/* Jison generated lexer */
    					var lexer = (function() {
    						var lexer = {
    							EOF: 1,
    							parseError: function parseError(str, hash) {
    								if (this.yy.parser) {
    									this.yy.parser.parseError(str, hash);
    								} else {
    									throw new Error(str);
    								}
    							},
    							setInput: function setInput(input) {
    								this._input = input;
    								this._more = this._less = this.done = false;
    								this.yylineno = this.yyleng = 0;
    								this.yytext = this.matched = this.match = '';
    								this.conditionStack = ['INITIAL'];
    								this.yylloc = {
    									first_line: 1,
    									first_column: 0,
    									last_line: 1,
    									last_column: 0
    								};
    								if (this.options.ranges) this.yylloc.range = [0, 0];
    								this.offset = 0;
    								return this;
    							},
    							input: function input() {
    								var ch = this._input[0];
    								this.yytext += ch;
    								this.yyleng++;
    								this.offset++;
    								this.match += ch;
    								this.matched += ch;
    								var lines = ch.match(/(?:\r\n?|\n).*/g);
    								if (lines) {
    									this.yylineno++;
    									this.yylloc.last_line++;
    								} else {
    									this.yylloc.last_column++;
    								}
    								if (this.options.ranges) this.yylloc.range[1]++;
    
    								this._input = this._input.slice(1);
    								return ch;
    							},
    							unput: function unput(ch) {
    								var len = ch.length;
    								var lines = ch.split(/(?:\r\n?|\n)/g);
    
    								this._input = ch + this._input;
    								this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
    								//this.yyleng -= len;
    								this.offset -= len;
    								var oldLines = this.match.split(/(?:\r\n?|\n)/g);
    								this.match = this.match.substr(0, this.match.length - 1);
    								this.matched = this.matched.substr(0, this.matched.length - 1);
    
    								if (lines.length - 1) this.yylineno -= lines.length - 1;
    								var r = this.yylloc.range;
    
    								this.yylloc = {
    									first_line: this.yylloc.first_line,
    									last_line: this.yylineno + 1,
    									first_column: this.yylloc.first_column,
    									last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
    								};
    
    								if (this.options.ranges) {
    									this.yylloc.range = [r[0], r[0] + this.yyleng - len];
    								}
    								return this;
    							},
    							more: function more() {
    								this._more = true;
    								return this;
    							},
    							less: function less(n) {
    								this.unput(this.match.slice(n));
    							},
    							pastInput: function pastInput() {
    								var past = this.matched.substr(0, this.matched.length - this.match.length);
    								return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
    							},
    							upcomingInput: function upcomingInput() {
    								var next = this.match;
    								if (next.length < 20) {
    									next += this._input.substr(0, 20 - next.length);
    								}
    								return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    							},
    							showPosition: function showPosition() {
    								var pre = this.pastInput();
    								var c = new Array(pre.length + 1).join("-");
    								return pre + this.upcomingInput() + "\n" + c + "^";
    							},
    							next: function next() {
    								if (this.done) {
    									return this.EOF;
    								}
    								if (!this._input) this.done = true;
    
    								var token, match, tempMatch, index, col, lines;
    								if (!this._more) {
    									this.yytext = '';
    									this.match = '';
    								}
    								var rules = this._currentRules();
    								for (var i = 0; i < rules.length; i++) {
    									tempMatch = this._input.match(this.rules[rules[i]]);
    									if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
    										match = tempMatch;
    										index = i;
    										if (!this.options.flex) break;
    									}
    								}
    								if (match) {
    									lines = match[0].match(/(?:\r\n?|\n).*/g);
    									if (lines) this.yylineno += lines.length;
    									this.yylloc = {
    										first_line: this.yylloc.last_line,
    										last_line: this.yylineno + 1,
    										first_column: this.yylloc.last_column,
    										last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
    									};
    									this.yytext += match[0];
    									this.match += match[0];
    									this.matches = match;
    									this.yyleng = this.yytext.length;
    									if (this.options.ranges) {
    										this.yylloc.range = [this.offset, this.offset += this.yyleng];
    									}
    									this._more = false;
    									this._input = this._input.slice(match[0].length);
    									this.matched += match[0];
    									token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
    									if (this.done && this._input) this.done = false;
    									if (token) return token;
    									else return;
    								}
    								if (this._input === "") {
    									return this.EOF;
    								} else {
    									return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
    										text: "",
    										token: null,
    										line: this.yylineno
    									});
    								}
    							},
    							lex: function lex() {
    								var r = this.next();
    								if (typeof r !== 'undefined') {
    									return r;
    								} else {
    									return this.lex();
    								}
    							},
    							begin: function begin(condition) {
    								this.conditionStack.push(condition);
    							},
    							popState: function popState() {
    								return this.conditionStack.pop();
    							},
    							_currentRules: function _currentRules() {
    								return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
    							},
    							topState: function topState() {
    								return this.conditionStack[this.conditionStack.length - 2];
    							},
    							pushState: function begin(condition) {
    								this.begin(condition);
    							}
    						};
    						lexer.options = {};
    						lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START
    							/**/
    						) {
    
    							function strip(start, end) {
    								return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng - end);
    							}
    
    							var YYSTATE = YY_START;
    							switch ($avoiding_name_collisions) {
    								case 0:
    									if (yy_.yytext.slice(-2) === "\\\\") {
    										strip(0, 1);
    										this.begin("mu");
    									} else if (yy_.yytext.slice(-1) === "\\") {
    										strip(0, 1);
    										this.begin("emu");
    									} else {
    										this.begin("mu");
    									}
    									if (yy_.yytext) return 15;
    
    									break;
    								case 1:
    									return 15;
    									break;
    								case 2:
    									this.popState();
    									return 15;
    
    									break;
    								case 3:
    									this.begin('raw');
    									return 15;
    									break;
    								case 4:
    									this.popState();
    									// Should be using `this.topState()` below, but it currently
    									// returns the second top instead of the first top. Opened an
    									// issue about it at https://github.com/zaach/jison/issues/291
    									if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {
    										return 15;
    									} else {
    										yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9);
    										return 'END_RAW_BLOCK';
    									}
    
    									break;
    								case 5:
    									return 15;
    									break;
    								case 6:
    									this.popState();
    									return 14;
    
    									break;
    								case 7:
    									return 65;
    									break;
    								case 8:
    									return 68;
    									break;
    								case 9:
    									return 19;
    									break;
    								case 10:
    									this.popState();
    									this.begin('raw');
    									return 23;
    
    									break;
    								case 11:
    									return 55;
    									break;
    								case 12:
    									return 60;
    									break;
    								case 13:
    									return 29;
    									break;
    								case 14:
    									return 47;
    									break;
    								case 15:
    									this.popState();
    									return 44;
    									break;
    								case 16:
    									this.popState();
    									return 44;
    									break;
    								case 17:
    									return 34;
    									break;
    								case 18:
    									return 39;
    									break;
    								case 19:
    									return 51;
    									break;
    								case 20:
    									return 48;
    									break;
    								case 21:
    									this.unput(yy_.yytext);
    									this.popState();
    									this.begin('com');
    
    									break;
    								case 22:
    									this.popState();
    									return 14;
    
    									break;
    								case 23:
    									return 48;
    									break;
    								case 24:
    									return 73;
    									break;
    								case 25:
    									return 72;
    									break;
    								case 26:
    									return 72;
    									break;
    								case 27:
    									return 87;
    									break;
    								case 28:
    									// ignore whitespace
    									break;
    								case 29:
    									this.popState();
    									return 54;
    									break;
    								case 30:
    									this.popState();
    									return 33;
    									break;
    								case 31:
    									yy_.yytext = strip(1, 2).replace(/\\"/g, '"');
    									return 80;
    									break;
    								case 32:
    									yy_.yytext = strip(1, 2).replace(/\\'/g, "'");
    									return 80;
    									break;
    								case 33:
    									return 85;
    									break;
    								case 34:
    									return 82;
    									break;
    								case 35:
    									return 82;
    									break;
    								case 36:
    									return 83;
    									break;
    								case 37:
    									return 84;
    									break;
    								case 38:
    									return 81;
    									break;
    								case 39:
    									return 75;
    									break;
    								case 40:
    									return 77;
    									break;
    								case 41:
    									return 72;
    									break;
    								case 42:
    									yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, '$1');
    									return 72;
    									break;
    								case 43:
    									return 'INVALID';
    									break;
    								case 44:
    									return 5;
    									break;
    							}
    						};
    						lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]*?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/];
    						lexer.conditions = {
    							"mu": {
    								"rules": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44],
    								"inclusive": false
    							},
    							"emu": {
    								"rules": [2],
    								"inclusive": false
    							},
    							"com": {
    								"rules": [6],
    								"inclusive": false
    							},
    							"raw": {
    								"rules": [3, 4, 5],
    								"inclusive": false
    							},
    							"INITIAL": {
    								"rules": [0, 1, 44],
    								"inclusive": true
    							}
    						};
    						return lexer;
    					})();
    					parser.lexer = lexer;
    
    					function Parser() {
    						this.yy = {};
    					}
    					Parser.prototype = parser;
    					parser.Parser = Parser;
    					return new Parser();
    				})();
    				exports.__esModule = true;
    				exports['default'] = handlebars;
    
    				/***/
    			},
    			/* 24 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				
    
    				var _interopRequireDefault = __webpack_require__(1)['default'];
    
    				exports.__esModule = true;
    
    				var _visitor = __webpack_require__(25);
    
    				var _visitor2 = _interopRequireDefault(_visitor);
    
    				function WhitespaceControl() {
    					var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    
    					this.options = options;
    				}
    				WhitespaceControl.prototype = new _visitor2['default']();
    
    				WhitespaceControl.prototype.Program = function(program) {
    					var doStandalone = !this.options.ignoreStandalone;
    
    					var isRoot = !this.isRootSeen;
    					this.isRootSeen = true;
    
    					var body = program.body;
    					for (var i = 0, l = body.length; i < l; i++) {
    						var current = body[i],
    							strip = this.accept(current);
    
    						if (!strip) {
    							continue;
    						}
    
    						var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),
    							_isNextWhitespace = isNextWhitespace(body, i, isRoot),
    							openStandalone = strip.openStandalone && _isPrevWhitespace,
    							closeStandalone = strip.closeStandalone && _isNextWhitespace,
    							inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;
    
    						if (strip.close) {
    							omitRight(body, i, true);
    						}
    						if (strip.open) {
    							omitLeft(body, i, true);
    						}
    
    						if (doStandalone && inlineStandalone) {
    							omitRight(body, i);
    
    							if (omitLeft(body, i)) {
    								// If we are on a standalone node, save the indent info for partials
    								if (current.type === 'PartialStatement') {
    									// Pull out the whitespace from the final line
    									current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
    								}
    							}
    						}
    						if (doStandalone && openStandalone) {
    							omitRight((current.program || current.inverse).body);
    
    							// Strip out the previous content node if it's whitespace only
    							omitLeft(body, i);
    						}
    						if (doStandalone && closeStandalone) {
    							// Always strip the next node
    							omitRight(body, i);
    
    							omitLeft((current.inverse || current.program).body);
    						}
    					}
    
    					return program;
    				};
    
    				WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function(block) {
    					this.accept(block.program);
    					this.accept(block.inverse);
    
    					// Find the inverse program that is involed with whitespace stripping.
    					var program = block.program || block.inverse,
    						inverse = block.program && block.inverse,
    						firstInverse = inverse,
    						lastInverse = inverse;
    
    					if (inverse && inverse.chained) {
    						firstInverse = inverse.body[0].program;
    
    						// Walk the inverse chain to find the last inverse that is actually in the chain.
    						while (lastInverse.chained) {
    							lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
    						}
    					}
    
    					var strip = {
    						open: block.openStrip.open,
    						close: block.closeStrip.close,
    
    						// Determine the standalone candiacy. Basically flag our content as being possibly standalone
    						// so our parent can determine if we actually are standalone
    						openStandalone: isNextWhitespace(program.body),
    						closeStandalone: isPrevWhitespace((firstInverse || program).body)
    					};
    
    					if (block.openStrip.close) {
    						omitRight(program.body, null, true);
    					}
    
    					if (inverse) {
    						var inverseStrip = block.inverseStrip;
    
    						if (inverseStrip.open) {
    							omitLeft(program.body, null, true);
    						}
    
    						if (inverseStrip.close) {
    							omitRight(firstInverse.body, null, true);
    						}
    						if (block.closeStrip.open) {
    							omitLeft(lastInverse.body, null, true);
    						}
    
    						// Find standalone else statments
    						if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
    							omitLeft(program.body);
    							omitRight(firstInverse.body);
    						}
    					} else if (block.closeStrip.open) {
    						omitLeft(program.body, null, true);
    					}
    
    					return strip;
    				};
    
    				WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function(mustache) {
    					return mustache.strip;
    				};
    
    				WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function(node) {
    					/* istanbul ignore next */
    					var strip = node.strip || {};
    					return {
    						inlineStandalone: true,
    						open: strip.open,
    						close: strip.close
    					};
    				};
    
    				function isPrevWhitespace(body, i, isRoot) {
    					if (i === undefined) {
    						i = body.length;
    					}
    
    					// Nodes that end with newlines are considered whitespace (but are special
    					// cased for strip operations)
    					var prev = body[i - 1],
    						sibling = body[i - 2];
    					if (!prev) {
    						return isRoot;
    					}
    
    					if (prev.type === 'ContentStatement') {
    						return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
    					}
    				}
    
    				function isNextWhitespace(body, i, isRoot) {
    					if (i === undefined) {
    						i = -1;
    					}
    
    					var next = body[i + 1],
    						sibling = body[i + 2];
    					if (!next) {
    						return isRoot;
    					}
    
    					if (next.type === 'ContentStatement') {
    						return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
    					}
    				}
    
    				// Marks the node to the right of the position as omitted.
    				// I.e. {{foo}}' ' will mark the ' ' node as omitted.
    				//
    				// If i is undefined, then the first child will be marked as such.
    				//
    				// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
    				// content is met.
    				function omitRight(body, i, multiple) {
    					var current = body[i == null ? 0 : i + 1];
    					if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {
    						return;
    					}
    
    					var original = current.value;
    					current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, '');
    					current.rightStripped = current.value !== original;
    				}
    
    				// Marks the node to the left of the position as omitted.
    				// I.e. ' '{{foo}} will mark the ' ' node as omitted.
    				//
    				// If i is undefined then the last child will be marked as such.
    				//
    				// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
    				// content is met.
    				function omitLeft(body, i, multiple) {
    					var current = body[i == null ? body.length - 1 : i - 1];
    					if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {
    						return;
    					}
    
    					// We omit the last node if it's whitespace only and not preceeded by a non-content node.
    					var original = current.value;
    					current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, '');
    					current.leftStripped = current.value !== original;
    					return current.leftStripped;
    				}
    
    				exports['default'] = WhitespaceControl;
    				module.exports = exports['default'];
    
    				/***/
    			},
    			/* 25 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				
    
    				var _interopRequireDefault = __webpack_require__(1)['default'];
    
    				exports.__esModule = true;
    
    				var _exception = __webpack_require__(6);
    
    				var _exception2 = _interopRequireDefault(_exception);
    
    				function Visitor() {
    					this.parents = [];
    				}
    
    				Visitor.prototype = {
    					constructor: Visitor,
    					mutating: false,
    
    					// Visits a given value. If mutating, will replace the value if necessary.
    					acceptKey: function acceptKey(node, name) {
    						var value = this.accept(node[name]);
    						if (this.mutating) {
    							// Hacky sanity check: This may have a few false positives for type for the helper
    							// methods but will generally do the right thing without a lot of overhead.
    							if (value && !Visitor.prototype[value.type]) {
    								throw new _exception2['default']('Unexpected node type "' + value.type + '" found when accepting ' + name + ' on ' + node.type);
    							}
    							node[name] = value;
    						}
    					},
    
    					// Performs an accept operation with added sanity check to ensure
    					// required keys are not removed.
    					acceptRequired: function acceptRequired(node, name) {
    						this.acceptKey(node, name);
    
    						if (!node[name]) {
    							throw new _exception2['default'](node.type + ' requires ' + name);
    						}
    					},
    
    					// Traverses a given array. If mutating, empty respnses will be removed
    					// for child elements.
    					acceptArray: function acceptArray(array) {
    						for (var i = 0, l = array.length; i < l; i++) {
    							this.acceptKey(array, i);
    
    							if (!array[i]) {
    								array.splice(i, 1);
    								i--;
    								l--;
    							}
    						}
    					},
    
    					accept: function accept(object) {
    						if (!object) {
    							return;
    						}
    
    						/* istanbul ignore next: Sanity code */
    						if (!this[object.type]) {
    							throw new _exception2['default']('Unknown type: ' + object.type, object);
    						}
    
    						if (this.current) {
    							this.parents.unshift(this.current);
    						}
    						this.current = object;
    
    						var ret = this[object.type](object);
    
    						this.current = this.parents.shift();
    
    						if (!this.mutating || ret) {
    							return ret;
    						} else if (ret !== false) {
    							return object;
    						}
    					},
    
    					Program: function Program(program) {
    						this.acceptArray(program.body);
    					},
    
    					MustacheStatement: visitSubExpression,
    					Decorator: visitSubExpression,
    
    					BlockStatement: visitBlock,
    					DecoratorBlock: visitBlock,
    
    					PartialStatement: visitPartial,
    					PartialBlockStatement: function PartialBlockStatement(partial) {
    						visitPartial.call(this, partial);
    
    						this.acceptKey(partial, 'program');
    					},
    
    					ContentStatement: function ContentStatement() /* content */ {},
    					CommentStatement: function CommentStatement() /* comment */ {},
    
    					SubExpression: visitSubExpression,
    
    					PathExpression: function PathExpression() /* path */ {},
    
    					StringLiteral: function StringLiteral() /* string */ {},
    					NumberLiteral: function NumberLiteral() /* number */ {},
    					BooleanLiteral: function BooleanLiteral() /* bool */ {},
    					UndefinedLiteral: function UndefinedLiteral() /* literal */ {},
    					NullLiteral: function NullLiteral() /* literal */ {},
    
    					Hash: function Hash(hash) {
    						this.acceptArray(hash.pairs);
    					},
    					HashPair: function HashPair(pair) {
    						this.acceptRequired(pair, 'value');
    					}
    				};
    
    				function visitSubExpression(mustache) {
    					this.acceptRequired(mustache, 'path');
    					this.acceptArray(mustache.params);
    					this.acceptKey(mustache, 'hash');
    				}
    
    				function visitBlock(block) {
    					visitSubExpression.call(this, block);
    
    					this.acceptKey(block, 'program');
    					this.acceptKey(block, 'inverse');
    				}
    
    				function visitPartial(partial) {
    					this.acceptRequired(partial, 'name');
    					this.acceptArray(partial.params);
    					this.acceptKey(partial, 'hash');
    				}
    
    				exports['default'] = Visitor;
    				module.exports = exports['default'];
    
    				/***/
    			},
    			/* 26 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				
    
    				var _interopRequireDefault = __webpack_require__(1)['default'];
    
    				exports.__esModule = true;
    				exports.SourceLocation = SourceLocation;
    				exports.id = id;
    				exports.stripFlags = stripFlags;
    				exports.stripComment = stripComment;
    				exports.preparePath = preparePath;
    				exports.prepareMustache = prepareMustache;
    				exports.prepareRawBlock = prepareRawBlock;
    				exports.prepareBlock = prepareBlock;
    				exports.prepareProgram = prepareProgram;
    				exports.preparePartialBlock = preparePartialBlock;
    
    				var _exception = __webpack_require__(6);
    
    				var _exception2 = _interopRequireDefault(_exception);
    
    				function validateClose(open, close) {
    					close = close.path ? close.path.original : close;
    
    					if (open.path.original !== close) {
    						var errorNode = {
    							loc: open.path.loc
    						};
    
    						throw new _exception2['default'](open.path.original + " doesn't match " + close, errorNode);
    					}
    				}
    
    				function SourceLocation(source, locInfo) {
    					this.source = source;
    					this.start = {
    						line: locInfo.first_line,
    						column: locInfo.first_column
    					};
    					this.end = {
    						line: locInfo.last_line,
    						column: locInfo.last_column
    					};
    				}
    
    				function id(token) {
    					if (/^\[.*\]$/.test(token)) {
    						return token.substr(1, token.length - 2);
    					} else {
    						return token;
    					}
    				}
    
    				function stripFlags(open, close) {
    					return {
    						open: open.charAt(2) === '~',
    						close: close.charAt(close.length - 3) === '~'
    					};
    				}
    
    				function stripComment(comment) {
    					return comment.replace(/^\{\{~?\!-?-?/, '').replace(/-?-?~?\}\}$/, '');
    				}
    
    				function preparePath(data, parts, loc) {
    					loc = this.locInfo(loc);
    
    					var original = data ? '@' : '',
    						dig = [],
    						depth = 0,
    						depthString = '';
    
    					for (var i = 0, l = parts.length; i < l; i++) {
    						var part = parts[i].part,
    
    							// If we have [] syntax then we do not treat path references as operators,
    							// i.e. foo.[this] resolves to approximately context.foo['this']
    							isLiteral = parts[i].original !== part;
    						original += (parts[i].separator || '') + part;
    
    						if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {
    							if (dig.length > 0) {
    								throw new _exception2['default']('Invalid path: ' + original, {
    									loc: loc
    								});
    							} else if (part === '..') {
    								depth++;
    								depthString += '../';
    							}
    						} else {
    							dig.push(part);
    						}
    					}
    
    					return {
    						type: 'PathExpression',
    						data: data,
    						depth: depth,
    						parts: dig,
    						original: original,
    						loc: loc
    					};
    				}
    
    				function prepareMustache(path, params, hash, open, strip, locInfo) {
    					// Must use charAt to support IE pre-10
    					var escapeFlag = open.charAt(3) || open.charAt(2),
    						escaped = escapeFlag !== '{' && escapeFlag !== '&';
    
    					var decorator = /\*/.test(open);
    					return {
    						type: decorator ? 'Decorator' : 'MustacheStatement',
    						path: path,
    						params: params,
    						hash: hash,
    						escaped: escaped,
    						strip: strip,
    						loc: this.locInfo(locInfo)
    					};
    				}
    
    				function prepareRawBlock(openRawBlock, contents, close, locInfo) {
    					validateClose(openRawBlock, close);
    
    					locInfo = this.locInfo(locInfo);
    					var program = {
    						type: 'Program',
    						body: contents,
    						strip: {},
    						loc: locInfo
    					};
    
    					return {
    						type: 'BlockStatement',
    						path: openRawBlock.path,
    						params: openRawBlock.params,
    						hash: openRawBlock.hash,
    						program: program,
    						openStrip: {},
    						inverseStrip: {},
    						closeStrip: {},
    						loc: locInfo
    					};
    				}
    
    				function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
    					if (close && close.path) {
    						validateClose(openBlock, close);
    					}
    
    					var decorator = /\*/.test(openBlock.open);
    
    					program.blockParams = openBlock.blockParams;
    
    					var inverse = undefined,
    						inverseStrip = undefined;
    
    					if (inverseAndProgram) {
    						if (decorator) {
    							throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);
    						}
    
    						if (inverseAndProgram.chain) {
    							inverseAndProgram.program.body[0].closeStrip = close.strip;
    						}
    
    						inverseStrip = inverseAndProgram.strip;
    						inverse = inverseAndProgram.program;
    					}
    
    					if (inverted) {
    						inverted = inverse;
    						inverse = program;
    						program = inverted;
    					}
    
    					return {
    						type: decorator ? 'DecoratorBlock' : 'BlockStatement',
    						path: openBlock.path,
    						params: openBlock.params,
    						hash: openBlock.hash,
    						program: program,
    						inverse: inverse,
    						openStrip: openBlock.strip,
    						inverseStrip: inverseStrip,
    						closeStrip: close && close.strip,
    						loc: this.locInfo(locInfo)
    					};
    				}
    
    				function prepareProgram(statements, loc) {
    					if (!loc && statements.length) {
    						var firstLoc = statements[0].loc,
    							lastLoc = statements[statements.length - 1].loc;
    
    						/* istanbul ignore else */
    						if (firstLoc && lastLoc) {
    							loc = {
    								source: firstLoc.source,
    								start: {
    									line: firstLoc.start.line,
    									column: firstLoc.start.column
    								},
    								end: {
    									line: lastLoc.end.line,
    									column: lastLoc.end.column
    								}
    							};
    						}
    					}
    
    					return {
    						type: 'Program',
    						body: statements,
    						strip: {},
    						loc: loc
    					};
    				}
    
    				function preparePartialBlock(open, program, close, locInfo) {
    					validateClose(open, close);
    
    					return {
    						type: 'PartialBlockStatement',
    						name: open.path,
    						params: open.params,
    						hash: open.hash,
    						program: program,
    						openStrip: open.strip,
    						closeStrip: close && close.strip,
    						loc: this.locInfo(locInfo)
    					};
    				}
    
    				/***/
    			},
    			/* 27 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				/* eslint-disable new-cap */
    
    				
    
    				var _interopRequireDefault = __webpack_require__(1)['default'];
    
    				exports.__esModule = true;
    				exports.Compiler = Compiler;
    				exports.precompile = precompile;
    				exports.compile = compile;
    
    				var _exception = __webpack_require__(6);
    
    				var _exception2 = _interopRequireDefault(_exception);
    
    				var _utils = __webpack_require__(5);
    
    				var _ast = __webpack_require__(21);
    
    				var _ast2 = _interopRequireDefault(_ast);
    
    				var slice = [].slice;
    
    				function Compiler() {}
    
    				// the foundHelper register will disambiguate helper lookup from finding a
    				// function in a context. This is necessary for mustache compatibility, which
    				// requires that context functions in blocks are evaluated by blockHelperMissing,
    				// and then proceed as if the resulting value was provided to blockHelperMissing.
    
    				Compiler.prototype = {
    					compiler: Compiler,
    
    					equals: function equals(other) {
    						var len = this.opcodes.length;
    						if (other.opcodes.length !== len) {
    							return false;
    						}
    
    						for (var i = 0; i < len; i++) {
    							var opcode = this.opcodes[i],
    								otherOpcode = other.opcodes[i];
    							if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
    								return false;
    							}
    						}
    
    						// We know that length is the same between the two arrays because they are directly tied
    						// to the opcode behavior above.
    						len = this.children.length;
    						for (var i = 0; i < len; i++) {
    							if (!this.children[i].equals(other.children[i])) {
    								return false;
    							}
    						}
    
    						return true;
    					},
    
    					guid: 0,
    
    					compile: function compile(program, options) {
    						this.sourceNode = [];
    						this.opcodes = [];
    						this.children = [];
    						this.options = options;
    						this.stringParams = options.stringParams;
    						this.trackIds = options.trackIds;
    
    						options.blockParams = options.blockParams || [];
    
    						// These changes will propagate to the other compiler components
    						var knownHelpers = options.knownHelpers;
    						options.knownHelpers = {
    							'helperMissing': true,
    							'blockHelperMissing': true,
    							'each': true,
    							'if': true,
    							'unless': true,
    							'with': true,
    							'log': true,
    							'lookup': true
    						};
    						if (knownHelpers) {
    							for (var _name in knownHelpers) {
    								/* istanbul ignore else */
    								if (_name in knownHelpers) {
    									options.knownHelpers[_name] = knownHelpers[_name];
    								}
    							}
    						}
    
    						return this.accept(program);
    					},
    
    					compileProgram: function compileProgram(program) {
    						var childCompiler = new this.compiler(),
    							// eslint-disable-line new-cap
    							result = childCompiler.compile(program, this.options),
    							guid = this.guid++;
    
    						this.usePartial = this.usePartial || result.usePartial;
    
    						this.children[guid] = result;
    						this.useDepths = this.useDepths || result.useDepths;
    
    						return guid;
    					},
    
    					accept: function accept(node) {
    						/* istanbul ignore next: Sanity code */
    						if (!this[node.type]) {
    							throw new _exception2['default']('Unknown type: ' + node.type, node);
    						}
    
    						this.sourceNode.unshift(node);
    						var ret = this[node.type](node);
    						this.sourceNode.shift();
    						return ret;
    					},
    
    					Program: function Program(program) {
    						this.options.blockParams.unshift(program.blockParams);
    
    						var body = program.body,
    							bodyLength = body.length;
    						for (var i = 0; i < bodyLength; i++) {
    							this.accept(body[i]);
    						}
    
    						this.options.blockParams.shift();
    
    						this.isSimple = bodyLength === 1;
    						this.blockParams = program.blockParams ? program.blockParams.length : 0;
    
    						return this;
    					},
    
    					BlockStatement: function BlockStatement(block) {
    						transformLiteralToPath(block);
    
    						var program = block.program,
    							inverse = block.inverse;
    
    						program = program && this.compileProgram(program);
    						inverse = inverse && this.compileProgram(inverse);
    
    						var type = this.classifySexpr(block);
    
    						if (type === 'helper') {
    							this.helperSexpr(block, program, inverse);
    						} else if (type === 'simple') {
    							this.simpleSexpr(block);
    
    							// now that the simple mustache is resolved, we need to
    							// evaluate it by executing `blockHelperMissing`
    							this.opcode('pushProgram', program);
    							this.opcode('pushProgram', inverse);
    							this.opcode('emptyHash');
    							this.opcode('blockValue', block.path.original);
    						} else {
    							this.ambiguousSexpr(block, program, inverse);
    
    							// now that the simple mustache is resolved, we need to
    							// evaluate it by executing `blockHelperMissing`
    							this.opcode('pushProgram', program);
    							this.opcode('pushProgram', inverse);
    							this.opcode('emptyHash');
    							this.opcode('ambiguousBlockValue');
    						}
    
    						this.opcode('append');
    					},
    
    					DecoratorBlock: function DecoratorBlock(decorator) {
    						var program = decorator.program && this.compileProgram(decorator.program);
    						var params = this.setupFullMustacheParams(decorator, program, undefined),
    							path = decorator.path;
    
    						this.useDecorators = true;
    						this.opcode('registerDecorator', params.length, path.original);
    					},
    
    					PartialStatement: function PartialStatement(partial) {
    						this.usePartial = true;
    
    						var program = partial.program;
    						if (program) {
    							program = this.compileProgram(partial.program);
    						}
    
    						var params = partial.params;
    						if (params.length > 1) {
    							throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);
    						} else if (!params.length) {
    							if (this.options.explicitPartialContext) {
    								this.opcode('pushLiteral', 'undefined');
    							} else {
    								params.push({
    									type: 'PathExpression',
    									parts: [],
    									depth: 0
    								});
    							}
    						}
    
    						var partialName = partial.name.original,
    							isDynamic = partial.name.type === 'SubExpression';
    						if (isDynamic) {
    							this.accept(partial.name);
    						}
    
    						this.setupFullMustacheParams(partial, program, undefined, true);
    
    						var indent = partial.indent || '';
    						if (this.options.preventIndent && indent) {
    							this.opcode('appendContent', indent);
    							indent = '';
    						}
    
    						this.opcode('invokePartial', isDynamic, partialName, indent);
    						this.opcode('append');
    					},
    					PartialBlockStatement: function PartialBlockStatement(partialBlock) {
    						this.PartialStatement(partialBlock);
    					},
    
    					MustacheStatement: function MustacheStatement(mustache) {
    						this.SubExpression(mustache);
    
    						if (mustache.escaped && !this.options.noEscape) {
    							this.opcode('appendEscaped');
    						} else {
    							this.opcode('append');
    						}
    					},
    					Decorator: function Decorator(decorator) {
    						this.DecoratorBlock(decorator);
    					},
    
    					ContentStatement: function ContentStatement(content) {
    						if (content.value) {
    							this.opcode('appendContent', content.value);
    						}
    					},
    
    					CommentStatement: function CommentStatement() {},
    
    					SubExpression: function SubExpression(sexpr) {
    						transformLiteralToPath(sexpr);
    						var type = this.classifySexpr(sexpr);
    
    						if (type === 'simple') {
    							this.simpleSexpr(sexpr);
    						} else if (type === 'helper') {
    							this.helperSexpr(sexpr);
    						} else {
    							this.ambiguousSexpr(sexpr);
    						}
    					},
    					ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
    						var path = sexpr.path,
    							name = path.parts[0],
    							isBlock = program != null || inverse != null;
    
    						this.opcode('getContext', path.depth);
    
    						this.opcode('pushProgram', program);
    						this.opcode('pushProgram', inverse);
    
    						path.strict = true;
    						this.accept(path);
    
    						this.opcode('invokeAmbiguous', name, isBlock);
    					},
    
    					simpleSexpr: function simpleSexpr(sexpr) {
    						var path = sexpr.path;
    						path.strict = true;
    						this.accept(path);
    						this.opcode('resolvePossibleLambda');
    					},
    
    					helperSexpr: function helperSexpr(sexpr, program, inverse) {
    						var params = this.setupFullMustacheParams(sexpr, program, inverse),
    							path = sexpr.path,
    							name = path.parts[0];
    
    						if (this.options.knownHelpers[name]) {
    							this.opcode('invokeKnownHelper', params.length, name);
    						} else if (this.options.knownHelpersOnly) {
    							throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);
    						} else {
    							path.strict = true;
    							path.falsy = true;
    
    							this.accept(path);
    							this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));
    						}
    					},
    
    					PathExpression: function PathExpression(path) {
    						this.addDepth(path.depth);
    						this.opcode('getContext', path.depth);
    
    						var name = path.parts[0],
    							scoped = _ast2['default'].helpers.scopedId(path),
    							blockParamId = !path.depth && !scoped && this.blockParamIndex(name);
    
    						if (blockParamId) {
    							this.opcode('lookupBlockParam', blockParamId, path.parts);
    						} else if (!name) {
    							// Context reference, i.e. `{{foo .}}` or `{{foo ..}}`
    							this.opcode('pushContext');
    						} else if (path.data) {
    							this.options.data = true;
    							this.opcode('lookupData', path.depth, path.parts, path.strict);
    						} else {
    							this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);
    						}
    					},
    
    					StringLiteral: function StringLiteral(string) {
    						this.opcode('pushString', string.value);
    					},
    
    					NumberLiteral: function NumberLiteral(number) {
    						this.opcode('pushLiteral', number.value);
    					},
    
    					BooleanLiteral: function BooleanLiteral(bool) {
    						this.opcode('pushLiteral', bool.value);
    					},
    
    					UndefinedLiteral: function UndefinedLiteral() {
    						this.opcode('pushLiteral', 'undefined');
    					},
    
    					NullLiteral: function NullLiteral() {
    						this.opcode('pushLiteral', 'null');
    					},
    
    					Hash: function Hash(hash) {
    						var pairs = hash.pairs,
    							i = 0,
    							l = pairs.length;
    
    						this.opcode('pushHash');
    
    						for (; i < l; i++) {
    							this.pushParam(pairs[i].value);
    						}
    						while (i--) {
    							this.opcode('assignToHash', pairs[i].key);
    						}
    						this.opcode('popHash');
    					},
    
    					// HELPERS
    					opcode: function opcode(name) {
    						this.opcodes.push({
    							opcode: name,
    							args: slice.call(arguments, 1),
    							loc: this.sourceNode[0].loc
    						});
    					},
    
    					addDepth: function addDepth(depth) {
    						if (!depth) {
    							return;
    						}
    
    						this.useDepths = true;
    					},
    
    					classifySexpr: function classifySexpr(sexpr) {
    						var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);
    
    						var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);
    
    						// a mustache is an eligible helper if:
    						// * its id is simple (a single part, not `this` or `..`)
    						var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);
    
    						// if a mustache is an eligible helper but not a definite
    						// helper, it is ambiguous, and will be resolved in a later
    						// pass or at runtime.
    						var isEligible = !isBlockParam && (isHelper || isSimple);
    
    						// if ambiguous, we can possibly resolve the ambiguity now
    						// An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.
    						if (isEligible && !isHelper) {
    							var _name2 = sexpr.path.parts[0],
    								options = this.options;
    
    							if (options.knownHelpers[_name2]) {
    								isHelper = true;
    							} else if (options.knownHelpersOnly) {
    								isEligible = false;
    							}
    						}
    
    						if (isHelper) {
    							return 'helper';
    						} else if (isEligible) {
    							return 'ambiguous';
    						} else {
    							return 'simple';
    						}
    					},
    
    					pushParams: function pushParams(params) {
    						for (var i = 0, l = params.length; i < l; i++) {
    							this.pushParam(params[i]);
    						}
    					},
    
    					pushParam: function pushParam(val) {
    						var value = val.value != null ? val.value : val.original || '';
    
    						if (this.stringParams) {
    							if (value.replace) {
    								value = value.replace(/^(\.?\.\/)*/g, '').replace(/\//g, '.');
    							}
    
    							if (val.depth) {
    								this.addDepth(val.depth);
    							}
    							this.opcode('getContext', val.depth || 0);
    							this.opcode('pushStringParam', value, val.type);
    
    							if (val.type === 'SubExpression') {
    								// SubExpressions get evaluated and passed in
    								// in string params mode.
    								this.accept(val);
    							}
    						} else {
    							if (this.trackIds) {
    								var blockParamIndex = undefined;
    								if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {
    									blockParamIndex = this.blockParamIndex(val.parts[0]);
    								}
    								if (blockParamIndex) {
    									var blockParamChild = val.parts.slice(1).join('.');
    									this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);
    								} else {
    									value = val.original || value;
    									if (value.replace) {
    										value = value.replace(/^this(?:\.|$)/, '').replace(/^\.\//, '').replace(/^\.$/, '');
    									}
    
    									this.opcode('pushId', val.type, value);
    								}
    							}
    							this.accept(val);
    						}
    					},
    
    					setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
    						var params = sexpr.params;
    						this.pushParams(params);
    
    						this.opcode('pushProgram', program);
    						this.opcode('pushProgram', inverse);
    
    						if (sexpr.hash) {
    							this.accept(sexpr.hash);
    						} else {
    							this.opcode('emptyHash', omitEmpty);
    						}
    
    						return params;
    					},
    
    					blockParamIndex: function blockParamIndex(name) {
    						for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
    							var blockParams = this.options.blockParams[depth],
    								param = blockParams && _utils.indexOf(blockParams, name);
    							if (blockParams && param >= 0) {
    								return [depth, param];
    							}
    						}
    					}
    				};
    
    				function precompile(input, options, env) {
    					if (input == null || typeof input !== 'string' && input.type !== 'Program') {
    						throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);
    					}
    
    					options = options || {};
    					if (!('data' in options)) {
    						options.data = true;
    					}
    					if (options.compat) {
    						options.useDepths = true;
    					}
    
    					var ast = env.parse(input, options),
    						environment = new env.Compiler().compile(ast, options);
    					return new env.JavaScriptCompiler().compile(environment, options);
    				}
    
    				function compile(input, options, env) {
    					if (options === undefined) options = {};
    
    					if (input == null || typeof input !== 'string' && input.type !== 'Program') {
    						throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);
    					}
    
    					if (!('data' in options)) {
    						options.data = true;
    					}
    					if (options.compat) {
    						options.useDepths = true;
    					}
    
    					var compiled = undefined;
    
    					function compileInput() {
    						var ast = env.parse(input, options),
    							environment = new env.Compiler().compile(ast, options),
    							templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);
    						return env.template(templateSpec);
    					}
    
    					// Template is only compiled on first use and cached after that point.
    					function ret(context, execOptions) {
    						if (!compiled) {
    							compiled = compileInput();
    						}
    						return compiled.call(this, context, execOptions);
    					}
    					ret._setup = function(setupOptions) {
    						if (!compiled) {
    							compiled = compileInput();
    						}
    						return compiled._setup(setupOptions);
    					};
    					ret._child = function(i, data, blockParams, depths) {
    						if (!compiled) {
    							compiled = compileInput();
    						}
    						return compiled._child(i, data, blockParams, depths);
    					};
    					return ret;
    				}
    
    				function argEquals(a, b) {
    					if (a === b) {
    						return true;
    					}
    
    					if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
    						for (var i = 0; i < a.length; i++) {
    							if (!argEquals(a[i], b[i])) {
    								return false;
    							}
    						}
    						return true;
    					}
    				}
    
    				function transformLiteralToPath(sexpr) {
    					if (!sexpr.path.parts) {
    						var literal = sexpr.path;
    						// Casting to string here to make false and 0 literal values play nicely with the rest
    						// of the system.
    						sexpr.path = {
    							type: 'PathExpression',
    							data: false,
    							depth: 0,
    							parts: [literal.original + ''],
    							original: literal.original + '',
    							loc: literal.loc
    						};
    					}
    				}
    
    				/***/
    			},
    			/* 28 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				
    
    				var _interopRequireDefault = __webpack_require__(1)['default'];
    
    				exports.__esModule = true;
    
    				var _base = __webpack_require__(4);
    
    				var _exception = __webpack_require__(6);
    
    				var _exception2 = _interopRequireDefault(_exception);
    
    				var _utils = __webpack_require__(5);
    
    				var _codeGen = __webpack_require__(29);
    
    				var _codeGen2 = _interopRequireDefault(_codeGen);
    
    				function Literal(value) {
    					this.value = value;
    				}
    
    				function JavaScriptCompiler() {}
    
    				JavaScriptCompiler.prototype = {
    					// PUBLIC API: You can override these methods in a subclass to provide
    					// alternative compiled forms for name lookup and buffering semantics
    					nameLookup: function nameLookup(parent, name /* , type*/ ) {
    						if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
    							return [parent, '.', name];
    						} else {
    							return [parent, '[', JSON.stringify(name), ']'];
    						}
    					},
    					depthedLookup: function depthedLookup(name) {
    						return [this.aliasable('container.lookup'), '(depths, "', name, '")'];
    					},
    
    					compilerInfo: function compilerInfo() {
    						var revision = _base.COMPILER_REVISION,
    							versions = _base.REVISION_CHANGES[revision];
    						return [revision, versions];
    					},
    
    					appendToBuffer: function appendToBuffer(source, location, explicit) {
    						// Force a source as this simplifies the merge logic.
    						if (!_utils.isArray(source)) {
    							source = [source];
    						}
    						source = this.source.wrap(source, location);
    
    						if (this.environment.isSimple) {
    							return ['return ', source, ';'];
    						} else if (explicit) {
    							// This is a case where the buffer operation occurs as a child of another
    							// construct, generally braces. We have to explicitly output these buffer
    							// operations to ensure that the emitted code goes in the correct location.
    							return ['buffer += ', source, ';'];
    						} else {
    							source.appendToBuffer = true;
    							return source;
    						}
    					},
    
    					initializeBuffer: function initializeBuffer() {
    						return this.quotedString('');
    					},
    					// END PUBLIC API
    
    					compile: function compile(environment, options, context, asObject) {
    						this.environment = environment;
    						this.options = options;
    						this.stringParams = this.options.stringParams;
    						this.trackIds = this.options.trackIds;
    						this.precompile = !asObject;
    
    						this.name = this.environment.name;
    						this.isChild = !!context;
    						this.context = context || {
    							decorators: [],
    							programs: [],
    							environments: []
    						};
    
    						this.preamble();
    
    						this.stackSlot = 0;
    						this.stackVars = [];
    						this.aliases = {};
    						this.registers = {
    							list: []
    						};
    						this.hashes = [];
    						this.compileStack = [];
    						this.inlineStack = [];
    						this.blockParams = [];
    
    						this.compileChildren(environment, options);
    
    						this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
    						this.useBlockParams = this.useBlockParams || environment.useBlockParams;
    
    						var opcodes = environment.opcodes,
    							opcode = undefined,
    							firstLoc = undefined,
    							i = undefined,
    							l = undefined;
    
    						for (i = 0, l = opcodes.length; i < l; i++) {
    							opcode = opcodes[i];
    
    							this.source.currentLocation = opcode.loc;
    							firstLoc = firstLoc || opcode.loc;
    							this[opcode.opcode].apply(this, opcode.args);
    						}
    
    						// Flush any trailing content that might be pending.
    						this.source.currentLocation = firstLoc;
    						this.pushSource('');
    
    						/* istanbul ignore next */
    						if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
    							throw new _exception2['default']('Compile completed with content left on stack');
    						}
    
    						if (!this.decorators.isEmpty()) {
    							this.useDecorators = true;
    
    							this.decorators.prepend('var decorators = container.decorators;\n');
    							this.decorators.push('return fn;');
    
    							if (asObject) {
    								this.decorators = Function.apply(this, ['fn', 'props', 'container', 'depth0', 'data', 'blockParams', 'depths', this.decorators.merge()]);
    							} else {
    								this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\n');
    								this.decorators.push('}\n');
    								this.decorators = this.decorators.merge();
    							}
    						} else {
    							this.decorators = undefined;
    						}
    
    						var fn = this.createFunctionContext(asObject);
    						if (!this.isChild) {
    							var ret = {
    								compiler: this.compilerInfo(),
    								main: fn
    							};
    
    							if (this.decorators) {
    								ret.main_d = this.decorators; // eslint-disable-line camelcase
    								ret.useDecorators = true;
    							}
    
    							var _context = this.context;
    							var programs = _context.programs;
    							var decorators = _context.decorators;
    
    							for (i = 0, l = programs.length; i < l; i++) {
    								if (programs[i]) {
    									ret[i] = programs[i];
    									if (decorators[i]) {
    										ret[i + '_d'] = decorators[i];
    										ret.useDecorators = true;
    									}
    								}
    							}
    
    							if (this.environment.usePartial) {
    								ret.usePartial = true;
    							}
    							if (this.options.data) {
    								ret.useData = true;
    							}
    							if (this.useDepths) {
    								ret.useDepths = true;
    							}
    							if (this.useBlockParams) {
    								ret.useBlockParams = true;
    							}
    							if (this.options.compat) {
    								ret.compat = true;
    							}
    
    							if (!asObject) {
    								ret.compiler = JSON.stringify(ret.compiler);
    
    								this.source.currentLocation = {
    									start: {
    										line: 1,
    										column: 0
    									}
    								};
    								ret = this.objectLiteral(ret);
    
    								if (options.srcName) {
    									ret = ret.toStringWithSourceMap({
    										file: options.destName
    									});
    									ret.map = ret.map && ret.map.toString();
    								} else {
    									ret = ret.toString();
    								}
    							} else {
    								ret.compilerOptions = this.options;
    							}
    
    							return ret;
    						} else {
    							return fn;
    						}
    					},
    
    					preamble: function preamble() {
    						// track the last context pushed into place to allow skipping the
    						// getContext opcode when it would be a noop
    						this.lastContext = 0;
    						this.source = new _codeGen2['default'](this.options.srcName);
    						this.decorators = new _codeGen2['default'](this.options.srcName);
    					},
    
    					createFunctionContext: function createFunctionContext(asObject) {
    						var varDeclarations = '';
    
    						var locals = this.stackVars.concat(this.registers.list);
    						if (locals.length > 0) {
    							varDeclarations += ', ' + locals.join(', ');
    						}
    
    						// Generate minimizer alias mappings
    						//
    						// When using true SourceNodes, this will update all references to the given alias
    						// as the source nodes are reused in situ. For the non-source node compilation mode,
    						// aliases will not be used, but this case is already being run on the client and
    						// we aren't concern about minimizing the template size.
    						var aliasCount = 0;
    						for (var alias in this.aliases) {
    							// eslint-disable-line guard-for-in
    							var node = this.aliases[alias];
    
    							if (this.aliases.hasOwnProperty(alias) && node.children && node.referenceCount > 1) {
    								varDeclarations += ', alias' + ++aliasCount + '=' + alias;
    								node.children[0] = 'alias' + aliasCount;
    							}
    						}
    
    						var params = ['container', 'depth0', 'helpers', 'partials', 'data'];
    
    						if (this.useBlockParams || this.useDepths) {
    							params.push('blockParams');
    						}
    						if (this.useDepths) {
    							params.push('depths');
    						}
    
    						// Perform a second pass over the output to merge content when possible
    						var source = this.mergeSource(varDeclarations);
    
    						if (asObject) {
    							params.push(source);
    
    							return Function.apply(this, params);
    						} else {
    							return this.source.wrap(['function(', params.join(','), ') {\n  ', source, '}']);
    						}
    					},
    					mergeSource: function mergeSource(varDeclarations) {
    						var isSimple = this.environment.isSimple,
    							appendOnly = !this.forceBuffer,
    							appendFirst = undefined,
    							sourceSeen = undefined,
    							bufferStart = undefined,
    							bufferEnd = undefined;
    						this.source.each(function(line) {
    							if (line.appendToBuffer) {
    								if (bufferStart) {
    									line.prepend('  + ');
    								} else {
    									bufferStart = line;
    								}
    								bufferEnd = line;
    							} else {
    								if (bufferStart) {
    									if (!sourceSeen) {
    										appendFirst = true;
    									} else {
    										bufferStart.prepend('buffer += ');
    									}
    									bufferEnd.add(';');
    									bufferStart = bufferEnd = undefined;
    								}
    
    								sourceSeen = true;
    								if (!isSimple) {
    									appendOnly = false;
    								}
    							}
    						});
    
    						if (appendOnly) {
    							if (bufferStart) {
    								bufferStart.prepend('return ');
    								bufferEnd.add(';');
    							} else if (!sourceSeen) {
    								this.source.push('return "";');
    							}
    						} else {
    							varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());
    
    							if (bufferStart) {
    								bufferStart.prepend('return buffer + ');
    								bufferEnd.add(';');
    							} else {
    								this.source.push('return buffer;');
    							}
    						}
    
    						if (varDeclarations) {
    							this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\n'));
    						}
    
    						return this.source.merge();
    					},
    
    					// [blockValue]
    					//
    					// On stack, before: hash, inverse, program, value
    					// On stack, after: return value of blockHelperMissing
    					//
    					// The purpose of this opcode is to take a block of the form
    					// `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and
    					// replace it on the stack with the result of properly
    					// invoking blockHelperMissing.
    					blockValue: function blockValue(name) {
    						var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
    							params = [this.contextName(0)];
    						this.setupHelperArgs(name, 0, params);
    
    						var blockName = this.popStack();
    						params.splice(1, 0, blockName);
    
    						this.push(this.source.functionCall(blockHelperMissing, 'call', params));
    					},
    
    					// [ambiguousBlockValue]
    					//
    					// On stack, before: hash, inverse, program, value
    					// Compiler value, before: lastHelper=value of last found helper, if any
    					// On stack, after, if no lastHelper: same as [blockValue]
    					// On stack, after, if lastHelper: value
    					ambiguousBlockValue: function ambiguousBlockValue() {
    						// We're being a bit cheeky and reusing the options value from the prior exec
    						var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
    							params = [this.contextName(0)];
    						this.setupHelperArgs('', 0, params, true);
    
    						this.flushInline();
    
    						var current = this.topStack();
    						params.splice(1, 0, current);
    
    						this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);
    					},
    
    					// [appendContent]
    					//
    					// On stack, before: ...
    					// On stack, after: ...
    					//
    					// Appends the string value of `content` to the current buffer
    					appendContent: function appendContent(content) {
    						if (this.pendingContent) {
    							content = this.pendingContent + content;
    						} else {
    							this.pendingLocation = this.source.currentLocation;
    						}
    
    						this.pendingContent = content;
    					},
    
    					// [append]
    					//
    					// On stack, before: value, ...
    					// On stack, after: ...
    					//
    					// Coerces `value` to a String and appends it to the current buffer.
    					//
    					// If `value` is truthy, or 0, it is coerced into a string and appended
    					// Otherwise, the empty string is appended
    					append: function append() {
    						if (this.isInline()) {
    							this.replaceStack(function(current) {
    								return [' != null ? ', current, ' : ""'];
    							});
    
    							this.pushSource(this.appendToBuffer(this.popStack()));
    						} else {
    							var local = this.popStack();
    							this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);
    							if (this.environment.isSimple) {
    								this.pushSource(['else { ', this.appendToBuffer("''", undefined, true), ' }']);
    							}
    						}
    					},
    
    					// [appendEscaped]
    					//
    					// On stack, before: value, ...
    					// On stack, after: ...
    					//
    					// Escape `value` and append it to the buffer
    					appendEscaped: function appendEscaped() {
    						this.pushSource(this.appendToBuffer([this.aliasable('container.escapeExpression'), '(', this.popStack(), ')']));
    					},
    
    					// [getContext]
    					//
    					// On stack, before: ...
    					// On stack, after: ...
    					// Compiler value, after: lastContext=depth
    					//
    					// Set the value of the `lastContext` compiler value to the depth
    					getContext: function getContext(depth) {
    						this.lastContext = depth;
    					},
    
    					// [pushContext]
    					//
    					// On stack, before: ...
    					// On stack, after: currentContext, ...
    					//
    					// Pushes the value of the current context onto the stack.
    					pushContext: function pushContext() {
    						this.pushStackLiteral(this.contextName(this.lastContext));
    					},
    
    					// [lookupOnContext]
    					//
    					// On stack, before: ...
    					// On stack, after: currentContext[name], ...
    					//
    					// Looks up the value of `name` on the current context and pushes
    					// it onto the stack.
    					lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
    						var i = 0;
    
    						if (!scoped && this.options.compat && !this.lastContext) {
    							// The depthed query is expected to handle the undefined logic for the root level that
    							// is implemented below, so we evaluate that directly in compat mode
    							this.push(this.depthedLookup(parts[i++]));
    						} else {
    							this.pushContext();
    						}
    
    						this.resolvePath('context', parts, i, falsy, strict);
    					},
    
    					// [lookupBlockParam]
    					//
    					// On stack, before: ...
    					// On stack, after: blockParam[name], ...
    					//
    					// Looks up the value of `parts` on the given block param and pushes
    					// it onto the stack.
    					lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
    						this.useBlockParams = true;
    
    						this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);
    						this.resolvePath('context', parts, 1);
    					},
    
    					// [lookupData]
    					//
    					// On stack, before: ...
    					// On stack, after: data, ...
    					//
    					// Push the data lookup operator
    					lookupData: function lookupData(depth, parts, strict) {
    						if (!depth) {
    							this.pushStackLiteral('data');
    						} else {
    							this.pushStackLiteral('container.data(data, ' + depth + ')');
    						}
    
    						this.resolvePath('data', parts, 0, true, strict);
    					},
    
    					resolvePath: function resolvePath(type, parts, i, falsy, strict) {
    						// istanbul ignore next
    
    						var _this = this;
    
    						if (this.options.strict || this.options.assumeObjects) {
    							this.push(strictLookup(this.options.strict && strict, this, parts, type));
    							return;
    						}
    
    						var len = parts.length;
    						for (; i < len; i++) {
    							/* eslint-disable no-loop-func */
    							this.replaceStack(function(current) {
    								var lookup = _this.nameLookup(current, parts[i], type);
    								// We want to ensure that zero and false are handled properly if the context (falsy flag)
    								// needs to have the special handling for these values.
    								if (!falsy) {
    									return [' != null ? ', lookup, ' : ', current];
    								} else {
    									// Otherwise we can use generic falsy handling
    									return [' && ', lookup];
    								}
    							});
    							/* eslint-enable no-loop-func */
    						}
    					},
    
    					// [resolvePossibleLambda]
    					//
    					// On stack, before: value, ...
    					// On stack, after: resolved value, ...
    					//
    					// If the `value` is a lambda, replace it on the stack by
    					// the return value of the lambda
    					resolvePossibleLambda: function resolvePossibleLambda() {
    						this.push([this.aliasable('container.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);
    					},
    
    					// [pushStringParam]
    					//
    					// On stack, before: ...
    					// On stack, after: string, currentContext, ...
    					//
    					// This opcode is designed for use in string mode, which
    					// provides the string value of a parameter along with its
    					// depth rather than resolving it immediately.
    					pushStringParam: function pushStringParam(string, type) {
    						this.pushContext();
    						this.pushString(type);
    
    						// If it's a subexpression, the string result
    						// will be pushed after this opcode.
    						if (type !== 'SubExpression') {
    							if (typeof string === 'string') {
    								this.pushString(string);
    							} else {
    								this.pushStackLiteral(string);
    							}
    						}
    					},
    
    					emptyHash: function emptyHash(omitEmpty) {
    						if (this.trackIds) {
    							this.push('{}'); // hashIds
    						}
    						if (this.stringParams) {
    							this.push('{}'); // hashContexts
    							this.push('{}'); // hashTypes
    						}
    						this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');
    					},
    					pushHash: function pushHash() {
    						if (this.hash) {
    							this.hashes.push(this.hash);
    						}
    						this.hash = {
    							values: [],
    							types: [],
    							contexts: [],
    							ids: []
    						};
    					},
    					popHash: function popHash() {
    						var hash = this.hash;
    						this.hash = this.hashes.pop();
    
    						if (this.trackIds) {
    							this.push(this.objectLiteral(hash.ids));
    						}
    						if (this.stringParams) {
    							this.push(this.objectLiteral(hash.contexts));
    							this.push(this.objectLiteral(hash.types));
    						}
    
    						this.push(this.objectLiteral(hash.values));
    					},
    
    					// [pushString]
    					//
    					// On stack, before: ...
    					// On stack, after: quotedString(string), ...
    					//
    					// Push a quoted version of `string` onto the stack
    					pushString: function pushString(string) {
    						this.pushStackLiteral(this.quotedString(string));
    					},
    
    					// [pushLiteral]
    					//
    					// On stack, before: ...
    					// On stack, after: value, ...
    					//
    					// Pushes a value onto the stack. This operation prevents
    					// the compiler from creating a temporary variable to hold
    					// it.
    					pushLiteral: function pushLiteral(value) {
    						this.pushStackLiteral(value);
    					},
    
    					// [pushProgram]
    					//
    					// On stack, before: ...
    					// On stack, after: program(guid), ...
    					//
    					// Push a program expression onto the stack. This takes
    					// a compile-time guid and converts it into a runtime-accessible
    					// expression.
    					pushProgram: function pushProgram(guid) {
    						if (guid != null) {
    							this.pushStackLiteral(this.programExpression(guid));
    						} else {
    							this.pushStackLiteral(null);
    						}
    					},
    
    					// [registerDecorator]
    					//
    					// On stack, before: hash, program, params..., ...
    					// On stack, after: ...
    					//
    					// Pops off the decorator's parameters, invokes the decorator,
    					// and inserts the decorator into the decorators list.
    					registerDecorator: function registerDecorator(paramSize, name) {
    						var foundDecorator = this.nameLookup('decorators', name, 'decorator'),
    							options = this.setupHelperArgs(name, paramSize);
    
    						this.decorators.push(['fn = ', this.decorators.functionCall(foundDecorator, '', ['fn', 'props', 'container', options]), ' || fn;']);
    					},
    
    					// [invokeHelper]
    					//
    					// On stack, before: hash, inverse, program, params..., ...
    					// On stack, after: result of helper invocation
    					//
    					// Pops off the helper's parameters, invokes the helper,
    					// and pushes the helper's return value onto the stack.
    					//
    					// If the helper is not found, `helperMissing` is called.
    					invokeHelper: function invokeHelper(paramSize, name, isSimple) {
    						var nonHelper = this.popStack(),
    							helper = this.setupHelper(paramSize, name),
    							simple = isSimple ? [helper.name, ' || '] : '';
    
    						var lookup = ['('].concat(simple, nonHelper);
    						if (!this.options.strict) {
    							lookup.push(' || ', this.aliasable('helpers.helperMissing'));
    						}
    						lookup.push(')');
    
    						this.push(this.source.functionCall(lookup, 'call', helper.callParams));
    					},
    
    					// [invokeKnownHelper]
    					//
    					// On stack, before: hash, inverse, program, params..., ...
    					// On stack, after: result of helper invocation
    					//
    					// This operation is used when the helper is known to exist,
    					// so a `helperMissing` fallback is not required.
    					invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
    						var helper = this.setupHelper(paramSize, name);
    						this.push(this.source.functionCall(helper.name, 'call', helper.callParams));
    					},
    
    					// [invokeAmbiguous]
    					//
    					// On stack, before: hash, inverse, program, params..., ...
    					// On stack, after: result of disambiguation
    					//
    					// This operation is used when an expression like `{{foo}}`
    					// is provided, but we don't know at compile-time whether it
    					// is a helper or a path.
    					//
    					// This operation emits more code than the other options,
    					// and can be avoided by passing the `knownHelpers` and
    					// `knownHelpersOnly` flags at compile-time.
    					invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
    						this.useRegister('helper');
    
    						var nonHelper = this.popStack();
    
    						this.emptyHash();
    						var helper = this.setupHelper(0, name, helperCall);
    
    						var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');
    
    						var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];
    						if (!this.options.strict) {
    							lookup[0] = '(helper = ';
    							lookup.push(' != null ? helper : ', this.aliasable('helpers.helperMissing'));
    						}
    
    						this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('"function"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);
    					},
    
    					// [invokePartial]
    					//
    					// On stack, before: context, ...
    					// On stack after: result of partial invocation
    					//
    					// This operation pops off a context, invokes a partial with that context,
    					// and pushes the result of the invocation back.
    					invokePartial: function invokePartial(isDynamic, name, indent) {
    						var params = [],
    							options = this.setupParams(name, 1, params);
    
    						if (isDynamic) {
    							name = this.popStack();
    							delete options.name;
    						}
    
    						if (indent) {
    							options.indent = JSON.stringify(indent);
    						}
    						options.helpers = 'helpers';
    						options.partials = 'partials';
    						options.decorators = 'container.decorators';
    
    						if (!isDynamic) {
    							params.unshift(this.nameLookup('partials', name, 'partial'));
    						} else {
    							params.unshift(name);
    						}
    
    						if (this.options.compat) {
    							options.depths = 'depths';
    						}
    						options = this.objectLiteral(options);
    						params.push(options);
    
    						this.push(this.source.functionCall('container.invokePartial', '', params));
    					},
    
    					// [assignToHash]
    					//
    					// On stack, before: value, ..., hash, ...
    					// On stack, after: ..., hash, ...
    					//
    					// Pops a value off the stack and assigns it to the current hash
    					assignToHash: function assignToHash(key) {
    						var value = this.popStack(),
    							context = undefined,
    							type = undefined,
    							id = undefined;
    
    						if (this.trackIds) {
    							id = this.popStack();
    						}
    						if (this.stringParams) {
    							type = this.popStack();
    							context = this.popStack();
    						}
    
    						var hash = this.hash;
    						if (context) {
    							hash.contexts[key] = context;
    						}
    						if (type) {
    							hash.types[key] = type;
    						}
    						if (id) {
    							hash.ids[key] = id;
    						}
    						hash.values[key] = value;
    					},
    
    					pushId: function pushId(type, name, child) {
    						if (type === 'BlockParam') {
    							this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));
    						} else if (type === 'PathExpression') {
    							this.pushString(name);
    						} else if (type === 'SubExpression') {
    							this.pushStackLiteral('true');
    						} else {
    							this.pushStackLiteral('null');
    						}
    					},
    
    					// HELPERS
    
    					compiler: JavaScriptCompiler,
    
    					compileChildren: function compileChildren(environment, options) {
    						var children = environment.children,
    							child = undefined,
    							compiler = undefined;
    
    						for (var i = 0, l = children.length; i < l; i++) {
    							child = children[i];
    							compiler = new this.compiler(); // eslint-disable-line new-cap
    
    							var index = this.matchExistingProgram(child);
    
    							if (index == null) {
    								this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children
    								index = this.context.programs.length;
    								child.index = index;
    								child.name = 'program' + index;
    								this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
    								this.context.decorators[index] = compiler.decorators;
    								this.context.environments[index] = child;
    
    								this.useDepths = this.useDepths || compiler.useDepths;
    								this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
    							} else {
    								child.index = index;
    								child.name = 'program' + index;
    
    								this.useDepths = this.useDepths || child.useDepths;
    								this.useBlockParams = this.useBlockParams || child.useBlockParams;
    							}
    						}
    					},
    					matchExistingProgram: function matchExistingProgram(child) {
    						for (var i = 0, len = this.context.environments.length; i < len; i++) {
    							var environment = this.context.environments[i];
    							if (environment && environment.equals(child)) {
    								return i;
    							}
    						}
    					},
    
    					programExpression: function programExpression(guid) {
    						var child = this.environment.children[guid],
    							programParams = [child.index, 'data', child.blockParams];
    
    						if (this.useBlockParams || this.useDepths) {
    							programParams.push('blockParams');
    						}
    						if (this.useDepths) {
    							programParams.push('depths');
    						}
    
    						return 'container.program(' + programParams.join(', ') + ')';
    					},
    
    					useRegister: function useRegister(name) {
    						if (!this.registers[name]) {
    							this.registers[name] = true;
    							this.registers.list.push(name);
    						}
    					},
    
    					push: function push(expr) {
    						if (!(expr instanceof Literal)) {
    							expr = this.source.wrap(expr);
    						}
    
    						this.inlineStack.push(expr);
    						return expr;
    					},
    
    					pushStackLiteral: function pushStackLiteral(item) {
    						this.push(new Literal(item));
    					},
    
    					pushSource: function pushSource(source) {
    						if (this.pendingContent) {
    							this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
    							this.pendingContent = undefined;
    						}
    
    						if (source) {
    							this.source.push(source);
    						}
    					},
    
    					replaceStack: function replaceStack(callback) {
    						var prefix = ['('],
    							stack = undefined,
    							createdStack = undefined,
    							usedLiteral = undefined;
    
    						/* istanbul ignore next */
    						if (!this.isInline()) {
    							throw new _exception2['default']('replaceStack on non-inline');
    						}
    
    						// We want to merge the inline statement into the replacement statement via ','
    						var top = this.popStack(true);
    
    						if (top instanceof Literal) {
    							// Literals do not need to be inlined
    							stack = [top.value];
    							prefix = ['(', stack];
    							usedLiteral = true;
    						} else {
    							// Get or create the current stack name for use by the inline
    							createdStack = true;
    							var _name = this.incrStack();
    
    							prefix = ['((', this.push(_name), ' = ', top, ')'];
    							stack = this.topStack();
    						}
    
    						var item = callback.call(this, stack);
    
    						if (!usedLiteral) {
    							this.popStack();
    						}
    						if (createdStack) {
    							this.stackSlot--;
    						}
    						this.push(prefix.concat(item, ')'));
    					},
    
    					incrStack: function incrStack() {
    						this.stackSlot++;
    						if (this.stackSlot > this.stackVars.length) {
    							this.stackVars.push('stack' + this.stackSlot);
    						}
    						return this.topStackName();
    					},
    					topStackName: function topStackName() {
    						return 'stack' + this.stackSlot;
    					},
    					flushInline: function flushInline() {
    						var inlineStack = this.inlineStack;
    						this.inlineStack = [];
    						for (var i = 0, len = inlineStack.length; i < len; i++) {
    							var entry = inlineStack[i];
    							/* istanbul ignore if */
    							if (entry instanceof Literal) {
    								this.compileStack.push(entry);
    							} else {
    								var stack = this.incrStack();
    								this.pushSource([stack, ' = ', entry, ';']);
    								this.compileStack.push(stack);
    							}
    						}
    					},
    					isInline: function isInline() {
    						return this.inlineStack.length;
    					},
    
    					popStack: function popStack(wrapped) {
    						var inline = this.isInline(),
    							item = (inline ? this.inlineStack : this.compileStack).pop();
    
    						if (!wrapped && item instanceof Literal) {
    							return item.value;
    						} else {
    							if (!inline) {
    								/* istanbul ignore next */
    								if (!this.stackSlot) {
    									throw new _exception2['default']('Invalid stack pop');
    								}
    								this.stackSlot--;
    							}
    							return item;
    						}
    					},
    
    					topStack: function topStack() {
    						var stack = this.isInline() ? this.inlineStack : this.compileStack,
    							item = stack[stack.length - 1];
    
    						/* istanbul ignore if */
    						if (item instanceof Literal) {
    							return item.value;
    						} else {
    							return item;
    						}
    					},
    
    					contextName: function contextName(context) {
    						if (this.useDepths && context) {
    							return 'depths[' + context + ']';
    						} else {
    							return 'depth' + context;
    						}
    					},
    
    					quotedString: function quotedString(str) {
    						return this.source.quotedString(str);
    					},
    
    					objectLiteral: function objectLiteral(obj) {
    						return this.source.objectLiteral(obj);
    					},
    
    					aliasable: function aliasable(name) {
    						var ret = this.aliases[name];
    						if (ret) {
    							ret.referenceCount++;
    							return ret;
    						}
    
    						ret = this.aliases[name] = this.source.wrap(name);
    						ret.aliasable = true;
    						ret.referenceCount = 1;
    
    						return ret;
    					},
    
    					setupHelper: function setupHelper(paramSize, name, blockHelper) {
    						var params = [],
    							paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
    						var foundHelper = this.nameLookup('helpers', name, 'helper'),
    							callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : {}');
    
    						return {
    							params: params,
    							paramsInit: paramsInit,
    							name: foundHelper,
    							callParams: [callContext].concat(params)
    						};
    					},
    
    					setupParams: function setupParams(helper, paramSize, params) {
    						var options = {},
    							contexts = [],
    							types = [],
    							ids = [],
    							objectArgs = !params,
    							param = undefined;
    
    						if (objectArgs) {
    							params = [];
    						}
    
    						options.name = this.quotedString(helper);
    						options.hash = this.popStack();
    
    						if (this.trackIds) {
    							options.hashIds = this.popStack();
    						}
    						if (this.stringParams) {
    							options.hashTypes = this.popStack();
    							options.hashContexts = this.popStack();
    						}
    
    						var inverse = this.popStack(),
    							program = this.popStack();
    
    						// Avoid setting fn and inverse if neither are set. This allows
    						// helpers to do a check for `if (options.fn)`
    						if (program || inverse) {
    							options.fn = program || 'container.noop';
    							options.inverse = inverse || 'container.noop';
    						}
    
    						// The parameters go on to the stack in order (making sure that they are evaluated in order)
    						// so we need to pop them off the stack in reverse order
    						var i = paramSize;
    						while (i--) {
    							param = this.popStack();
    							params[i] = param;
    
    							if (this.trackIds) {
    								ids[i] = this.popStack();
    							}
    							if (this.stringParams) {
    								types[i] = this.popStack();
    								contexts[i] = this.popStack();
    							}
    						}
    
    						if (objectArgs) {
    							options.args = this.source.generateArray(params);
    						}
    
    						if (this.trackIds) {
    							options.ids = this.source.generateArray(ids);
    						}
    						if (this.stringParams) {
    							options.types = this.source.generateArray(types);
    							options.contexts = this.source.generateArray(contexts);
    						}
    
    						if (this.options.data) {
    							options.data = 'data';
    						}
    						if (this.useBlockParams) {
    							options.blockParams = 'blockParams';
    						}
    						return options;
    					},
    
    					setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
    						var options = this.setupParams(helper, paramSize, params);
    						options = this.objectLiteral(options);
    						if (useRegister) {
    							this.useRegister('options');
    							params.push('options');
    							return ['options=', options];
    						} else if (params) {
    							params.push(options);
    							return '';
    						} else {
    							return options;
    						}
    					}
    				};
    
    				(function() {
    					var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');
    
    					var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};
    
    					for (var i = 0, l = reservedWords.length; i < l; i++) {
    						compilerWords[reservedWords[i]] = true;
    					}
    				})();
    
    				JavaScriptCompiler.isValidJavaScriptVariableName = function(name) {
    					return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
    				};
    
    				function strictLookup(requireTerminal, compiler, parts, type) {
    					var stack = compiler.popStack(),
    						i = 0,
    						len = parts.length;
    					if (requireTerminal) {
    						len--;
    					}
    
    					for (; i < len; i++) {
    						stack = compiler.nameLookup(stack, parts[i], type);
    					}
    
    					if (requireTerminal) {
    						return [compiler.aliasable('container.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ')'];
    					} else {
    						return stack;
    					}
    				}
    
    				exports['default'] = JavaScriptCompiler;
    				module.exports = exports['default'];
    
    				/***/
    			},
    			/* 29 */
    			/***/
    			function(module, exports, __webpack_require__) {
    
    				/* global define */
    				
    
    				exports.__esModule = true;
    
    				var _utils = __webpack_require__(5);
    
    				var SourceNode = undefined;
    
    				try {
    					/* istanbul ignore next */
    					if (true) {
    						// We don't support this in AMD environments. For these environments, we asusme that
    						// they are running on the browser and thus have no need for the source-map library.
    						// var SourceMap = require('source-map');
    						// SourceNode = SourceMap.SourceNode;
    					}
    				} catch (err) {}
    				/* NOP */
    
    				/* istanbul ignore if: tested but not covered in istanbul due to dist build  */
    				if (!SourceNode) {
    					SourceNode = function(line, column, srcFile, chunks) {
    						this.src = '';
    						if (chunks) {
    							this.add(chunks);
    						}
    					};
    					/* istanbul ignore next */
    					SourceNode.prototype = {
    						add: function add(chunks) {
    							if (_utils.isArray(chunks)) {
    								chunks = chunks.join('');
    							}
    							this.src += chunks;
    						},
    						prepend: function prepend(chunks) {
    							if (_utils.isArray(chunks)) {
    								chunks = chunks.join('');
    							}
    							this.src = chunks + this.src;
    						},
    						toStringWithSourceMap: function toStringWithSourceMap() {
    							return {
    								code: this.toString()
    							};
    						},
    						toString: function toString() {
    							return this.src;
    						}
    					};
    				}
    
    				function castChunk(chunk, codeGen, loc) {
    					if (_utils.isArray(chunk)) {
    						var ret = [];
    
    						for (var i = 0, len = chunk.length; i < len; i++) {
    							ret.push(codeGen.wrap(chunk[i], loc));
    						}
    						return ret;
    					} else if (typeof chunk === 'boolean' || typeof chunk === 'number') {
    						// Handle primitives that the SourceNode will throw up on
    						return chunk + '';
    					}
    					return chunk;
    				}
    
    				function CodeGen(srcFile) {
    					this.srcFile = srcFile;
    					this.source = [];
    				}
    
    				CodeGen.prototype = {
    					isEmpty: function isEmpty() {
    						return !this.source.length;
    					},
    					prepend: function prepend(source, loc) {
    						this.source.unshift(this.wrap(source, loc));
    					},
    					push: function push(source, loc) {
    						this.source.push(this.wrap(source, loc));
    					},
    
    					merge: function merge() {
    						var source = this.empty();
    						this.each(function(line) {
    							source.add(['  ', line, '\n']);
    						});
    						return source;
    					},
    
    					each: function each(iter) {
    						for (var i = 0, len = this.source.length; i < len; i++) {
    							iter(this.source[i]);
    						}
    					},
    
    					empty: function empty() {
    						var loc = this.currentLocation || {
    							start: {}
    						};
    						return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
    					},
    					wrap: function wrap(chunk) {
    						var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || {
    							start: {}
    						} : arguments[1];
    
    						if (chunk instanceof SourceNode) {
    							return chunk;
    						}
    
    						chunk = castChunk(chunk, this, loc);
    
    						return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
    					},
    
    					functionCall: function functionCall(fn, type, params) {
    						params = this.generateList(params);
    						return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);
    					},
    
    					quotedString: function quotedString(str) {
    						return '"' + (str + '').replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\u2028/g, '\\u2028') // Per Ecma-262 7.3 + 7.8.4
    							.replace(/\u2029/g, '\\u2029') + '"';
    					},
    
    					objectLiteral: function objectLiteral(obj) {
    						var pairs = [];
    
    						for (var key in obj) {
    							if (obj.hasOwnProperty(key)) {
    								var value = castChunk(obj[key], this);
    								if (value !== 'undefined') {
    									pairs.push([this.quotedString(key), ':', value]);
    								}
    							}
    						}
    
    						var ret = this.generateList(pairs);
    						ret.prepend('{');
    						ret.add('}');
    						return ret;
    					},
    
    					generateList: function generateList(entries) {
    						var ret = this.empty();
    
    						for (var i = 0, len = entries.length; i < len; i++) {
    							if (i) {
    								ret.add(',');
    							}
    
    							ret.add(castChunk(entries[i], this));
    						}
    
    						return ret;
    					},
    
    					generateArray: function generateArray(entries) {
    						var ret = this.generateList(entries);
    						ret.prepend('[');
    						ret.add(']');
    
    						return ret;
    					}
    				};
    
    				exports['default'] = CodeGen;
    				module.exports = exports['default'];
    
    				/***/
    			}
    			/******/
    		])
    });
    define('views/sheetContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		Handlebars = require('lib/handlebars');
    	/**
    	 * RowsGridContainer
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class RowsGridContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var sheetContainer = Backbone.View.extend({
    		tagName: 'li',
    
    		initialize: function(option) {
    			var modelJSON = this.model.toJSON();
    			this.listenTo(this.model, 'destroy', this.destroy);
    			this.template=Handlebars.compile($('#tempSheetContainer').html());
    			this.$el.html(this.template(modelJSON));
    			if(option.active ===true){
    				this.$el.addClass('active');
    			}
    		},
    		
    		render: function() {
    			return this;
    		},
    		destroy: function() {
    			this.remove();
    		}
    	});
    	return sheetContainer;
    });
    define('views/sheetsContainer',function() {
    	
    	var Backbone = require('lib/backbone'),
    		sheets = require('collections/sheets'),
    		SheetContainer = require('views/sheetContainer');
    	/**
    	 * RowsGridContainer
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class RowsGridContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var SheetsContainer = Backbone.View.extend({
    
    		tagName: 'ul',
    		/**
    		 * @property {element} className
    		 */
    		className: 'sheet-list',
    		/**
    		 * 初始化事件监听
    		 * @method initialize
    		 */
    		initialize: function(option) {
    			if (sheets.length < 1) {
    				sheets.add({
    					name: 'Sheet1',
    					sort: 0
    				});
    			}
    		},
    		render: function() {
    			var i, sheetView, active;
    			for (i = 0; i < sheets.length; i++) {
    				if (i === 0) {
    					active = true;
    				} else {
    					active = false;
    				}
    				sheetView = new SheetContainer({
    					model: sheets.models[i],
    					active: active
    				});
    				this.$el.append(sheetView.render().el);
    			}
    			return this;
    		},
    		destroy:function(){
    			this.remove();
    		}
    	});
    	return SheetsContainer;
    });
    define('basic/util/clone',function() {
        
    
        var BUILTIN_OBJECT = {
            '[object Function]': 1,
            '[object RegExp]': 1,
            '[object Date]': 1,
            '[object Error]': 1,
            '[object CanvasGradient]': 1
        };
    
        /**
         * 克隆类
         * @author ray wu
         * @class clone
         * @since 0.1.0
         * @module basic
         */
        return {
            clone: function(source) {
                if (typeof source == 'object' && source !== null) {
                    var result = source;
                    if (source instanceof Array) {
                        result = [];
                        for (var i = 0, len = source.length; i < len; i++) {
                            result[i] = this.clone(source[i]);
                        }
                    } else if (!BUILTIN_OBJECT[Object.prototype.toString.call(source)]) {
                        result = {};
                        for (var key in source) {
                            if (source.hasOwnProperty(key)) {
                                result[key] = this.clone(source[key]);
                            }
                        }
                    }
    
                    return result;
                }
                return source;
            }
        };
    });
    define('views/gridLineRowContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		headItemRows = require('collections/headItemRow'),
    		cache = require('basic/tools/cache'),
    		util = require('basic/util/clone'),
    		config = require('spreadsheet/config');
    	/**
    	 * GridLineRowContainer
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class GridLineRowContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var GridLineRowContainer = Backbone.View.extend({
    		/**
    		 * @property {element} className
    		 */
    		className: 'row',
    		/**
    		 * 初始化监听
    		 * @method initialize
    		 * @return {[type]}
    		 */
    		initialize: function(option) {
    			var modelList,
    				currentIndex;
    
    			this.offsetTop = cache.TempProp.isFrozen ? (option.frozenTop || 0) : 0;
    			this.endIndex = option.endIndex;
    			this.listenTo(this.model, 'change:top', this.changeTop);
    			this.listenTo(this.model, 'change:height', this.changeHeight);
    			this.currentRule = util.clone(cache.CurrentRule);
    			modelList = headItemRows;
    
    			if (cache.TempProp.isFrozen !== true || this.endIndex === undefined) {
    				this.listenTo(this.model, 'change:isView', this.destroy);
    			}
    		},
    		/**
    		 * 渲染本身对象
    		 * @method render
    		 * @return {object} 返回自身对象`this`
    		 */
    		render: function() {
    			this.changeTop();
    			this.changeHeight();
    			return this;
    		},
    		/**
    		 * 更新top
    		 * @method changeTop
    		 */
    		changeTop: function() {
    			var userViewTop = 0,
    				userViewModel;
    			if (cache.TempProp.isFrozen) {
    				userViewModel = headItemRows.getModelByAlias(cache.UserView.rowAlias);
    				userViewTop = userViewModel.toJSON().top;
    			}
    			this.$el.css({
    				top: this.model.toJSON().top - this.offsetTop - userViewTop
    			});
    		},
    		/**
    		 * 更新高度
    		 * @method changeTop
    		 */
    		changeHeight: function() {
    			this.$el.css({
    				height: this.model.toJSON().height
    			});
    		},
    		/**
    		 * 视图销毁
    		 * @method destroy
    		 */
    		destroy: function() {
    			this.remove();
    		}
    	});
    	return GridLineRowContainer;
    });
    // beacause of we used nested model ,but backbone not support nested lsitenTo .
    // so listenTo nested model didn't done.
    
    
    define('views/cellContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		Handlebars = require('lib/handlebars'),
    		Backbone = require('lib/backbone'),
    		headItemRows = require('collections/headItemRow'),
    		headItemCols = require('collections/headItemCol'),
    		selectRegions = require('collections/selectRegion'),
    		config = require('spreadsheet/config'),
    		cache = require('basic/tools/cache'),
    		send = require('basic/tools/send'),
    		setCellHeight = require('entrance/cell/setCellHeight');
    
    	/**
    	 * 单元格视图类，用于显示单元格对象
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class CellContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var CellContainer = Backbone.View.extend({
    		/**
    		 * 单元格标签class属性
    		 * @property className  
    		 * @type {string}
    		 */
    		className: 'item',
    		/**
    		 * 监听model事件
    		 * @method initialize 
    		 */
    		initialize: function(options) {
    			var modelRowList = headItemRows,
    				modelColList = headItemCols;
    			this.listenTo(this.model, 'change', this.render);
    			this.listenTo(this.model, 'change:isDestroy', this.destroy);
    			this.listenTo(this.model, 'destroy', this.modelDestroy);
    			// this.listenTo(this.model, 'destroy', this.render);
    			this.currentRule = options.currentRule;
    			if (cache.TempProp.isFrozen !== true || this.currentRule.displayPosition.endRowIndex === undefined) {
    				this.listenTo(this.model, 'change:showState', this.changeShowState);
    			}
    			this.currentRule = options.currentRule;
    			this.offsetLeft = cache.TempProp.isFrozen ? (this.currentRule.displayPosition.offsetLeft || 0) : 0;
    			this.offsetTop = cache.TempProp.isFrozen ? (this.currentRule.displayPosition.offsetTop || 0) : 0;
    			this.userViewLeft = cache.TempProp.isFrozen ? modelColList.getModelByAlias(cache.UserView.colAlias).get('left') : 0;
    			this.userViewTop = cache.TempProp.isFrozen ? modelRowList.getModelByAlias(cache.UserView.rowAlias).get('top') : 0;
    		},
    		/**
    		 * 渲染单元格
    		 * @method render 
    		 */
    		render: function() {
    			var modelJSON = this.model.toJSON(),
    				clipRegion;
    			/**
    			 * 设置模板
    			 * @property template
    			 * @type {html}
    			 */
    			clipRegion = selectRegions.getModelByType("clip")[0];
    			if (clipRegion !== undefined) {
    				clipRegion.destroy();
    			}
    			this.template = Handlebars.compile($('#tempItemCell').html());
    			// this.$el.removeAttr('style');
    			this.$el.css({
    				'width': modelJSON.physicsBox.width,
    				'height': modelJSON.physicsBox.height,
    				'left': modelJSON.physicsBox.left - this.offsetLeft - this.userViewLeft - 1,
    				'top': modelJSON.physicsBox.top - this.offsetTop - this.userViewTop - 1
    			}).html(this.template(modelJSON));
    
    			// this is improve poiont , marinottejs itemview function can be replace this bug
    			this.$contentBody = $('.bg', this.$el);
    			//end
    
    			this.editStatus(modelJSON);
    			this.changeTopBorder(modelJSON);
    			this.changeLeftBorder(modelJSON);
    			this.changeBottomBorder(modelJSON);
    			this.changeRightBorder(modelJSON);
    			this.changeBackground(modelJSON);
    			this.setTransverseAlign(modelJSON);
    			this.setVerticalAlign(modelJSON);
    			this.setBold(modelJSON);
    			this.setItalic(modelJSON);
    			this.setFontColor(modelJSON);
    			this.setFont(modelJSON);
    			this.setFontSize(modelJSON);
    			this.wordWrap(modelJSON);
    			this.changeTexts(modelJSON);
    			return this;
    		},
    		/**
    		 * 更新单元格显示状态
    		 * @method changeShowState 
    		 */
    		changeShowState: function() {
    			if (this.model.get('showState') === false) {
    				this.remove();
    			}
    		},
    		getDisplayText: function(modelJSON, text) {
    			var fontsize = modelJSON.content.size,
    				occupyX = modelJSON.occupy.x,
    				occupyY = modelJSON.occupy.y,
    				headModelCol,
    				headModelRow,
    				texts,
    				i = 0,
    				height;
    			if (text.indexOf("\n") > 0 && (this.model.get('content').wordWrap === null)) {
    				this.model.set({
    					'content.wordWrap': true
    				});
    			}
    			texts = text.split('\n');
    			text = '';
    			if (this.model.get('content').wordWrap === false) {
    				for (i = 0; i < texts.length; i++) {
    					text += texts[i];
    				}
    			} else {
    				for (i = 0; i < texts.length; i++) {
    					text += texts[i] + '<br>';
    				}
    			}
    
    
    			if (occupyX.length > 1 || occupyY.length > 1) return text;
    
    			if (this.model.get("content").wordWrap === true) {
    				headModelCol = headItemCols.getModelByAlias(occupyX[0]);
    				headModelRow = headItemRows.getModelByAlias(occupyY[0]);
    				height = getHeight(text, fontsize, headModelCol.get('width')) + 4;
    				if (headModelRow.get('height') < height) setCellHeight('sheetId', headModelRow.get('displayName'), height);
    			}
    			return text;
    
    			function getHeight(text, fontsize, containerWidth) {
    				var div = $("#__getHeight"),
    					height;
    				if (div.get(0) === undefined) {
    					$("body").append('<div id="__getHeight" style="visibility: hidden; word-break: break-all;font-size:' + fontsize + ';width:' + containerWidth + 'px">' + text + '</div>');
    					div = $("#__getHeight");
    				}
    				height = div.get(0).offsetHeight;
    				div.remove();
    				return height;
    			}
    		},
    		/**
    		 * 设置单元格背景颜色
    		 * @method setFontColor 
    		 * @param modelJSON {modelJSON} 对象属性集合
    		 */
    		setFontColor: function(modelJSON) {
    			if (modelJSON.content.color !== '') {
    				this.$el.css({
    					"color": modelJSON.content.color
    				});
    			}
    
    		},
    		/**
    		 * 设置单元格内容字体
    		 * @method setFont 
    		 * @param modelJSON {modelJSON} 对象属性集合
    		 */
    		setFont: function(modelJSON) {
    			if (modelJSON.content.family !== '') {
    				this.$el.css({
    					"font-family": modelJSON.content.family
    				});
    			}
    		},
    		/**
    		 * 设置单元格内容字体大小
    		 * @method setFontSize 
    		 * @param modelJSON {modelJSON} 对象属性集合
    		 */
    		setFontSize: function(modelJSON) {
    			if (modelJSON.content.size !== '') {
    				this.$el.css({
    					"font-size": modelJSON.content.size
    				});
    			}
    		},
    		/**
    		 * 设置单元格内容斜体
    		 * @method setItalic 
    		 * @param modelJSON {modelJSON} 对象属性集合
    		 */
    		setItalic: function(modelJSON) {
    			if (modelJSON.content.italic) {
    				this.$el.css({
    					'font-style': 'italic'
    				});
    			} else {
    				this.$el.css({
    					'font-style': 'normal'
    				});
    			}
    		},
    		/**
    		 * 设置单元格内容粗体
    		 * @method setBold 
    		 * @param modelJSON {modelJSON} 对象属性集合
    		 */
    		setBold: function(modelJSON) {
    			if (modelJSON.content.bd) {
    				this.$el.css({
    					'font-weight': 'bold'
    				});
    			} else {
    				this.$el.css({
    					'font-weight': 'normal'
    				});
    			}
    
    		},
    		/**
    		 * 设置单元格内容水平对齐方式
    		 * @method setTransverseAlign 
    		 * @param modelJSON {modelJSON} 对象属性集合
    		 */
    		setTransverseAlign: function(modelJSON) {
    			var alignRowPosi = modelJSON.content.alignRow;
    			if (alignRowPosi === 'center' || alignRowPosi === 'right') {
    				this.$el.css({
    					'text-align': alignRowPosi
    				});
    				return;
    			}
    			this.$el.css({
    				'text-align': 'left'
    			});
    		},
    		/**
    		 * 设置单元格内容水平对齐方式
    		 * @method setVerticalAlign 
    		 * @param modelJSON {modelJSON} 对象属性集合
    		 */
    		setVerticalAlign: function(modelJSON) {
    			// console.log(modelJSON.content.alignCol);
    			// console.log(modelJSON.content.alignRow);
    			if (modelJSON.content.alignCol === 'middle') {
    				this.$el.children('div').css({
    					"vertical-align": "middle",
    				});
    			} else if (modelJSON.content.alignCol === 'bottom') {
    				this.$el.children('div').css({
    					"vertical-align": "bottom"
    				});
    			} else {
    				this.$el.children('div').css({
    					"vertical-align": "top"
    				});
    			}
    		},
    		/**
    		 * 设置单元格文本格式
    		 * @method getModelDisplayTexts 
    		 */
    		getFormatTexts: function() {
    			//获取当前文本
    
    			var modelJSON = this.model.toJSON(),
    				cellContent = modelJSON.content.texts,
    				cellFormat = modelJSON.customProp.format,
    				displayContent = '',
    				texts, i = 0;
    			//ps:设置显示文本
    			switch (cellFormat) {
    				case 'num':
    					displayContent = this.contentToDigital();
    					break;
    				case 'time':
    					displayContent = this.contentToDate();
    					break;
    				default:
    					displayContent = this.contentToText();
    					break;
    			}
    			return displayContent;
    		},
    		/**
    		 * 转换单元格内容格式为数字
    		 * @method contentToDigital 
    		 */
    		contentToDigital: function() {
    			var modelJSON = this.model.toJSON(),
    				cellContent = modelJSON.content.texts,
    				cellAlignRow = modelJSON.content.alignRow,
    				//校验是否而合法数字
    				digitalReg = new RegExp(/^(-?\d+)(\.\d+)?$/),
    				tempValue;
    
    			if (digitalReg.test(cellContent) === false) {
    				return this.contentToText();
    			}
    
    			//去除为0的首字母
    			if (/^0\./.test(cellContent) === false) {
    				cellContent = cellContent.replace(/\b(0+)/gi, '');
    				this.model.set('content.texts', cellContent);
    			}
    
    			//数字格式文本右对齐
    			if (cellAlignRow === undefined || cellAlignRow === '') {
    				this.$el.css({
    					'text-align': 'right'
    				});
    			}
    			tempValue = Number(cellContent);
    			return tempValue.toFixed(2);
    		},
    		/**
    		 * 转换单元格内容格式为日期
    		 * @method contentToDate 
    		 * @param cellContent {string} 文本
    		 */
    		contentToDate: function() {
    			var modelJSON = this.model.toJSON(),
    				cellContent = modelJSON.content.texts,
    				cellAlignRow = modelJSON.content.alignRow;
    			var result = cellContent.match(/^(\d{1,4})(-|\/)(\d{1,2})\2(\d{1,2})$/);
    
    			if (result === null) {
    				return this.contentToText();
    			}
    			var tempDate = new Date(result[1], result[3] - 1, result[4]);
    			if (tempDate.getFullYear() == result[1] && (tempDate.getMonth() + 1) == result[3] && tempDate.getDate() == result[4]) {
    				//时间格式文本右对齐
    				if (cellAlignRow === undefined || cellAlignRow === '') {
    					this.$el.css({
    						'text-align': 'right'
    					});
    				}
    				return result[1] + '/' + result[3] + '/' + result[4];
    			} else {
    				return this.contentToText();
    			}
    		},
    		/**
    		 * 转换单元格内容格式为文本
    		 * @method contentToDate 
    		 */
    		contentToText: function() {
    			var modelJSON,
    				cellContent,
    				cellAlignRow;
    
    			modelJSON = this.model.toJSON();
    			cellContent = modelJSON.content.texts;
    			cellAlignRow = modelJSON.content.alignRow;
    			//文本左对齐
    			if (cellAlignRow === undefined || cellAlignRow === '') {
    				this.$el.css({
    					'text-align': 'left'
    				});
    			}
    			return cellContent;
    		},
    		editStatus: function(modelJSON) {},
    		/**
    		 * 渲染上边框
    		 * @method changeTopBorder 
    		 * @param modelJSON {modelJSON} 对象属性集合
    		 */
    		changeTopBorder: function(modelJSON) {
    			if (modelJSON.border.top) {
    				this.$el.css({
    					'borderTopColor': '#000'
    				});
    			} else {
    				this.$el.css({
    					'borderTopColor': 'transparent'
    				});
    			}
    		},
    		/**
    		 * 渲染左边框
    		 * @method changeLeftBorder 
    		 * @param modelJSON {modelJSON} 对象属性集合
    		 */
    		changeLeftBorder: function(modelJSON) {
    			if (modelJSON.border.left) {
    				this.$el.css({
    					'borderLeftColor': '#000'
    				});
    			} else {
    				this.$el.css({
    					'borderLeftColor': 'transparent'
    				});
    			}
    		},
    		/**
    		 * 渲染下边框边框
    		 * @method changeBottomBorder 
    		 * @param modelJSON {modelJSON} 对象属性集合
    		 */
    		changeBottomBorder: function(modelJSON) {
    			if (modelJSON.border.bottom) {
    				this.$el.css({
    					'borderBottomColor': '#000'
    				});
    			} else {
    				this.$el.css({
    					'borderBottomColor': 'transparent'
    				});
    			}
    		},
    		/**
    		 * 渲染右边框边框
    		 * @method changeRightBorder 
    		 * @param modelJSON {modelJSON} 对象属性集合
    		 */
    		changeRightBorder: function(modelJSON) {
    			if (modelJSON.border.right) {
    				this.$el.css({
    					'borderRightColor': '#000'
    				});
    			} else {
    				this.$el.css({
    					'borderRightColor': 'transparent'
    				});
    			}
    		},
    		/**
    		 * 渲染单元格背景
    		 * @method changeBackground 
    		 * @param modelJSON {modelJSON} 对象属性集合
    		 */
    		changeBackground: function(modelJSON) {
    			if (modelJSON.customProp.background !== '') {
    				this.$contentBody.css({
    					'backgroundColor': modelJSON.customProp.background
    				});
    			} else {
    				this.$contentBody.css({
    					'backgroundColor': '#fff'
    				});
    			}
    		},
    		wordWrap: function(modelJSON) {
    			if (modelJSON.content.wordWrap === true) {
    				this.$contentBody.css({
    					'word-break': 'break-all'
    				});
    			} else {
    				this.$contentBody.css({
    					'white-space': 'nowrap'
    				});
    			}
    		},
    		/**
    		 * 更新文本内容
    		 * @method changeTexts 
    		 * @param modelJSON {modelJSON} 对象属性集合
    		 */
    		changeTexts: function(modelJSON) {
    			this.$contentBody.html(this.getDisplayText(modelJSON, this.getFormatTexts()));
    		},
    		/**
    		 * 显示输入框，编辑文本内容
    		 * @method editting 
    		 */
    		editting: function() {
    			var inputContainer = new app.View.InputContainer({
    				model: model
    			});
    			this.$cellsContainer.append(inputContainer.render().el);
    
    			inputContainer.$el.focus();
    		},
    		/**
    		 * 移除视图
    		 * @method destroy 
    		 */
    		destroy: function() {
    			if (this.model.get('isDestroy')) {
    				this.remove();
    			}
    		},
    		modelDestroy:function(){
    			this.remove();
    		}
    	});
    	return CellContainer;
    });
    define('views/rowsGridContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		config = require('spreadsheet/config'),
    		cache = require('basic/tools/cache'),
    		headItemRows = require('collections/headItemRow'),
    		cells = require('collections/cells'),
    		GridLineRowContainer = require('views/gridLineRowContainer');
    
    	/**
    	 * RowsGridContainer
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class RowsGridContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var RowsGridContainer = Backbone.View.extend({
    		/**
    		 * @property {element} className
    		 */
    		className: 'row-container',
    		/**
    		 * 初始化事件监听
    		 * @method initialize
    		 */
    		initialize: function(option) {
    			// _.bindAll(this, 'callScreenContainer');
    			/**
    			 * 已经加载行数
    			 * @property {int} rowNumber
    			 */
    			this.rowNumber = 0;
    			this.currentRule = cache.CurrentRule;
    			if (cache.TempProp.isFrozen !== true || this.currentRule.displayPosition.endRowIndex === undefined) {
    				this.listenTo(headItemRows, 'add', this.addGridLineRow);
    			}
    			Backbone.on('call:rowsGridContainer', this.rowsGridContainer, this);
    		},
    		rowsGridContainer: function(receiveFunc) {
    			receiveFunc(this);
    		},
    		/**
    		 * 渲染本身对象
    		 * @method render
    		 * @return {object} 返回自身对象`this`
    		 */
    		render: function() {
    			var i = 0,
    				gridLineRowList,
    				gridLineRowRegionList,
    				len;
    			gridLineRowList = gridLineRowRegionList = headItemRows.models;
    			if (cache.TempProp.isFrozen) {
    				if (this.currentRule.displayPosition.endRowIndex !== undefined) {
    					gridLineRowRegionList = gridLineRowList.slice(this.currentRule.displayPosition.startRowIndex, this.currentRule.displayPosition.endRowIndex);
    				} else {
    					gridLineRowRegionList = gridLineRowList.slice(this.currentRule.displayPosition.startRowIndex);
    				}
    			}
    			len = gridLineRowRegionList.length;
    			for (; i < len; i++) {
    				this.addGridLineRow(gridLineRowRegionList[i]);
    				this.rowNumber++;
    			}
    			return this;
    		},
    		/**
    		 * 渲染view，增加行在`grid`区域内
    		 * @method addGridLineRow
    		 * @param  {object} modelGridLineRow 行model对象
    		 */
    		addGridLineRow: function(modelGridLineRow) {
    			var gridLineRow = new GridLineRowContainer({
    				model: modelGridLineRow,
    				frozenTop: this.currentRule.displayPosition.offsetTop,
    				endIndex: this.currentRule.displayPosition.endRowIndex
    			});
    			this.$el.append(gridLineRow.render().el);
    		},
    		/**
    		 * 设置新对象属性
    		 * @method newAttrRow
    		 * @return {object} 新对象属性
    		 * @deprecated 在行列调整后将会过时
    		 */
    		newAttrRow: function() {
    			var currentObject = {
    				alias: (this.rowNumber + 1).toString(),
    				top: this.rowNumber * config.User.cellHeight,
    				height: config.User.cellHeight - 1,
    				displayName: app.basic.buildRowAlias(this.rowNumber)
    			};
    			return currentObject;
    		},
    		/**
    		 * 视图销毁
    		 * @method destroy
    		 */
    		destroy: function() {
    			this.remove();
    		}
    	});
    	return RowsGridContainer;
    });
    /**
     * GridLineColContainer
     * @author ray wu
     * @module view
     * @since 1.0.0
     * @main view
     */
    define('views/gridLineColContainer',function() {
    	
    	var Backbone = require('lib/backbone');
    	var headItemCols = require('collections/headItemCol');
    	var cache = require('basic/tools/cache');
    	var config = require('spreadsheet/config');
    	var util = require('basic/util/clone');
    	/**
    	 * @class GridLineColContainer
    	 */
    	var GridLineColContainer = Backbone.View.extend({
    		/**
    		 * @property {element} className
    		 */
    		className: 'col',
    		/**
    		 * 出书啊监听
    		 * @method initialize
    		 */
    		initialize: function() {
    			var modelList, currentIndex, currentModel;
    			this.offsetLeft = 0;
    			this.listenTo(this.model, 'change:isView', this.destroy);
    			this.listenTo(this.model, 'change:left', this.changeLeft);
    			this.listenTo(this.model, 'change:width', this.changeWidth);
    			modelList = headItemCols;
    			currentModel = modelList.getModelByAlias(cache.TempProp.colAlias);
    			this.userViewLeft = cache.TempProp.isFrozen ? modelList.getModelByAlias(cache.UserView.colAlias).get('left') : 0;
    			this.offsetLeft = cache.TempProp.isFrozen && cache.CurrentRule.autoColAlign ? ((currentModel.get('left') - this.userViewLeft) || 0) : 0;
    		},
    		/**
    		 * 渲染本身对象
    		 * @method render
    		 * @return {object} 返回自身对象`this`
    		 */
    		render: function() {
    			this.changeLeft();
    			this.changeWidth();
    			return this;
    		},
    		changeLeft: function() {
    			this.$el.css({
    				left: this.model.toJSON().left - this.offsetLeft - this.userViewLeft
    			});
    		},
    		changeWidth: function() {
    			this.$el.css({
    				width: this.model.toJSON().width
    			});
    		},
    		destroy: function() {
    			this.remove();
    		}
    	});
    	return GridLineColContainer;
    });
    //attention bug , bettwen this.number has mixed and user configure file. isn't exist worth
    
    define('views/colsGridContainer',function() {
    	
    	var Backbone = require('lib/backbone'),
    		config = require('spreadsheet/config'),
    		binary = require('basic/util/binary'),
    		cache = require('basic/tools/cache'),
    		headItemCols = require('collections/headItemCol'),
    		buildColAlias= require('basic/tools/buildcolalias'),
    		GridLineColContainer = require('views/gridLineColContainer');
    
    	/**
    	 * ColsGridContainer
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class ColsGridContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var ColsGridContainer = Backbone.View.extend({
    		/**
    		 * @property {element} el
    		 * @default div
    		 */
    		className: 'cols-container',
    		/**
    		 * 初始化事件监听
    		 * @method initialize
    		 */
    		initialize: function(option) {
    			/**
    			 * 已经加载列数
    			 * @property {int} colNumber
    			 * @default 0
    			 */
    			this.colNumber = 0;
    			this.listenTo(headItemCols, 'add', this.addGridLineCol);
    		},
    		/**
    		 * 渲染本身对象
    		 * @method render
    		 * @return {object} 返回自身对象`this`
    		 */
    		render: function() {
    			var i = 0,
    				gridLineColList,
    				gridLineColRegionList,
    				len;
    			gridLineColList = gridLineColRegionList = headItemCols.models;
    			if (cache.TempProp.isFrozen) {
    				this.currentRule = cache.CurrentRule;
    				if (this.currentRule.displayPosition.endColIndex !== undefined) {
    					gridLineColRegionList = headItemCols.models.slice(this.currentRule.displayPosition.startColIndex, this.currentRule.displayPosition.endColIndex);
    				} else {
    					gridLineColRegionList = headItemCols.models.slice(this.currentRule.displayPosition.startColIndex);
    				}
    			}
    			len = gridLineColRegionList.length;
    			for (; i < len; i++) {
    				this.addGridLineCol(gridLineColRegionList[i]);
    				this.colNumber++;
    			}
    			return this;
    		},
    		/**
    		 * 渲染view，增加列在`grid`区域内
    		 * @method addGridLineCol
    		 * @param  {object} modelGridLineCol 列model对象
    		 */
    		addGridLineCol: function(modelGridLineCol) {
    			var gridLineCol = new GridLineColContainer({
    				model: modelGridLineCol,
    				frozenLeft: 0
    			});
    			this.$el.append(gridLineCol.render().el);
    		},
    		/**
    		 * collection增加新model对象
    		 * @method createGridLineCol
    		 */
    		createGridLineCol: function() {
    			headItemCols.add(this.newAttrCol());
    		},
    		/**
    		 * 设置新对象属性
    		 * @method newAttrCol
    		 * @return {object} 新对象属性
    		 * @deprecated 在行列调整后将会过时
    		 */
    		newAttrCol: function() {
    			var currentObject;
    			currentObject = {
    				alias: (this.colNumber + 1).toString(),
    				left: this.colNumber * config.User.cellWidth,
    				width: config.User.cellWidth - 1,
    				displayName: buildColAlias(this.colNumber)
    			};
    			return currentObject;
    		},
    		/**
    		 * 视图销毁
    		 * @method destroy
    		 */
    		destroy: function() {
    			this.remove();
    		}
    	});
    	return ColsGridContainer;
    });
    define('views/gridLineContainer',function() {
        
        var $ = require('lib/jquery'),
            _ = require('lib/underscore'),
            Backbone = require('lib/backbone'),
            RowsGridContainer = require('views/rowsGridContainer'),
            ColsGridContainer = require('views/colsGridContainer');
        /**
         * GridLineContainer
         * @author ray wu
         * @since 0.1.0
         * @class GridLineContainer  
         * @module views
         * @extends Backbone.View
         * @constructor
         */
        var GridLineContainer = Backbone.View.extend({
            /**
             * @property {element} className
             */
            className: 'line-container',
            /**
             * 初始化函数
             * @method initialize
             */
            initialize: function() {
    
            },
            /**
             * 渲染本身对象
             * @method render
             * @return {object} 返回自身对象`this`
             */
            render: function() {
                this.rowsGridContainer = new RowsGridContainer();
                this.$el.append(this.rowsGridContainer.render().el);
    
                this.colsGridContainer = new ColsGridContainer();
                this.$el.append(this.colsGridContainer.render().el);
                return this;
            },
            /**
             * 视图销毁
             * @method destroy
             */
            destroy: function() {
                this.rowsGridContainer.destroy();
                this.colsGridContainer.destroy();
                this.remove();
            }
        });
        return GridLineContainer;
    });
    define('views/contentCellsContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		cache = require('basic/tools/cache'),
    		config = require('spreadsheet/config'),
    		util = require('basic/util/clone'),
    		send = require('basic/tools/send'),
    		loadRecorder = require('basic/tools/loadrecorder'),
    		original = require('basic/tools/original'),
    		headItemCols = require('collections/headItemCol'),
    		headItemRows = require('collections/headItemRow'),
    		cells = require('collections/cells'),
    		CellContainer = require('views/cellContainer'),
    		ContentCellsContainer;
    
    
    	/**
    	 * ContentContainer
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class ContentContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	ContentCellsContainer = Backbone.View.extend({
    		/**
    		 * @property {element} el
    		 */
    		className: 'content-list',
    		/**
    		 * 初始化监听事件
    		 * @method initialize
    		 */
    		initialize: function() {
    			this.currentRule = util.clone(cache.CurrentRule);
    			Backbone.on('event:contentCellsContainer:reloadCells', this.reloadCells, this);
    			this.listenTo(cells, 'add', this.addCell);
    		},
    		/**
    		 * 视图渲染方法
    		 * @method render
    		 */
    		render: function() {
    			this.fillCells();
    			return this;
    		},
    		/**
    		 * 填充单元格集合
    		 * @method fillCells
    		 */
    		fillCells: function() {
    			var len, i, cellsList;
    			cellsList = cells.where({
    				isDestroy: false
    			});
    			len = cellsList.length;
    			for (i = 0; i < len; i++) {
    				this.addCell(cellsList[i]);
    			}
    		},
    		/**
    		 * 重新加载后台保存cell对象
    		 */
    		reloadCells: function() {
    			var i = 0,
    				len = cells.length,
    				cellModel,
    				top,
    				bottom;
    
    			for (; i < len; i++) {
    				cellModel = cells.models[0].destroy();
    			}
    			cache.CellsPosition.strandX = {};
    			cache.CellsPosition.strandY = {};
    			cache.cellRegionPosi.vertical = [];
    			top = cache.visibleRegion.top;
    			bottom = cache.visibleRegion.bottom;
    			this.getCells(top, bottom);
    			loadRecorder.insertPosi(top, bottom, cache.cellRegionPosi.vertical);
    			len = cells.length;
    			i = 0;
    			for (; i < len; i++) {
    				this.addCell(cells.models[i]);
    			}
    			
    		},
    		getCells: function(top, bottom) {
    			send.PackAjax({
    				url: 'excel.htm?m=openExcel',
    				async: false,
    				data: JSON.stringify({
    					excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    					sheetId: '1',
    					rowBegin: top,
    					rowEnd: bottom
    				}),
    				success: function(data) {
    					if (data === '') {
    						return;
    					}
    					data = data.returndata;
    					var cells = data.spreadSheet[0].sheet.cells;
    					original.analysisCellData(cells);
    				}
    			});
    
    		},
    		/**
    		 * view创建一个单元格
    		 * @method addCell
    		 * @param  {object} cell
    		 */
    		addCell: function(cell) {
    			if (cache.TempProp.isFrozen) {
    				var displayPosition = this.currentRule.displayPosition,
    					currentOccupy,
    					len, i,
    					headItemColList = headItemCols,
    					headItemRowList = headItemRows,
    					cellRowStartIndex,
    					cellColStartIndex,
    					cellRowEndIndex, cellColEndIndex;
    				//ps:增加循环判断
    				currentOccupy = cell.get('occupy');
    				len = currentOccupy.x.length;
    				cellColStartIndex = headItemColList.getIndexByAlias(currentOccupy.x[0]);
    				cellColEndIndex = headItemColList.getIndexByAlias(currentOccupy.x[len - 1]);
    
    				for (i = 0; i < currentOccupy.y.length; i++) {
    					if (headItemRowList.getIndexByAlias(currentOccupy.y[i]) !== -1) {
    						cellRowStartIndex = headItemRowList.getIndexByAlias(currentOccupy.y[i]);
    						break;
    					}
    				}
    				for (i = currentOccupy.y.length - 1; i > -1; i--) {
    					if (headItemRowList.getIndexByAlias(currentOccupy.y[i]) !== -1) {
    						cellRowEndIndex = headItemRowList.getIndexByAlias(currentOccupy.y[i]);
    						break;
    					}
    				}
    				if (isNumber(displayPosition.startRowIndex) &&
    					cellRowEndIndex < displayPosition.startRowIndex ||
    					isNumber(displayPosition.endRowIndex) &&
    					cellRowStartIndex > displayPosition.endRowIndex - 1 ||
    					isNumber(displayPosition.startColIndex) &&
    					cellColEndIndex < displayPosition.startColIndex ||
    					isNumber(displayPosition.endColIndex) &&
    					cellColStartIndex > displayPosition.endColIndex - 1) {
    					return;
    				}
    
    			}
    
    			this.cellView = new CellContainer({
    				model: cell,
    				currentRule: this.currentRule
    			});
    			this.$el.append(this.cellView.render().el);
    
    			function isNumber(source) {
    				return typeof source === 'number';
    			}
    
    		},
    		/**
    		 * 视图销毁
    		 * @method destroy
    		 */
    		destroy: function() {
    			this.remove();
    		}
    	});
    	return ContentCellsContainer;
    });
    define('views/inputContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		cache = require('basic/tools/cache'),
    		util = require('basic/util/clone'),
    		config = require('spreadsheet/config'),
    		binary = require('basic/util/binary'),
    		send = require('basic/tools/send'),
    		siderLineRows = require('collections/siderLineRow'),
    		siderLineCols = require('collections/siderLineCol'),
    		headItemRows = require('collections/headItemRow'),
    		headItemCols = require('collections/headItemCol'),
    		selectRegions = require('collections/selectRegion'),
    		InputContainer;
    
    
    	/**
    	 * InputContainer
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class InputContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	InputContainer = Backbone.View.extend({
    		/**
    		 * 设置标签类型
    		 * @property tagName
    		 * @type {String}
    		 */
    		tagName: 'textarea',
    		/**
    		 * 设置标签class属性
    		 * @method className
    		 * @type {String}
    		 */
    		className: 'edit-frame',
    		/**
    		 * 绑定鼠标事件
    		 * @method events
    		 * @type {Object}
    		 */
    		events: {
    			'blur': 'close',
    			'input': 'adjustWidth',
    			'propertychange': 'adjustWidth',
    			'keydown': 'keyHandle'
    		},
    		/**
    		 * 类初始化函数
    		 * @method initialize
    		 */
    		initialize: function(options) {
    			var modelRowList = headItemRows,
    				modelColList = headItemCols;
    			this.currentRule = options.currentRule;
    			this.offsetLeft = cache.TempProp.isFrozen ? (this.currentRule.displayPosition.offsetLeft || 0) : 0;
    			this.offsetTop = cache.TempProp.isFrozen ? (this.currentRule.displayPosition.offsetTop || 0) : 0;
    			this.userViewTop = cache.TempProp.isFrozen ? modelRowList.getModelByAlias(cache.UserView.rowAlias).get('top') : 0;
    			this.userViewLeft = cache.TempProp.isFrozen ? modelColList.getModelByAlias(cache.UserView.colAlias).get('left') : 0;
    		},
    		/**
    		 * 视图显示函数
    		 * @method render
    		 */
    		render: function() {
    			var modelJSON = this.model.toJSON();
    			if (modelJSON.content.italic === true) this.$el.css({
    				'font-weight': 'bold'
    			});
    			if (modelJSON.content.bd === true) this.$el.css({
    				'font-style': 'italic'
    			});
    			this.$el.css({
    				'width': modelJSON.physicsBox.width,
    				'height': modelJSON.physicsBox.height - 2,
    				'left': modelJSON.physicsBox.left - this.offsetLeft - this.userViewLeft + 1,
    				'top': modelJSON.physicsBox.top - this.offsetTop - this.userViewTop + 1,
    				'color': modelJSON.content.color,
    				'font-size': modelJSON.content.size,
    				'font-family': modelJSON.content.family,
    			}).val(modelJSON.content.texts);
    			this.adjustWidth();
    			return this;
    		},
    		/**
    		 * 调整输入框宽度
    		 * @method adjustWidth
    		 * @param e {event} propertychange函数
    		 */
    		adjustWidth: function(e) {
    			var tempSpan,
    				currentWidth,
    				tempSpanWidth;
    			tempSpan = $('<span/>').text(this.el.value);
    			$('body').append(tempSpan);
    			currentWidth = parseInt(this.el.offsetWidth, 0);
    			tempSpanWidth = tempSpan[0].offsetWidth;
    			if (currentWidth - 10 < tempSpanWidth && this.model.get('physicsBox').width < tempSpanWidth) {
    				this.$el.width(tempSpanWidth + 50);
    			}
    			tempSpan.remove();
    		},
    		/**
    		 * 输入框移除输入焦点，视图销毁
    		 * @method close
    		 * @param e {event}  输入焦点移除
    		 */
    		close: function(e) {
    			var currentTexts, headLineRowModelList, headLineColModelList, modelIndexCol, modelIndexRow;
    			currentTexts = this.$el.val();
    			headLineRowModelList = headItemRows.models;
    			headLineColModelList = headItemCols.models;
    			modelIndexCol = binary.modelBinary(this.model.get('physicsBox').left,
    				headLineColModelList, 'left', 'width', 0, headLineColModelList.length - 1);
    			modelIndexRow = binary.modelBinary(this.model.get('physicsBox').top,
    				headLineRowModelList, 'top', 'height', 0, headLineRowModelList.length - 1);
    
    			send.PackAjax({
    				url: 'text.htm?m=data',
    				data: JSON.stringify({
    					excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    					sheetId: '1',
    					coordinate: {
    						startX: modelIndexCol,
    						startY: modelIndexRow,
    						startAliasCol: modelIndexCol,
    						startAliasRow: modelIndexRow,
    					},
    					content: encodeURIComponent(currentTexts)
    				})
    			});
    			this.model.set('content.texts', currentTexts);
    			this.destroy();
    		},
    		isShortKey: function(needle) {
    			var prop,
    				keyboard = config.keyboard;
    			for (prop in keyboard) {
    				if (keyboard[prop] === needle) {
    					return true;
    				}
    			}
    			return false;
    		},
    		keyHandle: function(e) {
    			var aliasRow,
    				aliasCol,
    				endIndexRow,
    				startIndexCol,
    				selectRegion,
    				headItemColList,
    				headItemRowList,
    				width,
    				height,
    				currentTexts,
    				len, i, isShortKey, keyboard;
    			keyboard = config.keyboard;
    			isShortKey = this.isShortKey(e.keyCode);
    
    			if (isShortKey) {
    				switch (e.keyCode) {
    					case keyboard.enter:
    						if (e.altKey) {
    							this.$el.val(this.$el.val()+'\r\n');
    							return;
    						} else {
    							this.close();
    							Backbone.trigger('event:mainContainer:nextCellPosition', 'DOWN');
    							Backbone.trigger('event:cellsContainer:selectRegionChange', 'DOWN');
    						}
    						break;
    				}
    			}
    		},
    		/**
    		 * 视图销毁
    		 * @method destroy
    		 */
    		destroy: function() {
    			this.undelegateEvents();
    			this.remove();
    		}
    	});
    	return InputContainer;
    });
    define('views/selectRegion',function() {
    	
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		Handlebars = require('lib/handlebars'),
    		util = require('basic/util/clone'),
    		binary = require('basic/util/binary'),
    		cache = require('basic/tools/cache'),
    		send = require('basic/tools/send'),
    		Cell = require('models/cell'),
    		headItemRows = require('collections/headItemRow'),
    		headItemCols = require('collections/headItemCol'),
    		cells = require('collections/cells'),
    		InputContainer = require('views/inputContainer'),
    		SelectRegion;
    
    	/**
    	 * 选中区域视图类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class SelectRegion  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    
    	SelectRegion = Backbone.View.extend({
    		/**
    		 * 设置class属性
    		 * @property className
    		 * @type {String}
    		 */
    		className: 'selected-container',
    		/**
    		 * 绑定鼠标事件
    		 * @property events 
    		 * @type {Object}
    		 */
    		events: {
    			'dblclick': 'editState'
    		},
    		/**
    		 * 视图初始化函数
    		 * @method initialize
    		 */
    		initialize: function(options) {
    			if (this.model.get("selectType") === "operation") {
    				Backbone.on('event:selectRegion:patchOprCell', this.patchOprCell, this);
    				Backbone.on('event:selectRegion:createInputContainer', this.addInputContainer, this);
    			}
    			this.listenTo(this.model, 'change', this.changePosition);
    			this.listenTo(this.model, 'destroy', this.destroy);
    			if (options.currentRule !== undefined) {
    				this.currentRule = options.currentRule;
    			} else {
    				this.currentRule = util.clone(cache.CurrentRule);
    			}
    			this.userViewTop = cache.TempProp.isFrozen ? headItemRows.getModelByAlias(cache.UserView.rowAlias).get('top') : 0;
    			this.userViewLeft = cache.TempProp.isFrozen ? headItemCols.getModelByAlias(cache.UserView.colAlias).get('left') : 0;
    			this.offsetLeft = cache.TempProp.isFrozen ? (this.currentRule.displayPosition.offsetLeft || 0) : 0;
    			this.offsetTop = cache.TempProp.isFrozen ? (this.currentRule.displayPosition.offsetTop || 0) : 0;
    		},
    		/**
    		 * 页面渲染方法
    		 * @method render
    		 */
    		render: function() {
    			this.changePosition();
    			this.template = Handlebars.compile($('#tempSelectContainer').html());
    			this.$el.html(this.template());
    			this.triggerCallback();
    			return this;
    		},
    		addInputContainer: function(text) {
    			var gridLineRowModelList,
    				gridLineColModelList,
    				modelIndexRow,
    				modelIndexCol,
    				cellModel,
    				cellModelList,
    				modelJSON = this.model.toJSON(),
    				modelRow,
    				modelCol,
    				aliasRow,
    				aliasCol;
    
    			gridLineColModelList = headItemCols.models;
    			gridLineRowModelList = headItemRows.models;
    
    			modelIndexRow = binary.modelBinary(modelJSON.physicsPosi.top, gridLineRowModelList, 'top', 'height', 0, gridLineRowModelList.length - 1);
    			modelIndexCol = binary.modelBinary(modelJSON.physicsPosi.left, gridLineColModelList, 'left', 'width', 0, gridLineColModelList.length - 1);
    
    			modelRow = gridLineRowModelList[modelIndexRow];
    			modelCol = gridLineColModelList[modelIndexCol];
    
    			if (cache.TempProp.isFrozen === true) {
    				if ((modelIndexRow < this.currentRule.displayPosition.startRowIndex || modelIndexCol < this.currentRule.displayPosition.startColIndex)) {
    					return;
    				}
    				if (this.currentRule.displayPosition.endColIndex !== undefined && modelIndexCol > (this.currentRule.displayPosition.endColIndex - 1)) {
    					return;
    				}
    				if (this.currentRule.displayPosition.endRowIndex !== undefined && modelIndexRow > (this.currentRule.displayPosition.endRowIndex - 1)) {
    					return;
    				}
    			}
    
    			cellModelList = cells.getRegionCells(modelIndexCol, modelIndexRow);
    			//doesn't exist cell
    			if (cellModelList[0] === null) {
    				aliasRow = modelRow.get('alias');
    				aliasCol = modelCol.get('alias');
    				cellModel = this.createCell(modelIndexRow, modelIndexCol);
    				cells.add(cellModel);
    				cache.cachePosition(aliasRow, aliasCol, cells.length - 1);
    			} else {
    				cellModel = cellModelList[0];
    			}
    			cellModel.set('content.texts', '');
    
    			var inputContainer = new InputContainer({
    				model: cellModel,
    				currentRule: this.currentRule
    			});
    			this.viewCellsContainer.$el.append(inputContainer.render().el);
    			inputContainer.$el.focus();
    		},
    		/**
    		 * 更新显示视图大小，坐标
    		 * @method changePosition
    		 */
    		changePosition: function() {
    			var modelJSON = this.model.toJSON(),
    				height = modelJSON.physicsBox.height,
    				width = modelJSON.physicsBox.width,
    				left = modelJSON.physicsPosi.left,
    				top = modelJSON.physicsPosi.top;
    			if (left === 0) {
    				left = left - 1;
    				width = width - 1;
    			} else {
    				width = width - 2;
    			}
    			if (top === 0) {
    				top = top - 1;
    				height = height - 1;
    			} else {
    				height = height - 2;
    			}
    			this.$el.css({
    				width: width,
    				height: height,
    				left: left - this.offsetLeft - this.userViewLeft,
    				top: top - this.offsetTop - this.userViewTop
    			});
    		},
    		/**
    		 * 绑定其他视图
    		 * @method triggerCallback
    		 */
    		triggerCallback: function() {
    			Backbone.trigger('call:cellsContainer', this.callView('viewCellsContainer'));
    		},
    		callView: function(name) {
    			var object = this;
    			return function(callback) {
    				object[name] = callback;
    			};
    		},
    		/**
    		 * 选中区域内，对每一个单元格区域调用cycleCallback函数操作，如果不存在单元格，则创建后，进行操作
    		 * @method patchOprCell
    		 * @param  {Function} cycleCallback 回调函数，对单元格对象进行操作
    		 * @param  {Object} appointList   操作对象数组
    		 */
    		patchOprCell: function(cycleCallback, appointList) {
    			var currentCell,
    				currentCellList,
    				partModelList,
    				i = 0,
    				len,
    				partModel,
    				modelCellList;
    			appointList = appointList === undefined || appointList === null ? {
    				cellModel: undefined,
    				headModel: undefined
    			} : appointList;
    			getLastStatus();
    			cycleCallback = cycleCallback === undefined || cycleCallback === null ? function() {} : cycleCallback;
    			partModelList = appointList.headModel === undefined ? cells.getHeadModelByWholeSelectRegion() : appointList.headModel;
    
    			len = currentCellList.length;
    			var start = new Date();
    			for (; i < len; i++) {
    				currentCell = getLastStatus()[i];
    				partModel = partModelList[i];
    				if (currentCell === null) {
    					cells.add({
    						'occupy': {
    							'x': [partModel.occupy.x],
    							'y': [partModel.occupy.y]
    						},
    						'physicsBox': {
    							'top': partModel.physicsBox.top,
    							'left': partModel.physicsBox.left,
    							'width': partModel.physicsBox.width,
    							'height': partModel.physicsBox.height
    						}
    					});
    					cache.cachePosition(partModel.occupy.y, partModel.occupy.x, cells.length - 1);
    					modelCellList = cells.models;
    					currentCell = modelCellList[modelCellList.length - 1];
    				}
    				cycleCallback(currentCell);
    			}
    
    			function getLastStatus() {
    				currentCellList = appointList.cellModel === undefined ? cells.getCellsByWholeSelectRegion() : appointList.cellModel;
    				return currentCellList;
    			}
    		},
    		/**
    		 * 转换为编辑状态，显示输入框，并获取输入焦点
    		 * @method editState
    		 */
    		editState: function() {
    			var gridLineRowModelList,
    				gridLineColModelList,
    				modelIndexRow,
    				modelIndexCol,
    				cellModel,
    				cellModelList,
    				modelJSON = this.model.toJSON(),
    				modelRow,
    				modelCol,
    				aliasRow,
    				aliasCol;
    
    			gridLineColModelList = headItemCols.models;
    			gridLineRowModelList = headItemRows.models;
    
    			modelIndexRow = binary.modelBinary(modelJSON.physicsPosi.top, gridLineRowModelList, 'top', 'height', 0, gridLineRowModelList.length - 1);
    			modelIndexCol = binary.modelBinary(modelJSON.physicsPosi.left, gridLineColModelList, 'left', 'width', 0, gridLineColModelList.length - 1);
    
    			modelRow = gridLineRowModelList[modelIndexRow];
    			modelCol = gridLineColModelList[modelIndexCol];
    
    			cellModelList = cells.getRegionCells(modelIndexCol, modelIndexRow);
    			//doesn't exist cell
    			if (cellModelList[0] === null) {
    				aliasRow = modelRow.get('alias');
    				aliasCol = modelCol.get('alias');
    
    				//send data to back
    				send.PackAjax({
    					url: 'cells.htm?m=create',
    					data: JSON.stringify({
    						excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    						sheetId: '1',
    						coordinate: {
    							startX: modelIndexCol,
    							startY: modelIndexRow
    						}
    					})
    				});
    
    				//end
    				cellModel = this.createCell(modelIndexRow, modelIndexCol);
    				cells.add(cellModel);
    				cache.cachePosition(aliasRow, aliasCol, cells.length - 1);
    			} else {
    				cellModel = cellModelList[0];
    			}
    			this.addInput(cellModel);
    		},
    		/**
    		 * 输入框渲染
    		 * @method addInput
    		 * @param {Cell} cell 单元格对象
    		 */
    		addInput: function(cell) {
    			var inputContainer = new InputContainer({
    				model: cell,
    				currentRule: this.currentRule
    			});
    			this.viewCellsContainer.$el.append(inputContainer.render().el);
    			inputContainer.$el.focus();
    		},
    		/**
    		 * 创建单元格
    		 * @method createCell
    		 * @param  {num} indexRow 行索引
    		 * @param  {num} indexCol 列索引
    		 * @return {Cell} cell 单元格对象
    		 */
    		createCell: function(indexRow, indexCol) {
    			var cacheCell,
    				aliasCol,
    				aliasRow,
    				gridLineColList,
    				gridLineRowList;
    
    			gridLineColList = headItemCols.models;
    			gridLineRowList = headItemRows.models;
    			aliasCol = gridLineColList[indexCol].get('alias');
    			aliasRow = gridLineRowList[indexRow].get('alias');
    			var top, left, width, height;
    			top = gridLineRowList[indexRow].get('top');
    			left = gridLineColList[indexCol].get('left');
    			width = gridLineColList[indexCol].get('width');
    			height = gridLineRowList[indexRow].get('height');
    			cacheCell = new Cell();
    			cacheCell.set('occupy', {
    				x: [aliasCol],
    				y: [aliasRow]
    			});
    			cacheCell.set('physicsBox', {
    				top: top,
    				left: left,
    				width: width,
    				height: height
    			});
    			return cacheCell;
    		},
    		/**
    		 * 视图销毁
    		 * @method destroy
    		 */
    		destroy: function() {
    			if (this.model.get("selectType") === "operation") {
    				Backbone.off('event:selectRegion:patchOprCell', this.patchOprCell, this);
    				Backbone.off('event:selectRegion:createInputContainer', this.addInputContainer, this);
    			}
    			if (this.model.get('selectType') === 'drag') {
    				this.viewCellsContainer.dragView = null;
    			}
    			if (this.model.get('selectType') === 'dataSource') {
    				this.viewCellsContainer.dataSoureRegionView = null;
    			}
    			this.remove();
    		}
    	});
    	return SelectRegion;
    });
    define('views/cellsContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		binary = require('basic/util/binary'),
    		cache = require('basic/tools/cache'),
    		config = require('spreadsheet/config'),
    		util = require('basic/util/clone'),
    		listener = require('basic/util/listener'),
    		SelectRegionModel = require('models/selectRegion'),
    		headItemCols = require('collections/headItemCol'),
    		headItemRows = require('collections/headItemRow'),
    		selectRegions = require('collections/selectRegion'),
    		siderLineRows = require('collections/siderLineRow'),
    		siderLineCols = require('collections/siderLineCol'),
    		cells = require('collections/cells'),
    		GridLineContainer = require('views/gridLineContainer'),
    		ContentCellsContainer = require('views/contentCellsContainer'),
    		SelectRegionView = require('views/selectRegion');
    
    
    	/**
    	 * cells容器实体类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class CellsContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var CellsContainer = Backbone.View.extend({
    		/**
    		 * 绑定视图
    		 * @property el
    		 * @type {String}
    		 */
    		//el: '.cellsContainer',
    		className: 'cells-container',
    		/**
    		 * 绑定鼠标事件
    		 * @property events
    		 * @type {Object}
    		 */
    		events: {
    			'mousedown': 'located',
    			'dragover': 'onDragOver',
    			'dragleave': 'onDragLeave',
    			'drop': 'onDrop',
    		},
    		/**
    		 * 类初始化调用方法，绑定集合监听
    		 * @method initialize
    		 * @param  allAttributes 容器属性
    		 */
    		initialize: function(options) {
    			Backbone.on('call:cellsContainer', this.callCellsContainer, this);
    			Backbone.on('event:cellsContainer:createDataSourceRegion', this.createDataSourceRegion, this);
    			Backbone.on('event:cellsContainer:adjustSelectRegion', this.adjustSelectRegion, this);
    			Backbone.on('event:cellsContainer:adaptSelectRegion', this.adaptSelectRegion, this);
    			Backbone.on('event:cellsContainer:getPosi', this.getPosi, this);
    			Backbone.on('event:cellsContainer:destroy', this.destroy, this);
    			Backbone.on('event:cellsContainer:unBindDrag', this.unBindDrag, this);
    			Backbone.on('event:cellsContainer:bindDrag', this.bindDrag, this);
    			Backbone.on('event:cellsContainer:selectRegionChange', this.selectRegionChange, this);
    			Backbone.on('event:cellsContainer:addClipRegionView', this.addClipRegionView, this);
    			Backbone.on('event:cellsContainer:getCoordinate', this.getCoordinate, this);
    			Backbone.on('event:cellsContainer:startHighlight', this.startHighlight, this);
    			Backbone.on('event:cellsContainer:stopHighlight', this.stopHighlight, this);
    
    			_.bindAll(this, 'callView', 'drag', 'highlightRegionMove');
    			this.currentRule = util.clone(cache.CurrentRule);
    			// this.listenTo(selectRegions, 'add', this.addSelectRegion);
    			this.boxAttributes = options.boxAttributes;
    			this.parentView = options.parentView;
    			// this.posiX = this.posiY = 0;
    		},
    		/**
    		 * 渲染方法
    		 * @method render 
    		 */
    		render: function() {
    			var modelList = selectRegions.models,
    				len,
    				i;
    			this.attributesRender(this.boxAttributes);
    
    			this.gridLineContainer = new GridLineContainer();
    			this.$el.append(this.gridLineContainer.render().el);
    
    			this.contentCellsContainer = new ContentCellsContainer();
    			this.$el.append(this.contentCellsContainer.render().el);
    
    			len = modelList.length;
    			for (i = 0; i < len; i++) {
    				this.addSelectRegionView(modelList[i]);
    			}
    			this.triggerCallback();
    			return this;
    		},
    		onDragOver: function(event) {
    			event.preventDefault();
    			var coordinate,
    				aliasGridRow,
    				aliasGridCol;
    			coordinate = this.getCoordinateByMouseEvent(event);
    
    			this.adjustDragRegion(coordinate);
    		},
    		onDrop: function(event) {
    			var headItemRowList = headItemRows.models,
    				headItemColList = headItemCols.models,
    				dragRegions,
    				coordinate,
    				aliasGridCol,
    				aliasGridRow,
    				point,
    				data,
    				cellsPositionX,
    				modelCell,
    				i, e = {};
    			dragRegions = selectRegions.getModelByType('drag');
    			for (i = 0; i < dragRegions.length; i++) {
    				dragRegions[i].destroy();
    			}
    			coordinate = this.getCoordinateByMouseEvent(event);
    
    			point = {
    				Col: [headItemColList[coordinate.startColIndex].get('displayName')],
    				Row: [headItemRowList[coordinate.startRowIndex].get('displayName')],
    			};
    			e.point = point;
    
    
    			if (event.isDefaultPrevented() === false) {
    				data = event.originalEvent.dataTransfer.getData("text");
    				e.text = data;
    				event.originalEvent.dataTransfer.clearData();
    				if (data === "") return;
    
    				if (modelCell === undefined) {
    					modelCell = cells.createCellModel(coordinate.startColIndex, coordinate.startRowIndex, coordinate.endColIndex, coordinate.endRowIndex);
    				}
    				modelCell.set("content.texts", data);
    			}
    			listener.excute('dataDrag', e);
    		},
    		onDragLeave: function(event) {
    			var width = this.viewMainContainer.el.clientWidth,
    				height = this.viewMainContainer.el.clientHeight,
    				clientX = event.originalEvent.clientX - config.System.outerLeft - $('#spreadSheet').offset().left,
    				clientY = event.originalEvent.clientY - config.System.outerTop - $('#spreadSheet').offset().top;
    
    			if (clientX < 0 || clientY < 0 || clientX > width || clientY > height) {
    				var dragRegions, i;
    				dragRegions = selectRegions.getModelByType('drag');
    				for (i = 0; i < dragRegions.length; i++) {
    					dragRegions[i].destroy();
    				}
    			}
    		},
    		getCoordinate: function(callback, mouseColPosi, mouseRowPosi) {
    			var currentRowModel = headItemRows.getModelByAlias(cache.TempProp.rowAlias),
    				currentColModel = headItemCols.getModelByAlias(cache.TempProp.colAlias),
    				headLineRowModelList = headItemRows.models,
    				headLineColModelList = headItemCols.models,
    				reduceLeftValue,
    				reduceTopValue,
    				clientX,
    				clientY,
    				mainMousePosiX,
    				mainMousePosiY,
    				modelIndexCol,
    				modelIndexRow,
    				coordinate = {};
    
    			this.userViewTop = cache.TempProp.isFrozen ? headItemRows.getModelByAlias(cache.UserView.rowAlias).get('top') : 0;
    			this.userViewLeft = cache.TempProp.isFrozen ? headItemCols.getModelByAlias(cache.UserView.colAlias).get('left') : 0;
    			//if this offset value equal 0 ,that position isn't consider frozen point
    			if (this.currentRule.displayPosition.offsetLeft === 0) {
    				reduceLeftValue = this.userViewLeft;
    			} else {
    				reduceLeftValue = currentColModel.get('left');
    			}
    			if (this.currentRule.displayPosition.offsetTop === 0) {
    				reduceTopValue = this.userViewTop;
    			} else {
    				reduceTopValue = currentRowModel.get('top');
    			}
    			//ps:增加过滤
    			clientX = mouseColPosi - config.System.outerLeft - $('#spreadSheet').offset().left;
    			clientY = mouseRowPosi - config.System.outerTop - $('#spreadSheet').offset().top;
    			if (clientX < 0 || clientY < 0) return;
    
    			//position of mouse in mainContainer
    			mainMousePosiX = clientX + this.parentView.el.scrollLeft - this.currentRule.displayPosition.offsetLeft + reduceLeftValue;
    			mainMousePosiY = clientY + this.parentView.el.scrollTop - this.currentRule.displayPosition.offsetTop + reduceTopValue;
    			if (mainMousePosiX < 0 || mainMousePosiY < 0 || mouseColPosi > this.$el.width() || mouseRowPosi > this.$el.height()) return;
    
    
    			//this model index of gridline
    			modelIndexCol = binary.modelBinary(mainMousePosiX, headLineColModelList, 'left', 'width', 0, headLineColModelList.length - 1);
    			modelIndexRow = binary.modelBinary(mainMousePosiY, headLineRowModelList, 'top', 'height', 0, headLineRowModelList.length - 1);
    			coordinate.col = headLineColModelList[modelIndexCol].get('displayName');
    			coordinate.row = headLineRowModelList[modelIndexRow].get('displayName');
    			callback(coordinate);
    		},
    		/**
    		 * 开启单元格边框高亮功能
    		 * @return {[type]} [description]
    		 */
    		startHighlight: function() {
    			//鼠标移动阻止原有事件（mousedown,mousemove）
    			this.undelegateEvents();
    			this.$el.off('mousemove', this.drag);
    			//监听鼠标移动事件
    			this.$el.on('mousemove', this.highlightRegionMove);
    		},
    		highlightRegionMove: function(event) {
    			var self = this,
    				cellModel,
    				selectBox,
    				startColPosi,
    				endColPosi,
    				startRowPosi,
    				endRowPosi,
    				direction,
    				selectRegionModel,
    				left, top, width, right, height, bottom;
    			selectBox = this.getCoordinateByMouseEvent(event);
    			cellModel = selectBox.model;
    			if (cellModel !== undefined && cellModel.get("highlight") === true) {
    				left = cellModel.get('physicsBox').left;
    				top = cellModel.get('physicsBox').top;
    				height = cellModel.get('physicsBox').height;
    				width = cellModel.get('physicsBox').width;
    				right = left + width;
    				bottom = top + height;
    			} else {
    				return;
    			}
    			direction = getLightDirection();
    			if (this.hightlightView === null || this.hightlightView === undefined) {
    				selectRegionModel = new SelectRegionModel();
    				this.hightlightModel = selectRegionModel;
    				selectRegionModel.set("selectType", "extend");
    				selectRegionModel.set("physicsPosi", {
    					left: left,
    					top: top,
    					bottom: bottom,
    					right: right
    				});
    				selectRegionModel.set("physicsBox", {
    					height: height,
    					width: width
    				});
    				this.hightlightView = new SelectRegionView({
    					model: selectRegionModel,
    					className: 'highlight-container',
    				});
    				this.$el.append(this.hightlightView.render().el);
    			}
    			clearHighlight();
    			this.hightlightView.$el.addClass('highlight-' + direction);
    
    			function getLightDirection() {
    				var mouseColPosi = self.getMouseColRelativePosi(event),
    					mouseRowPosi = self.getMouseRowRelativePosi(event),
    					rightDistance = right - mouseColPosi,
    					leftDistance = mouseColPosi - left,
    					topDistance = mouseRowPosi - top,
    					bottomDistance = bottom - mouseRowPosi,
    					temp = rightDistance,
    					direction = "right";
    
    				if (temp > leftDistance) {
    					temp = leftDistance;
    					direction = "left";
    				}
    				if (temp > topDistance) {
    					temp = topDistance;
    					direction = "top";
    				}
    				if (temp > bottomDistance) {
    					temp = bottomDistance;
    					direction = "bottom";
    				}
    				return direction;
    			}
    
    			function clearHighlight() {
    				self.hightlightView.$el.removeClass("highlight-right");
    				self.hightlightView.$el.removeClass("highlight-left");
    				self.hightlightView.$el.removeClass("highlight-top");
    				self.hightlightView.$el.removeClass("highlight-bottom");
    			}
    		},
    		/**
    		 * 停止单元格边框高亮功能
    		 * @return {[type]} [description]
    		 */
    		stopHighlight: function() {
    			//移除鼠标事件监听
    			this.$el.off('mousemove', this.highlightRegionMove);
    			//绑定视图原有事件
    			this.delegateEvents();
    
    			this.hightlightModel.destroy();
    			this.hightlightView = null;
    		},
    		getMouseColRelativePosi: function(posi) {
    			var currentColModel = headItemCols.getModelByAlias(cache.TempProp.colAlias),
    				headLineColModelList = headItemCols.models,
    				reduceLeftValue,
    				mainMousePosiX;
    
    			this.userViewLeft = cache.TempProp.isFrozen ? headItemCols.getModelByAlias(cache.UserView.colAlias).get('left') : 0;
    			//if this offset value equal 0 ,that position isn't consider frozen point
    			if (this.currentRule.displayPosition.offsetLeft === 0) {
    				reduceLeftValue = this.userViewLeft;
    			} else {
    				reduceLeftValue = currentColModel.get('left');
    			}
    			if (event.clientX === undefined) {
    				event.clientX = event.originalEvent.clientX;
    			}
    			//position of mouse in mainContainer
    			mainMousePosiX = event.clientX - config.System.outerLeft - $('#spreadSheet').offset().left + this.parentView.el.scrollLeft - this.currentRule.displayPosition.offsetLeft + reduceLeftValue;
    			return mainMousePosiX;
    		},
    		getMouseRowRelativePosi: function(posi) {
    			var currentRowModel = headItemRows.getModelByAlias(cache.TempProp.rowAlias),
    				headLineRowModelList = headItemRows.models,
    				reduceTopValue,
    				mainMousePosiY,
    				modelIndexRow,
    				aliasGridRow;
    
    			this.userViewTop = cache.TempProp.isFrozen ? headItemRows.getModelByAlias(cache.UserView.rowAlias).get('top') : 0;
    			//if this offset value equal 0 ,that position isn't consider frozen point
    			if (this.currentRule.displayPosition.offsetTop === 0) {
    				reduceTopValue = this.userViewTop;
    			} else {
    				reduceTopValue = currentRowModel.get('top');
    			}
    			if (event.clientY === undefined) {
    				event.clientY = event.originalEvent.clientY;
    			}
    
    			//position of mouse in mainContainer
    			mainMousePosiY = event.clientY - config.System.outerTop - $('#spreadSheet').offset().top + this.parentView.el.scrollTop - this.currentRule.displayPosition.offsetTop + reduceTopValue;
    			return mainMousePosiY;
    		},
    		getCoordinateByMouseEvent: function(event) {
    			var headLineRowModelList = headItemRows.models,
    				headLineColModelList = headItemCols.models,
    				mainMousePosiX,
    				mainMousePosiY,
    				modelIndexCol,
    				modelIndexRow,
    				aliasGridRow,
    				aliasGridCol,
    				cellsPositionX,
    				modelCell,
    				startPosiX, startPosiY, endPosiX, endPosiY,
    				left, width, top, height;
    
    			mainMousePosiX = this.getMouseColRelativePosi();
    			mainMousePosiY = this.getMouseRowRelativePosi();
    
    			//this model index of gridline
    			modelIndexCol = binary.modelBinary(mainMousePosiX, headLineColModelList, 'left', 'width', 0, headLineColModelList.length - 1);
    			modelIndexRow = binary.modelBinary(mainMousePosiY, headLineRowModelList, 'top', 'height', 0, headLineRowModelList.length - 1);
    			// isExist cell in cells position array
    			// if exist , callback this object 
    			// if not exist , callback null
    			aliasGridCol = headLineColModelList[modelIndexCol].get('alias');
    			aliasGridRow = headLineRowModelList[modelIndexRow].get('alias');
    
    			cellsPositionX = cache.CellsPosition.strandX;
    			if (cellsPositionX[aliasGridCol] !== undefined &&
    				cellsPositionX[aliasGridCol][aliasGridRow] !== undefined) {
    				modelCell = cells.models[cellsPositionX[aliasGridCol][aliasGridRow]];
    			}
    
    			//if model is exist , cell information reset
    			//if model is not exist , cell information default
    			if (modelCell) {
    				left = modelCell.get('physicsBox').left;
    				top = modelCell.get('physicsBox').top;
    				width = modelCell.get('physicsBox').width;
    				height = modelCell.get('physicsBox').height;
    				startPosiX = binary.modelBinary(left, headLineColModelList, 'left', 'width', 0, headLineColModelList.length - 1);
    				startPosiY = binary.modelBinary(top, headLineRowModelList, 'top', 'height', 0, headLineRowModelList.length - 1);
    				endPosiX = binary.modelBinary(left + width, headLineColModelList, 'left', 'width', 0, headLineColModelList.length - 1);
    				endPosiY = binary.modelBinary(top + height, headLineRowModelList, 'top', 'height', 0, headLineRowModelList.length - 1);
    				// text = modelCell.get('content').texts;
    			} else {
    				startPosiX = endPosiX = modelIndexCol;
    				startPosiY = endPosiY = modelIndexRow;
    			}
    			return {
    				startColIndex: startPosiX,
    				startRowIndex: startPosiY,
    				endColIndex: endPosiX,
    				endRowIndex: endPosiY,
    				model: modelCell
    			};
    		},
    		selectRegionChange: function(direction) {
    			switch (direction) {
    				case 'LEFT':
    					break;
    				case 'RIGHT':
    					break;
    				case 'UP':
    					break;
    				case 'DOWN':
    					this.downSelectRegion();
    					break;
    				default:
    					break;
    			}
    		},
    		downSelectRegion: function() {
    			var endRowIndex,
    				startColIndex,
    				aliasRow,
    				aliasCol,
    				modelCell,
    				startPosiX,
    				startPosiY,
    				endPosiX,
    				endPosiY,
    				cellsPositionX,
    				aliasGridRow,
    				aliasGridCol,
    				options;
    
    			this.userViewTop = cache.TempProp.isFrozen ? modelRowList.getModelByAlias(cache.UserView.rowAlias).get('top') : 0;
    			this.userViewLeft = cache.TempProp.isFrozen ? modelColList.getModelByAlias(cache.UserView.colAlias).get('left') : 0;
    
    			endRowIndex = selectRegions.models[0].get('wholePosi').endY;
    			startColIndex = selectRegions.models[0].get('wholePosi').startX;
    
    			aliasGridRow = headItemRows.models[endRowIndex + 1].get('alias');
    			aliasGridCol = headItemRows.models[startColIndex].get('alias');
    
    			cellsPositionX = cache.CellsPosition.strandX;
    
    			if (cellsPositionX[aliasGridCol] !== undefined &&
    				cellsPositionX[aliasGridCol][aliasGridRow] !== undefined) {
    				modelCell = cells.models[cellsPositionX[aliasGridCol][aliasGridRow]];
    			}
    
    			if (modelCell) {
    				// left = modelCell.get('physicsBox').left;
    				// top = modelCell.get('physicsBox').top;
    				// width = modelCell.get('physicsBox').width;
    				// height = modelCell.get('physicsBox').height;
    				startPosiX = binary.modelBinary(left, headLineColModelList, 'left', 'width', 0, headLineColModelList.length - 1);
    				startPosiY = binary.modelBinary(top, headLineRowModelList, 'top', 'height', 0, headLineRowModelList.length - 1);
    				endPosiX = binary.modelBinary(left + width, headLineColModelList, 'left', 'width', 0, headLineColModelList.length - 1);
    				endPosiY = binary.modelBinary(top + height, headLineRowModelList, 'top', 'height', 0, headLineRowModelList.length - 1);
    				text = modelCell.get('content').texts;
    			} else {
    				startPosiX = endPosiX = startColIndex;
    				startPosiY = endPosiY = endRowIndex + 1;
    			}
    			options = {
    				startColIndex: startPosiX,
    				startRowIndex: startPosiY,
    				initColIndex: startPosiX,
    				initRowIndex: startPosiY,
    				mouseColIndex: startPosiX,
    				mouseRowIndex: startPosiY,
    				endColIndex: endPosiX,
    				endRowIndex: endPosiY
    			};
    			this.adjustOperationRegion(options);
    
    			// var result = {};
    			// for (i = startPosiX; i < endPosiX + 1; i++) {
    			// 	colDisplayNames.push(headLineColModelList[i].get('displayName'));
    			// }
    			// for (i = startPosiY; i < endPosiY + 1; i++) {
    			// 	rowDisplayNames.push(headLineRowModelList[i].get('displayName'));
    			// }
    			// result.point = {
    			// 	col: colDisplayNames,
    			// 	row: rowDisplayNames
    			// };
    
    			// result.text = text;
    			// result.property = {
    			// 	size: modelCell ? modelCell.get('content').size : '11pt',
    			// 	family: modelCell ? modelCell.get('content').family : "SimSun",
    			// 	bd: modelCell ? modelCell.get('content').bd : false,
    			// 	italic: modelCell ? modelCell.get('content').italic : false,
    			// 	color: modelCell ? modelCell.get('content').color : "#000",
    			// 	alignRow: modelCell ? modelCell.get('content').alignRow : 'left',
    			// 	alignCol: modelCell ? modelCell.get('content').alignCol : 'middle',
    			// 	background: modelCell ? modelCell.get('customProp').background : "#fff",
    			// 	format: modelCell ? modelCell.get('customProp').format : 'text',
    			// 	wordWrap: modelCell ? modelCell.get('content').wordWrap : false
    			// };
    			// result.border = {
    			// 	top: modelCell ? modelCell.get('border').top : false,
    			// 	right: modelCell ? modelCell.get('border').right : false,
    			// 	bottom: modelCell ? modelCell.get('border').bottom : false,
    			// 	left: modelCell ? modelCell.get('border').left : false
    			// };
    		},
    		/**
    		 * 移除鼠标移动监听事件
    		 * @method destoryDelegate
    		 */
    		destoryDelegate: function() {
    			this.$el.off('mousemove', self.drag);
    		},
    		/**
    		 * 触发回调幻术，绑定其他View类
    		 * @method triggerCallback 
    		 */
    		triggerCallback: function() {
    			Backbone.trigger('call:mainContainer', this.callView('viewMainContainer'));
    		},
    		/**
    		 * 绑定View，供其他View类调用
    		 * @method callCellsContainer
    		 */
    		callCellsContainer: function(receiveFunc) {
    			receiveFunc(this);
    		},
    		/**
    		 * 修改容器宽高
    		 * @method attributesRender
    		 */
    		attributesRender: function(newAttributes) {
    			this.$el.css({
    				'width': newAttributes.width,
    				'height': newAttributes.height
    			});
    		},
    		/**
    		 * 增加复制(剪切)选中框
    		 */
    		addClipRegionView: function() {
    			var clipModel,
    				clipView,
    				selectModel;
    
    			clipModel = selectRegions.getModelByType('clip')[0];
    			clipView = new SelectRegionView({
    				model: clipModel,
    				className: 'clip-container',
    				currentRule: this.currentRule
    			});
    			this.clipView = clipView;
    			this.$el.append(clipView.render().el);
    		},
    		/**
    		 * 添加选中区域
    		 * @method addSelectRegionView
    		 */
    		addSelectRegionView: function(modelSelectRegion) {
    			var className;
    			if (modelSelectRegion.get("selectType") === "operation") {
    				className = "selected-container";
    			} else {
    				className = "datasource-container";
    			}
    			this.selectRegion = new SelectRegionView({
    				model: modelSelectRegion,
    				className: className,
    				currentRule: this.currentRule
    			});
    			this.$el.append(this.selectRegion.render().el);
    		},
    		/**
    		 * 添加选中区域
    		 * @method newSelectRegion
    		 */
    		newSelectRegion: function() {
    			var headItemColModelList,
    				headItemRowModelList,
    				aliasGridRow,
    				aliasGridCol,
    				cellsPositionX,
    				initCell;
    
    			headItemColModelList = headItemCols.models;
    			headItemRowModelList = headItemRows.models;
    
    			aliasGridRow = headItemColModelList[0].get('alias');
    			aliasGridCol = headItemRowModelList[0].get('alias');
    
    			cellsPositionX = cache.CellsPosition.strandX;
    
    			if (cellsPositionX[aliasGridCol] !== undefined &&
    				cellsPositionX[aliasGridCol][aliasGridRow] !== undefined) {
    				initCell = cells.models[cellsPositionX[aliasGridCol][aliasGridRow]];
    			}
    			if (initCell === undefined) {
    				return {
    					physicsPosi: {
    						top: 0,
    						left: 0
    					},
    					physicsBox: {
    						width: headItemColModelList[0].get('width'),
    						height: headItemRowModelList[0].get('height')
    					}
    				};
    			} else {
    				this.changeSelectHeadLine(initCell);
    				return {
    					physicsPosi: {
    						top: 0,
    						left: 0
    					},
    					physicsBox: {
    						width: initCell.get("physicsBox").width,
    						height: initCell.get("physicsBox").height
    					}
    				};
    			}
    		},
    		/**
    		 * 更新选中列标集合
    		 * @method changeSelectHeadLine
    		 * @param initCell {Cell} 单元格
    		 */
    		changeSelectHeadLine: function(initCell) {
    			var headLineRowModelList,
    				headLineColModelList,
    				startX,
    				startY,
    				endX,
    				endY,
    				width,
    				height;
    
    			headLineRowModelList = headItemRows.models;
    			headLineColModelList = headItemCols.models;
    
    			// startY = binary.modelBinary(initCell.get("physicsBox").top, headLineRowModelList, 'top', 'height', 0, headLineRowModelList.length - 1);
    			// startX = binary.modelBinary(initCell.get("physicsBox").left, headLineColModelList, 'left', 'width', 0, headLineColModelList.length - 1);
    			startX = 0;
    			startY = 0;
    			endX = binary.modelBinary(initCell.get("physicsBox").left + initCell.get("physicsBox").width, headLineColModelList, 'left', 'width', 0, headLineColModelList.length - 1);
    			endY = binary.modelBinary(initCell.get("physicsBox").top + initCell.get("physicsBox").height, headLineRowModelList, 'top', 'height', 0, headLineRowModelList.length - 1);
    
    			siderLineRows.models[0].set({
    				top: initCell.get("physicsBox").top,
    				height: initCell.get("physicsBox").height
    			});
    
    			siderLineCols.models[0].set({
    				left: initCell.get("physicsBox").left,
    				width: initCell.get("physicsBox").width
    			});
    			var len = headLineRowModelList.length,
    				i;
    
    			for (i = 0; i < len; i++) {
    				headLineRowModelList[i].set({
    					activeState: false
    				});
    			}
    			len = headLineColModelList.length;
    			for (i = 0; i < len; i++) {
    				headLineColModelList[i].set({
    					activeState: false
    				});
    			}
    			for (i = 0; i < endX - startX + 1; i++) {
    				headLineColModelList[startX + i].set({
    					activeState: true
    				});
    			}
    			for (i = 0; i < endY - startY + 1; i++) {
    				headLineRowModelList[startY + i].set({
    					activeState: true
    				});
    			}
    		},
    		/**
    		 * 调用mainContainer视图
    		 * @method callViewMainContainer
    		 * @param  callback {function} 回调函数
    		 */
    		callView: function(name) {
    			var object = this;
    			return function(callback) {
    				object[name] = callback;
    			};
    		},
    		located: function(event) {
    			// this is question , need deprecated
    			// 
    			// when input data time avoid trigger this effect.
    			if ($(event.target).attr('class') === 'edit-frame') {
    				return;
    			}
    			this.changePosi(event);
    			Backbone.trigger('event:cellsContainer:bindDrag');
    		},
    		/**
    		 * 单元格区域单击事件处理
    		 * @method changePosi
    		 * @param  e {event} 单击事件
    		 */
    		//ps:合并此方法
    		changePosi: function(event) {
    			var selectBox,
    				modelCell,
    				headLineColModelList = headItemCols.models,
    				headLineRowModelList = headItemRows.models,
    				startColIndex,
    				startRowIndex,
    				endColIndex,
    				endRowIndex,
    				colDisplayNames = [],
    				rowDisplayNames = [],
    				point,
    				text = '',
    				options,
    				left, top, width, height, i, len;
    
    			selectBox = this.getCoordinateByMouseEvent(event);
    
    			//if model is exist , cell information reset
    			//if model is not exist , cell information default
    			modelCell = selectBox.model;
    			startColIndex = selectBox.startColIndex;
    			startRowIndex = selectBox.startRowIndex;
    			endColIndex = selectBox.endColIndex;
    			endRowIndex = selectBox.endRowIndex;
    
    			if (modelCell !== undefined) {
    				left = modelCell.get('physicsBox').left;
    				top = modelCell.get('physicsBox').top;
    				width = modelCell.get('physicsBox').width;
    				height = modelCell.get('physicsBox').height;
    				text = modelCell.get('content').texts;
    			}
    
    			//此处待修正，回调函数是否执行，按什么规则执行
    			options = {
    				startColIndex: startColIndex,
    				startRowIndex: startRowIndex,
    				initColIndex: startColIndex,
    				initRowIndex: startRowIndex,
    				mouseColIndex: startColIndex,
    				mouseRowIndex: startRowIndex,
    				endColIndex: endColIndex,
    				endRowIndex: endRowIndex
    			};
    			this.adjustOperationRegion(options);
    			//ps:待修改，对外监听事件，返回值格式存在问题
    			var result = {};
    			for (i = startColIndex; i < endColIndex + 1; i++) {
    				colDisplayNames.push(headLineColModelList[i].get('displayName'));
    			}
    			for (i = startRowIndex; i < endRowIndex + 1; i++) {
    				rowDisplayNames.push(headLineRowModelList[i].get('displayName'));
    			}
    			result.point = {
    				col: colDisplayNames,
    				row: rowDisplayNames
    			};
    
    			result.text = text;
    			result.property = {
    				size: modelCell ? modelCell.get('content').size : '11pt',
    				family: modelCell ? modelCell.get('content').family : "SimSun",
    				bd: modelCell ? modelCell.get('content').bd : false,
    				italic: modelCell ? modelCell.get('content').italic : false,
    				color: modelCell ? modelCell.get('content').color : "#000",
    				alignRow: modelCell ? modelCell.get('content').alignRow : 'left',
    				alignCol: modelCell ? modelCell.get('content').alignCol : 'middle',
    				background: modelCell ? modelCell.get('customProp').background : "#fff",
    				format: modelCell ? modelCell.get('customProp').format : 'text',
    				wordWrap: modelCell ? modelCell.get('content').wordWrap : false
    			};
    			result.border = {
    				top: modelCell ? modelCell.get('border').top : false,
    				right: modelCell ? modelCell.get('border').right : false,
    				bottom: modelCell ? modelCell.get('border').bottom : false,
    				left: modelCell ? modelCell.get('border').left : false
    			};
    			listener.excute('mousedown', result);
    		},
    		/**
    		 * 绑定鼠标拖拽事件
    		 * @method bindDrag
    		 */
    		bindDrag: function() {
    			this.$el.on('mousemove', this.drag);
    		},
    		/**
    		 * 移除鼠标拖拽事件
    		 * @method unBindDrag 
    		 */
    		unBindDrag: function() {
    			this.$el.off('mousemove', this.drag);
    		},
    		/**
    		 * 处理鼠标拖拽事件
    		 * @method drag 
    		 * @param  e {event} 鼠标移动事件
    		 */
    		drag: function(e) {
    			var mainMousePosiX,
    				mainMousePosiY,
    				modelIndexCol,
    				modelIndexRow,
    				headLineRowModelList,
    				headLineColModelList,
    				initIndexCol,
    				initIndexRow,
    				colDisplayNames = [],
    				rowDisplayNames = [],
    				startX,
    				startY,
    				endX,
    				endY,
    				lastMouseCol,
    				lastMouseRow,
    				len,
    				options, regionModel, point;
    			var modelRowList = headItemRows,
    				modelColList = headItemCols,
    				currentRowModel = modelRowList.getModelByAlias(cache.TempProp.rowAlias),
    				currentColModel = modelColList.getModelByAlias(cache.TempProp.colAlias),
    				reduceLeftValue,
    				reduceTopValue;
    			this.userViewTop = cache.TempProp.isFrozen ? modelRowList.getModelByAlias(cache.UserView.rowAlias).get('top') : 0;
    			this.userViewLeft = cache.TempProp.isFrozen ? modelColList.getModelByAlias(cache.UserView.colAlias).get('left') : 0;
    			//if this offset value equal 0 ,that position isn't consider frozen point
    			if (this.currentRule.displayPosition.offsetLeft === 0) {
    				reduceLeftValue = this.userViewLeft;
    			} else {
    				reduceLeftValue = currentColModel.get('left');
    			}
    			if (this.currentRule.displayPosition.offsetTop === 0) {
    				reduceTopValue = this.userViewTop;
    			} else {
    				reduceTopValue = currentRowModel.get('top');
    			}
    			//position of mouse in mainContainer
    			mainMousePosiX = e.clientX - config.System.outerLeft - $('#spreadSheet').offset().left + this.parentView.el.scrollLeft - this.currentRule.displayPosition.offsetLeft + reduceLeftValue;
    			mainMousePosiY = e.clientY - config.System.outerTop - $('#spreadSheet').offset().top + this.parentView.el.scrollTop - this.currentRule.displayPosition.offsetTop + reduceTopValue;
    
    			//headColModels,headRowModels list
    			headLineRowModelList = headItemRows.models;
    			headLineColModelList = headItemCols.models;
    
    			modelIndexCol = binary.modelBinary(mainMousePosiX, headLineColModelList, 'left', 'width', 0, headLineColModelList.length - 1);
    			modelIndexRow = binary.modelBinary(mainMousePosiY, headLineRowModelList, 'top', 'height', 0, headLineRowModelList.length - 1);
    
    
    			if (cache.setDataSource === true) {
    				regionModel = selectRegions.getModelByType("dataSource")[0];
    			} else {
    				regionModel = selectRegions.getModelByType("operation")[0];
    			}
    
    			//鼠标开始移动索引
    			initIndexCol = regionModel.get('initPosi').startX;
    			initIndexRow = regionModel.get('initPosi').startY;
    
    			//上次移动鼠标坐标
    			lastMouseCol = regionModel.get('mousePosi').mouseX;
    			lastMouseRow = regionModel.get('mousePosi').mouseY;
    
    			//判断是否需要渲染
    			if (lastMouseCol === modelIndexCol && lastMouseRow === modelIndexRow) {
    				return;
    			}
    
    			//如果拖拽超出控制区域
    			if (modelIndexCol === -1 && lastMouseCol > 5) {
    				modelIndexCol = headLineColModelList.length - 1;
    			} else if (modelIndexCol === -1) {
    				modelIndexCol = 0;
    			}
    
    			if (modelIndexRow === -1 && lastMouseRow > 5) {
    				modelIndexRow = headLineRowModelList.length - 1;
    			} else if (modelIndexRow === -1) {
    				modelIndexRow = 0;
    			}
    
    			regionModel.set('mousePosi', {
    				mouseX: modelIndexCol,
    				mouseY: modelIndexRow
    			});
    
    			//计算选中区域开始索引，结束索引
    			startX = initIndexCol < modelIndexCol ? initIndexCol : modelIndexCol;
    			startY = initIndexRow < modelIndexRow ? initIndexRow : modelIndexRow;
    			endX = initIndexCol > modelIndexCol ? initIndexCol : modelIndexCol;
    			endY = initIndexRow > modelIndexRow ? initIndexRow : modelIndexRow;
    
    			var flag = true, //循环变量
    				i;
    			while (flag) {
    				flag = false;
    				//获取选中区域内所有cell对象
    				var tempCells = cells.getCellByX(startX, startY, endX, endY);
    				//存在单元格的区域的开始索引，结束索引
    				var cellStartX, cellStartY, cellEndX, cellEndY;
    				for (i = 0; i < tempCells.length; i++) {
    					cellStartY = binary.modelBinary(tempCells[i].get('physicsBox').top, headLineRowModelList, 'top', 'height', 0, headLineRowModelList.length - 1);
    					cellStartX = binary.modelBinary(tempCells[i].get('physicsBox').left, headLineColModelList, 'left', 'width', 0, headLineColModelList.length - 1);
    					cellEndY = binary.modelBinary(tempCells[i].get('physicsBox').top + tempCells[i].get('physicsBox').height, headLineRowModelList, 'top', 'height', 0, headLineRowModelList.length - 1);
    					cellEndX = binary.modelBinary(tempCells[i].get('physicsBox').left + tempCells[i].get('physicsBox').width, headLineColModelList, 'left', 'width', 0, headLineColModelList.length - 1);
    					if (cellStartX < startX) {
    						startX = cellStartX;
    						flag = true;
    						break;
    					}
    					if (cellStartY < startY) {
    						startY = cellStartY;
    						flag = true;
    						break;
    					}
    					if (cellEndX > endX) {
    						endX = cellEndX;
    						flag = true;
    						break;
    					}
    					if (cellEndY > endY) {
    						endY = cellEndY;
    						flag = true;
    						break;
    					}
    				}
    			}
    
    
    			if (e.isDefaultPrevented() === false) {
    				options = {
    					startColIndex: startX,
    					startRowIndex: startY,
    					endColIndex: endX,
    					endRowIndex: endY,
    				};
    				this.adjustOperationRegion(options);
    			}
    			e = {};
    			for (i = startX; i < endX + 1; i++) {
    				colDisplayNames.push(headLineColModelList[i].get('displayName'));
    			}
    			for (i = startY; i < endY + 1; i++) {
    				rowDisplayNames.push(headLineRowModelList[i].get('displayName'));
    			}
    			e.point = {
    				col: colDisplayNames,
    				row: rowDisplayNames
    			};
    		},
    		/**
    		 * 自适应选中框大小
    		 */
    		adaptSelectRegion: function() {
    			var	headLineRowModelList = headItemRows.models,
    				headLineColModelList = headItemCols.models,
    				selectRegionModel,
    				startX,
    				startY,
    				endX,
    				endY,
    				len,
    				options,
    				flag=true,
    				i;
    
    			selectRegionModel = selectRegions.getModelByType("operation")[0];
    			startX = selectRegionModel.get("wholePosi").startX;
    			startY = selectRegionModel.get("wholePosi").startY;
    			endX = selectRegionModel.get("wholePosi").endX;
    			endY = selectRegionModel.get("wholePosi").endY;
    
    			while (flag) {
    				flag = false;
    				//获取选中区域内所有cell对象
    				var tempCells = cells.getCellByX(startX, startY, endX, endY);
    				//存在单元格的区域的开始索引，结束索引
    				var cellStartX, cellStartY, cellEndX, cellEndY;
    				for (i = 0; i < tempCells.length; i++) {
    					cellStartY = binary.modelBinary(tempCells[i].get('physicsBox').top, headLineRowModelList, 'top', 'height', 0, headLineRowModelList.length - 1);
    					cellStartX = binary.modelBinary(tempCells[i].get('physicsBox').left, headLineColModelList, 'left', 'width', 0, headLineColModelList.length - 1);
    					cellEndY = binary.modelBinary(tempCells[i].get('physicsBox').top + tempCells[i].get('physicsBox').height, headLineRowModelList, 'top', 'height', 0, headLineRowModelList.length - 1);
    					cellEndX = binary.modelBinary(tempCells[i].get('physicsBox').left + tempCells[i].get('physicsBox').width, headLineColModelList, 'left', 'width', 0, headLineColModelList.length - 1);
    					if (cellStartX < startX) {
    						startX = cellStartX;
    						flag = true;
    						break;
    					}
    					if (cellStartY < startY) {
    						startY = cellStartY;
    						flag = true;
    						break;
    					}
    					if (cellEndX > endX) {
    						endX = cellEndX;
    						flag = true;
    						break;
    					}
    					if (cellEndY > endY) {
    						endY = cellEndY;
    						flag = true;
    						break;
    					}
    				}
    			}
    			options = {
    				startColIndex: startX,
    				startRowIndex: startY,
    				endColIndex: endX,
    				endRowIndex: endY,
    			};
    			this.adjustOperationRegion(options);
    		},
    		adjustOperationRegion: function(options) {
    			//ps:增加判断
    			if (cache.setDataSource === true) {
    				this.adjustDataSourceRegion(options);
    			} else {
    				this.adjustSelectRegion(options);
    			}
    		},
    		adjustDragRegion: function(options) {
    			var startColIndex = options.startColIndex,
    				startRowIndex = options.startRowIndex,
    				endColIndex = options.endColIndex,
    				endRowIndex = options.endRowIndex,
    				headItemColList = headItemCols.models,
    				headItemRowList = headItemRows.models,
    				dragRegions,
    				dragRegion,
    				width = 0,
    				height = 0,
    				left = 0,
    				top = 0;
    			dragRegions = selectRegions.getModelByType('drag');
    			if (dragRegions.length === 0) {
    				this.createDragRegion(options);
    				dragRegions = selectRegions.getModelByType('drag');
    			}
    			dragRegion = dragRegions[0];
    
    			if (this.dragView === undefined || this.dragView === null) {
    				this.dragView = new SelectRegionView({
    					model: dragRegion,
    					className: 'datasource-container',
    					currentRule: this.currentRule
    				});
    				this.$el.append(this.dragView.render().el);
    			}
    
    			left = headItemColList[startColIndex].get('left');
    			top = headItemRowList[startRowIndex].get('top');
    			width = headItemColList[endColIndex].get('width') + headItemColList[endColIndex].get('left') - headItemColList[startColIndex].get('left');
    			height = headItemRowList[endRowIndex].get('height') + headItemRowList[endRowIndex].get('top') - headItemRowList[startRowIndex].get('top');
    
    			dragRegion.set({
    				physicsPosi: {
    					top: headItemRowList[startRowIndex].get('top'),
    					left: headItemColList[startColIndex].get('left')
    				},
    				physicsBox: {
    					width: width - 1,
    					height: height - 1
    				},
    			});
    		},
    		/**
    		 * 改变选择框区域
    		 * @param  {[type]} options [description]
    		 * @param  {[type]} e       [description]
    		 * @return {[type]}         [description]
    		 */
    		adjustSelectRegion: function(options) {
    			var startColIndex = options.startColIndex,
    				startRowIndex = options.startRowIndex,
    				endColIndex = options.endColIndex,
    				endRowIndex = options.endRowIndex,
    				headItemColList = headItemCols.models,
    				headItemRowList = headItemRows.models,
    				colDisplayNames = [],
    				rowDisplayNames = [],
    				width = 0,
    				height = 0,
    				len, i;
    
    			var e = {};
    			for (i = startColIndex; i < endColIndex + 1; i++) {
    				colDisplayNames.push(headItemColList[i].get('displayName'));
    			}
    			for (i = startRowIndex; i < endRowIndex + 1; i++) {
    				rowDisplayNames.push(headItemRowList[i].get('displayName'));
    			}
    			e.point = {
    				col: colDisplayNames,
    				row: rowDisplayNames
    			};
    			listener.excute('regionChange', e);
    			listener.excute('selectRegionChange', e);
    
    			width = headItemColList[endColIndex].get('width') + headItemColList[endColIndex].get('left') - headItemColList[startColIndex].get('left');
    			height = headItemRowList[endRowIndex].get('height') + headItemRowList[endRowIndex].get('top') - headItemRowList[startRowIndex].get('top');
    
    			if (options.initColIndex !== undefined) {
    				selectRegions.models[0].set({
    					initPosi: {
    						startX: options.initColIndex,
    						startY: options.initRowIndex
    					}
    				});
    			}
    			selectRegions.models[0].set({
    				physicsPosi: {
    					top: headItemRowList[startRowIndex].get('top'),
    					left: headItemColList[startColIndex].get('left')
    				},
    				physicsBox: {
    					width: width - 1,
    					height: height - 1
    				},
    				wholePosi: {
    					startX: startColIndex,
    					startY: startRowIndex,
    					endX: endColIndex,
    					endY: endRowIndex
    				}
    			});
    
    			siderLineRows.models[0].set({
    				top: headItemRowList[startRowIndex].get('top'),
    				height: height - 1
    			});
    			siderLineCols.models[0].set({
    				left: headItemColList[startColIndex].get('left'),
    				width: width - 1
    
    			});
    
    			len = headItemRowList.length;
    
    			for (i = 0; i < len; i++) {
    				headItemRowList[i].set({
    					activeState: false
    				});
    			}
    
    			len = headItemColList.length;
    			for (i = 0; i < len; i++) {
    				headItemColList[i].set({
    					activeState: false
    				});
    			}
    			for (i = 0; i < endColIndex - startColIndex + 1; i++) {
    				width += headItemColList[startColIndex + i].set({
    					activeState: true
    				});
    			}
    			for (i = 0; i < endRowIndex - startRowIndex + 1; i++) {
    				height += headItemRowList[startRowIndex + i].set({
    					activeState: true
    				});
    			}
    		},
    		/**
    		 * 改变数据源选择区域
    		 * @param  {[type]} options [description]
    		 * @param  {[type]} e       [description]
    		 * @return {[type]}         [description]
    		 */
    		adjustDataSourceRegion: function(options) {
    
    			var startColIndex = options.startColIndex,
    				startRowIndex = options.startRowIndex,
    				endColIndex = options.endColIndex,
    				endRowIndex = options.endRowIndex,
    				headItemColList = headItemCols.models,
    				headItemRowList = headItemRows.models,
    				rowDisplayNames = [],
    				colDisplayNames = [],
    				dataSourceRegion,
    				width, height, i;
    
    			var e = {};
    			for (i = startColIndex; i < endColIndex + 1; i++) {
    				colDisplayNames.push(headItemColList[i].get('displayName'));
    			}
    			for (i = startRowIndex; i < endRowIndex + 1; i++) {
    				rowDisplayNames.push(headItemRowList[i].get('displayName'));
    			}
    			e.point = {
    				col: colDisplayNames,
    				row: rowDisplayNames
    			};
    			listener.excute('regionChange', e);
    			listener.excute('dataSourceRegionChange', e);
    
    			dataSourceRegion = selectRegions.getModelByType("dataSource")[0];
    
    			if (dataSourceRegion === undefined) {
    				dataSourceRegion = this.createDataSourceRegion(options);
    			}
    			if (this.dataSoureRegionView === undefined || this.dataSoureRegionView === null) {
    				this.dataSoureRegionView = new SelectRegionView({
    					model: dataSourceRegion,
    					className: 'datasource-container',
    					currentRule: this.currentRule
    				});
    				this.$el.append(this.dataSoureRegionView.render().el);
    			}
    
    			width = headItemColList[endColIndex].get('width') + headItemColList[endColIndex].get('left') - headItemColList[startColIndex].get('left');
    			height = headItemRowList[endRowIndex].get('height') + headItemRowList[endRowIndex].get('top') - headItemRowList[startRowIndex].get('top');
    			if (options.initColIndex !== undefined) {
    				dataSourceRegion.set({
    					initPosi: {
    						startX: options.initColIndex,
    						startY: options.initRowIndex
    					}
    				});
    			}
    			dataSourceRegion.set({
    				physicsPosi: {
    					top: headItemRowList[startRowIndex].get('top'),
    					left: headItemColList[startColIndex].get('left')
    				},
    				physicsBox: {
    					width: width - 1,
    					height: height - 1
    				},
    				wholePosi: {
    					startX: startColIndex,
    					startY: startRowIndex,
    					endX: endColIndex,
    					endY: endRowIndex
    				}
    			});
    		},
    		createDragRegion: function(options) {
    			var startColIndex = options.startColIndex || 0,
    				startRowIndex = options.startRowIndex || 0,
    				endColIndex = options.endColIndex || 0,
    				endRowIndex = options.endRowIndex || 0,
    				headItemColList = headItemCols.models,
    				headItemRowList = headItemRows.models,
    				width,
    				height;
    
    			width = headItemColList[endColIndex].get('width') + headItemColList[endColIndex].get('left') - headItemColList[startColIndex].get('left');
    			height = headItemRowList[endRowIndex].get('height') + headItemRowList[endRowIndex].get('top') - headItemRowList[startRowIndex].get('top');
    			selectRegions.add({
    				physicsPosi: {
    					top: headItemRowList[startRowIndex].get('top'),
    					left: headItemColList[startColIndex].get('left')
    				},
    				physicsBox: {
    					width: width - 1,
    					height: height - 1
    				},
    				selectType: 'drag'
    			});
    		},
    		createDataSourceRegion: function(options) {
    			var startColIndex = options.startColIndex || 0,
    				startRowIndex = options.startRowIndex || 0,
    				endColIndex = options.endColIndex || 0,
    				endRowIndex = options.endRowIndex || 0,
    				headItemColList = headItemCols.models,
    				headItemRowList = headItemRows.models,
    				width, height;
    
    			width = headItemColList[endColIndex].get('width') + headItemColList[endColIndex].get('left') - headItemColList[startColIndex].get('left');
    			height = headItemRowList[endRowIndex].get('height') + headItemRowList[endRowIndex].get('top') - headItemRowList[startRowIndex].get('top');
    			selectRegions.add({
    				mousePosi: {
    					mouseX: startColIndex,
    					mouseY: startRowIndex
    				},
    				initPosi: {
    					startX: startColIndex,
    					startY: startRowIndex
    				},
    				physicsPosi: {
    					top: headItemRowList[startRowIndex].get('top'),
    					left: headItemColList[startColIndex].get('left')
    				},
    				physicsBox: {
    					width: width - 1,
    					height: height - 1
    				},
    				wholePosi: {
    					startX: startColIndex,
    					startY: startRowIndex,
    					endX: endColIndex,
    					endY: endRowIndex
    				},
    				selectType: 'dataSource'
    			});
    			if (this.dataSoureRegionView === undefined || this.dataSoureRegionView === null) {
    				this.dataSoureRegionView = new SelectRegionView({
    					model: selectRegions.getModelByType("dataSource")[0],
    					className: 'datasource-container',
    					currentRule: this.currentRule
    				});
    				this.$el.append(this.dataSoureRegionView.render().el);
    			}
    			return selectRegions.getModelByType("dataSource")[0];
    		},
    		destroyDataSourceRegion: function() {
    			dataSourceRegions.models[0].destroy();
    		},
    		/**
    		 * 调整容器宽度
    		 * @method changeWidth 
    		 */
    		changeWidth: function() {
    
    		},
    		/**
    		 * 调整容器高度
    		 * @method changeHeight 
    		 */
    		changeHeight: function() {
    
    		},
    		/**
    		 * 视图销毁
    		 * @method destroy
    		 */
    		destroy: function() {
    			Backbone.off('call:cellsContainer');
    			Backbone.off('event:cellsContainer:destroy');
    			this.contentCellsContainer.destroy();
    			this.selectRegion.destroy();
    			if (this.clipView !== undefined && this.clipView !== null) this.clipView.destroy();
    			if (this.dragView !== undefined && this.dragView !== null) this.dragView.destroy();
    			if (this.dataSoureRegionView !== undefined && this.dataSoureRegionView !== null) this.dataSoureRegionView.destroy();
    			this.remove();
    		}
    	});
    	return CellsContainer;
    });
    /**
     * MainContainer
     * @author ray wu
     * @module view
     * @since 1.0.0
     * @main view
     */
    define('views/mainContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		binary = require('basic/util/binary'),
    		cache = require('basic/tools/cache'),
    		config = require('spreadsheet/config'),
    		original = require('basic/tools/original'),
    		clone = require('basic/util/clone'),
    		send = require('basic/tools/send'),
    		buildColAlias = require('basic/tools/buildcolalias'),
    		loadRecorder = require('basic/tools/loadrecorder'),
    		headItemCols = require('collections/headItemCol'),
    		headItemRows = require('collections/headItemRow'),
    		cells = require('collections/cells'),
    		selectRegions = require('collections/selectRegion'),
    		GridLineRowContainer = require('views/gridLineRowContainer'),
    		CellContainer = require('views/cellContainer'),
    		CellsContainer = require('views/cellsContainer');
    	/**
    	 *单元格显示区域视图类
    	 *@class MainContainer 
    	 *@extends Backbone.View
    	 *@constructor
    	 */
    	var MainContainer = Backbone.View.extend({
    
    		/**
    		 * 类初始化调用方法
    		 * @method initialize
    		 * @param  allAttributes 容器属性,设置容器，宽度，高度
    		 */
    		initialize: function() {
    			var modelsHeadLineRowList,
    				modelsHeadLineColList,
    				modelsHeadLineRowRegionList,
    				modelsHeadLineColRegionList,
    				modelStartHeadLineRow,
    				modelStartHeadLineCol,
    				modelLastHeadLineRow,
    				modelLastHeadLineCol,
    				headItemRowList,
    				headItemColList,
    				startRowHeadModel, //可视区域起始Row模型
    				startColHeadModel, //可视区域起始Col模型
    				userViewRowModel,
    				userViewColModel,
    				userViewEndRowModel,
    				userViewEndColModel,
    				len;
    			Backbone.on('call:mainContainer', this.callMainContainer, this);
    			Backbone.on('event:mainContainer:destroy', this.destroy, this);
    			Backbone.on('event:mainContainer:attributesRender', this.attributesRender, this);
    			Backbone.on('event:mainContainer:appointPosition', this.appointPosition, this);
    
    			//ps:定位事件，只由主区域订阅
    			this.currentRule = clone.clone(cache.CurrentRule);
    
    			// headItemRowList=headItemRows;
    			// headItemColList=headItemCols;
    			if (this.currentRule.eventScroll) {
    				/**
    				 * 绑定滚动事件
    				 * @property events
    				 * @type {Object}
    				 */
    				this.delegateEvents({
    					'scroll': 'syncScroll'
    				});
    				Backbone.on('event:mainContainer:nextCellPosition', this.nextCellPosition, this);
    				// userViewRowModel = headItemRowList.getModelByAlias(cache.UserView.rowAlias);
    				// userViewEndRowModel = headItemRowList.getModelByPosition(userViewRowModel.get('top') + this.el.offsetHeight);
    				// cache.UserView.rowEndAlias = userViewEndRowModel.get('alias');
    
    				// userViewColModel = headItemColList.getModelByAlias(cache.UserView.colAlias);
    				// userViewEndColModel = headItemColList.getModelByPosition(userViewColModel.get('left') + this.el.offsetWidth);
    				// cache.UserView.colEndAlias = userViewEndColModel.get('alias');
    			}
    			this.boxModel = {};
    			this.boxAttributes = this.currentRule.boxAttributes;
    			// for reduction position , prevent event scroll auto trigger.
    			this.isPreventScroll = true;
    
    			this.recordScrollLeft = this.recordScrollTop = 0;
    
    			modelsHeadLineRowRegionList = modelsHeadLineRowList = headItemRows.models;
    			modelsHeadLineColRegionList = modelsHeadLineColList = headItemCols.models;
    			//计算容器高度
    			if (cache.TempProp.isFrozen) {
    				if (this.currentRule.displayPosition.endRowIndex) {
    					modelsHeadLineRowRegionList = modelsHeadLineRowList.slice(this.currentRule.displayPosition.startRowIndex, this.currentRule.displayPosition.endRowIndex);
    				} else {
    					modelsHeadLineRowRegionList = modelsHeadLineRowList.slice(this.currentRule.displayPosition.startRowIndex);
    				}
    				if (this.currentRule.displayPosition.endColIndex) {
    					modelsHeadLineColRegionList = modelsHeadLineColList.slice(this.currentRule.displayPosition.startColIndex, this.currentRule.displayPosition.endColIndex);
    				} else {
    					modelsHeadLineColRegionList = modelsHeadLineColList.slice(this.currentRule.displayPosition.startColIndex);
    				}
    			}
    			len = modelsHeadLineRowRegionList.length;
    			modelLastHeadLineRow = modelsHeadLineRowRegionList[len - 1];
    			len = modelsHeadLineColRegionList.length;
    			modelLastHeadLineCol = modelsHeadLineColRegionList[len - 1];
    
    			this.boxModel.height = modelLastHeadLineRow.get('top') + modelLastHeadLineRow.get('height') - modelsHeadLineRowRegionList[0].get('top');
    			this.boxModel.width = modelLastHeadLineCol.get('left') + modelLastHeadLineCol.get('width') - modelsHeadLineColRegionList[0].get('left');
    
    			// if (this.currentRule.displayPosition.startRowIndex > 0) {
    			// 	modelStartHeadLineRow = modelsHeadLineRowList[this.currentRule.displayPosition.startRowIndex - 1];
    			// 	this.boxModel.height = modelLastHeadLineRow.get('top') + modelLastHeadLineRow.get('height') -modelStartHeadLineRow.get('top')-modelStartHeadLineRow.get('height')-1;
    			// } else {
    			// 	this.boxModel.height = modelLastHeadLineRow.get('top') + modelLastHeadLineRow.get('height');
    			// }
    
    			// if (this.currentRule.displayPosition.startColIndex > 0) {
    			// 	modelStartHeadLineCol = modelsHeadLineColList[this.currentRule.displayPosition.startColIndex - 1];
    			// 	this.boxModel.width = modelLastHeadLineCol.get('left') + modelLastHeadLineCol.get('width')-modelStartHeadLineCol.get('left')-modelStartHeadLineCol.get('width')-1;
    			// } else {
    			// 	this.boxModel.width = modelLastHeadLineCol.get('left') + modelLastHeadLineCol.get('width');
    			// }
    			this.rowsViewBottomPosi = this.boxModel.height;
    			config.displayRowHeight = this.rowsViewBottomPosi;
    			cache.visibleRegion.top = 0;
    			cache.visibleRegion.bottom = this.rowsViewBottomPosi;
    		},
    		addCellViewPublish: function(cellModel) {
    			this.publish(cellModel, 'addCellViewPublish');
    		},
    
    		addRowHeadItemViewPublish: function(headItemRowModel) {
    			this.publish(headItemRowModel, 'addRowHeadItemViewPublish');
    		},
    		addHeadItemView: function(headItemRowModel, args) {
    			var gridLineRowContainer;
    			gridLineRowContainer = new GridLineRowContainer({
    				model: headItemRowModel,
    				frozenTop: this.currentRule.displayPosition.offsetTop
    			});
    			this.cellsContainer.gridLineContainer.rowsGridContainer.$el.append(gridLineRowContainer.render().el);
    		},
    		addCellView: function(CellModel, args) {
    			var tempView = new CellContainer({
    				model: CellModel,
    				currentRule: this.currentRule
    			});
    			this.cellsContainer.contentCellsContainer.$el.prepend(tempView.render().el);
    		},
    
    		/**
    		 * 页面渲染方法
    		 * @method render
    		 */
    		render: function() {
    			this.attributesRender(this.boxAttributes);
    
    			this.cellsContainer = new CellsContainer({
    				boxAttributes: {
    					height: this.boxModel.height,
    					width: this.boxModel.width
    				},
    				parentView: this
    			});
    			this.$el.append(this.cellsContainer.render().el);
    			this.triggerCallback();
    			return this;
    		},
    		//for new diff object, subscribe it self object.
    		subscribeScroll: function(value, directionObj) {
    			this.appointPosition(value, directionObj.direction);
    		},
    		// appoint position , don't pass preventScroll action .
    		appointPosition: function(value, direction) {
    			this.isPreventScroll = false;
    			if (direction === 'TRANSVERSE') {
    				this.$el.scrollLeft(value);
    			}
    			if (direction === 'VERTICAL') {
    				this.$el.scrollTop(value);
    			}
    		},
    		/**
    		 * 绑定其他视图
    		 * @method triggerCallback
    		 */
    		triggerCallback: function() {
    			_.bindAll(this, 'callView');
    			Backbone.trigger('call:bodyContainer', this.callView('viewBodyContainer'));
    			// Backbone.trigger('call:rowsHeadContainer', this.callView('viewRowsHeadContainer'));
    			// Backbone.trigger('call:rowsGridContainer', this.callView('viewRowsGridLineContainer'));
    			// Backbone.trigger('call:rowsAllHeadContainer', this.callView('viewRowsAllHeadContainer'));
    			Backbone.trigger('call:colsAllHeadContainer', this.callView('viewColsAllHeadContainer'));
    			// Backbone.trigger('call:contentCellsContainer', this.callView('viewContentCellsContainer'));
    
    		},
    		callView: function(name) {
    			var object = this;
    			return function(callback) {
    				object[name] = callback;
    			};
    		},
    		/**
    		 * 用于其他视图绑定
    		 * @method callMainContainer
    		 * @param  receiveFunc {Function} 回调函数
    		 */
    		callMainContainer: function(receiveFunc) {
    			receiveFunc(this);
    		},
    		/**
    		 * 渲染容器宽度，高度
    		 * @method attributesRender
    		 * @param  newAttributes {Object} 宽高
    		 */
    		attributesRender: function(newAttributes) {
    			this.$el.css({
    				'width': newAttributes.width,
    				'height': newAttributes.height
    			});
    			if (newAttributes.style) {
    				this.$el.addClass(newAttributes.style);
    			}
    		},
    		nextCellPosition: function(direction) {
    			switch (direction) {
    				case 'LEFT':
    					break;
    				case 'RIGHT':
    					break;
    				case 'UP':
    					break;
    				case 'DOWN':
    					this.downCellPosition();
    					break;
    				default:
    					break;
    			}
    		},
    		downCellPosition: function() {
    			var rowAliasArray = [],
    				nextRowAlias,
    				loadStartAlias,
    				loadEndAlias,
    				offsetTop,
    				userViewTop,
    				recordScrollTop,
    				cellModels,
    				cellModel,
    				bottomHeadRowItem,
    				visibleTop,
    				top,
    				i, len, load;
    
    
    			//ps:需处理冻结状况
    			cellModel = cells.getCellsByWholeSelectRegion()[0];
    			if (cellModel === null) {
    				rowAliasArray.push(headItemRows.models[selectRegions.models[0].get('wholePosi').startY].get('alias'));
    			} else {
    				rowAliasArray = cellModel.get('occupy').y;
    			}
    
    			len = rowAliasArray.length;
    			for (i = 0; i < len; i++) {
    				if (headItemRows.getIndexByAlias(rowAliasArray[i]) === -1) {
    					loadStartAlias = rowAliasArray[i];
    					break;
    				}
    			}
    			if (loadStartAlias !== undefined) {
    				loadEndAlias = rowAliasArray[len - 1];
    				//ajax get rows data by alias
    			}
    			bottomHeadRowItem = headItemRows.getModelByAlias(rowAliasArray[len - 1]);
    			//判断Excel冻结状态，非冻结状态(冻结高度为0，用户可视起点高度为0)
    			if (cache.TempProp.isFrozen === true) {
    				offsetTop = this.currentRule.displayPosition.offsetTop;
    				userViewTop = headItemRows.getModelByAlias(cache.UserView.rowAlias).get("top");
    			} else {
    				offsetTop = 0;
    				userViewTop = 0;
    			}
    			// visibleTop
    			//重新定位，可视区域底部高度值
    			top = bottomHeadRowItem.get('top') + bottomHeadRowItem.get('height') + config.User.cellHeight + 10 - offsetTop - userViewTop;
    
    			//ajax get rows data by posi
    			//add rows data
    			//view show 
    			if (top < this.el.scrollTop + this.el.offsetHeight) return;
    			recordScrollTop = this.el.scrollTop;
    			this.el.scrollTop = (top - this.el.offsetHeight);
    			this.deleteTop(recordScrollTop);
    			this.addBottom(recordScrollTop);
    		},
    		/**
    		 * 处理鼠标滚动事件
    		 * @method syncScroll
    		 * @param  {event} e 鼠标滚动事件
    		 */
    		syncScroll: function(e) {
    			var verticalDirection,
    				transverseDirection,
    				modelRowList,
    				modelColList,
    				userViewRowModel,
    				userViewColModel,
    				userViewEndRowModel,
    				userViewEndColModel,
    				currentDisplayViewTop = this.recordScrollTop,
    				currentDisplayViewLeft = this.recordScrollLeft;
    
    			this.preventAutoScroll();
    			this.triggerCallback();
    
    			verticalDirection = currentDisplayViewTop - this.el.scrollTop;
    			transverseDirection = currentDisplayViewLeft - this.el.scrollLeft;
    			//save user view position , alias
    			if (!cache.TempProp.isFrozen) {
    				modelRowList = headItemRows;
    				modelColList = headItemCols;
    				userViewRowModel = modelRowList.getModelByPosition(this.recordScrollTop);
    				userViewEndRowModel = modelRowList.getModelByPosition(this.recordScrollTop + this.el.offsetHeight);
    				cache.UserView.rowAlias = userViewRowModel.get('alias');
    				cache.UserView.rowEndAlias = userViewEndRowModel.get('alias');
    				userViewColModel = modelColList.getModelByPosition(this.recordScrollLeft);
    				userViewEndColModel = modelColList.getModelByPosition(this.recordScrollLeft + this.el.offsetWidth);
    				cache.UserView.colAlias = userViewColModel.get('alias');
    				cache.UserView.colEndAlias = userViewEndColModel.get('alias');
    			}
    
    			//as scrollbar scroll up
    			if (verticalDirection > 0) {
    				this.addTop(currentDisplayViewTop);
    				this.deleteBottom(currentDisplayViewTop);
    			}
    			//as scrollbar scroll down
    			if (verticalDirection < 0) {
    				//delete top row
    				this.addBottom(currentDisplayViewTop);
    				this.deleteTop(currentDisplayViewTop);
    			}
    			// // as scrolbar scroll left
    			// if (transverseDirection > 0) {}
    			// // as scrolbar scroll right
    			// if (transverseDirection < 0) {
    			// }
    		},
    		/**
    		 * 显示行上方超出预加载区域，删除超出视图
    		 * @method deleteTop
    		 * @param {num} localRecordScrollTop 上下移动，缓存高度
    		 */
    		deleteTop: function(recordViewTop) {
    			var limitIndex, //预加载区域索引 
    				limitTop, //预加载区域高度
    				recordIndex,
    				recordTop,
    				headItemRowList,
    				tempCells, //区域内单元格数组
    				cellMaxRowIndex,
    				maxRowIndex,
    				cellPositionArray,
    				offsetTop,
    				userViewTop,
    				i, j, k;
    
    			//判断Excel冻结状态，非冻结状态(冻结高度为0，用户可视起点高度为0)
    			if (cache.TempProp.isFrozen === true) {
    				offsetTop = this.currentRule.displayPosition.offsetTop;
    				userViewTop = headItemRows.getModelByAlias(cache.UserView.rowAlias).get("top");
    			} else {
    				offsetTop = 0;
    				userViewTop = 0;
    			}
    
    			headItemRowList = headItemRows.models;
    
    			//原状态预加载标线高度
    			recordTop = recordViewTop - config.System.prestrainHeight + offsetTop + userViewTop;
    
    			//当前状态预加载标线高度
    
    			limitTop = this.el.scrollTop - config.System.prestrainHeight + offsetTop + userViewTop;
    
    
    			if (recordTop < 0) recordTop = 0;
    			if (limitTop < 0) limitTop = 0;
    
    			limitIndex = binary.indexModelBinary(limitTop, headItemRowList, 'top', 'height');
    			recordIndex = binary.indexModelBinary(recordTop, headItemRowList, 'top', 'height');
    
    			if (recordIndex >= limitIndex) {
    				return;
    			}
    			for (i = recordIndex; i < limitIndex; i++) {
    				headItemRowList[i].destroyView();
    			}
    
    			tempCells = cells.getCellsByRowIndex(recordIndex, limitIndex - 1);
    
    			for (j = 0; j < tempCells.length; j++) {
    				//判断cell最下端单元格是否符合要求
    				if (tempCells[j] === undefined || tempCells[j] === null) {
    					continue;
    				}
    				cellPositionArray = tempCells[j].get("occupy").y;
    
    				for (k = cellPositionArray.length - 1; k > -1; k--) {
    					cellMaxRowIndex = headItemRows.getIndexByAlias(cellPositionArray[k]);
    					if (cellMaxRowIndex === null || cellMaxRowIndex === undefined || cellMaxRowIndex === -1) {
    						continue;
    					}
    					if (cellMaxRowIndex < limitIndex) {
    						tempCells[j].hide();
    					}
    					break;
    				}
    			}
    			cache.visibleRegion.top = headItemRowList[limitIndex].get("top");
    			// config.DynamicLoad.row.start = limitIndex;
    		},
    		/**
    		 * 显示行上方到达加载区域，添加视图视图
    		 * @method addTop
    		 * @param {num} localRecordScrollTop 上下移动，缓存高度
    		 */
    		addTop: function(currentDisplayViewTop) {
    			// this mehod need to optimization code, 
    			// situation judgment.
    			var limitTopPosi,
    				limitBottomPosi,
    				limitTopIndex,
    				limitBottomIndex,
    				getTopPosi,
    				getBottomPosi,
    				currentTopPosi,
    				currentTopIndex,
    				headItemRowList,
    				headItemRowModel,
    				gridLineRowModel,
    				headItemRowContainer,
    				gridLineRowContainer,
    				tempCells,
    				offsetTop,
    				userViewTop,
    				i;
    
    			headItemRowList = headItemRows.models;
    
    			//冻结情况，计算视图的偏移量
    			if (cache.TempProp.isFrozen === true) {
    				offsetTop = this.currentRule.displayPosition.offsetTop;
    				userViewTop = headItemRows.getModelByAlias(cache.UserView.rowAlias).get('top');
    			} else {
    				offsetTop = 0;
    				userViewTop = 0;
    			}
    
    			this.loadRegionRows(offsetTop, userViewTop);
    
    			limitTopPosi = this.el.scrollTop - config.System.prestrainHeight + offsetTop + userViewTop;
    			limitTopPosi = limitTopPosi < 0 ? 0 : limitTopPosi;
    			limitBottomPosi = this.el.scrollTop + this.el.offsetHeight + config.System.prestrainHeight + offsetTop + userViewTop;
    
    			limitTopIndex = binary.indexModelBinary(limitTopPosi, headItemRowList, 'top', 'height');
    			limitBottomIndex = binary.indexModelBinary(limitBottomPosi, headItemRowList, 'top', 'height');
    			// user view limit top posi
    			currentTopPosi = currentDisplayViewTop - config.System.prestrainHeight + offsetTop + userViewTop;
    			currentTopPosi = currentTopPosi < 0 ? 0 : currentTopPosi;
    			currentTopIndex = binary.indexModelBinary(currentTopPosi, headItemRowList, 'top', 'height');
    			currentTopIndex = currentTopIndex > limitBottomIndex ? limitBottomIndex : currentTopIndex;
    
    
    			for (i = currentTopIndex - 1; i >= limitTopIndex; i--) {
    
    				headItemRowModel = headItemRowList[i];
    				if (headItemRowModel.get('isView') === false) {
    					headItemRowModel.set('isView', true);
    					gridLineRowContainer = new GridLineRowContainer({
    						model: headItemRowModel,
    						frozenTop: this.currentRule.displayPosition.offsetTop
    					});
    					this.addRowHeadItemViewPublish(headItemRowModel);
    					this.cellsContainer.gridLineContainer.rowsGridContainer.$el.prepend(gridLineRowContainer.render().el);
    				}
    			}
    			// when mouse fast moving , we has prevent infinite scroll , the double value will be equal.
    			if (limitTopIndex < currentTopIndex) {
    				tempCells = cells.getCellsByRowIndex(limitTopIndex, currentTopIndex);
    				for (i = 0; i < tempCells.length; i++) {
    
    					if (tempCells[i] === undefined || tempCells[i] === null) {
    						continue;
    					}
    					if (tempCells[i].get('showState') === false) {
    						//ps:可优化
    						tempCells[i].set('physicsBox', this.recountCellPhysicsBox(tempCells[i]));
    						tempCells[i].set('showState', true);
    						var tempView = new CellContainer({
    							model: tempCells[i],
    							currentRule: this.currentRule
    						});
    						this.cellsContainer.contentCellsContainer.$el.prepend(tempView.render().el);
    						this.addCellViewPublish(tempCells[i]);
    					}
    				}
    			}
    			cache.visibleRegion.top = headItemRowList[limitTopIndex].get("top");
    		},
    		/**
    		 * 区域数据加载函数
    		 * @method loadRegionRows
    		 * @param  {[type]} offsetTop             [description]
    		 * @return {[type]}                       [description]
    		 */
    		loadRegionRows: function(offsetTop, userViewTop) {
    			var limitTopPosi,
    				limitBottomPosi,
    				unloadRegions,
    				unloadCellRegions,
    				i = 0;
    
    			limitTopPosi = this.el.scrollTop - config.System.prestrainHeight + offsetTop + userViewTop;
    
    			if (limitTopPosi < 0) limitTopPosi = 0;
    			if (limitTopPosi > cache.localRowPosi || cache.localRowPosi === 0) {
    				return;
    			}
    			limitBottomPosi = this.el.scrollTop + this.el.offsetHeight + config.System.prestrainHeight + offsetTop + userViewTop;
    
    
    			if (limitBottomPosi > cache.localRowPosi) {
    				limitBottomPosi = cache.localRowPosi;
    			}
    			unloadRegions = loadRecorder.getUnloadPosi(limitTopPosi, limitBottomPosi, cache.rowRegionPosi);
    			unloadCellRegions = loadRecorder.getUnloadPosi(limitTopPosi, limitBottomPosi, cache.cellRegionPosi.vertical);
    			for (; i < unloadRegions.length; i++) {
    				this.requestRegionData(unloadRegions[i].start, unloadRegions[i].end);
    			}
    			for (i = 0; i < unloadCellRegions.length; i++) {
    				this.requestCellRegionData(unloadCellRegions[i].start, unloadCellRegions[i].end);
    			}
    		},
    		requestRegionData: function(getTopPosi, getBottomPosi) {
    			if (getBottomPosi < getTopPosi) {
    				var temp = getTopPosi;
    				getTopPosi = getBottomPosi;
    				getBottomPosi = temp;
    			}
    			send.PackAjax({
    				url: 'excel.htm?m=openExcel',
    				async: false,
    				data: JSON.stringify({
    					excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    					sheetId: '1',
    					rowBegin: top,
    					rowEnd: bottom
    				}),
    				success: function(data) {
    					if (data === '') {
    						return;
    					}
    					var startRowSort;
    					startRowSort = data.dataRowStartIndex;
    					data = data.returndata;
    					var rows = data.spreadSheet[0].sheet.glY;
    					original.analysisRowData(rows, startRowSort);
    				}
    			});
    			loadRecorder.insertPosi(getTopPosi, getBottomPosi, cache.rowRegionPosi);
    
    			var width = headItemCols.getMaxDistanceWidth(),
    				height = headItemRows.getMaxDistanceHeight();
    			this.adjustContainerHeight(height);
    			this.publish(height, 'adjustHeadItemContainerPublish');
    			this.publish(height, 'adjustContainerHeightPublish');
    		},
    		requestCellRegionData: function(getTopPosi, getBottomPosi) {
    			if (getBottomPosi < getTopPosi) {
    				var temp = getTopPosi;
    				getTopPosi = getBottomPosi;
    				getBottomPosi = temp;
    			}
    			send.PackAjax({
    				url: 'excel.htm?m=openExcel',
    				async: false,
    				data: JSON.stringify({
    					excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    					sheetId: '1',
    					rowBegin: top,
    					rowEnd: bottom
    				}),
    				success: function(data) {
    					if (data === '') {
    						return;
    					}
    					data = data.returndata;
    					var cells = data.spreadSheet[0].sheet.cells;
    					original.analysisCellData(cells);
    				}
    			});
    			loadRecorder.insertPosi(getTopPosi, getBottomPosi, cache.cellRegionPosi.vertical);
    		},
    		/**
    		 * 显示行下方超出预加载区域，删除超出视图
    		 * @method deleteBottom
    		 */
    		deleteBottom: function(currentDisplayViewTop) {
    			var limitDistance,
    				limitIndex,
    				currentDistance,
    				currentIndex,
    				localViewIndex, //缓存数据：row最底部视图对应集合索引
    				tempCells,
    				headItemRowList,
    				cellRowAliasArray,
    				cellMinRowIndex,
    				offsetTop,
    				userViewTop,
    				i, j, k;
    
    			//冻结情况，计算视图的偏移量
    			if (cache.TempProp.isFrozen === true) {
    				offsetTop = this.currentRule.displayPosition.offsetTop;
    				userViewTop = headItemRows.getModelByAlias(cache.UserView.rowAlias).get("top");
    			} else {
    				offsetTop = 0;
    				userViewTop = 0;
    			}
    
    			headItemRowList = headItemRows.models;
    
    			currentDistance = this.rowsViewBottomPosi + offsetTop + userViewTop;
    			// currentDisplayViewTop + this.el.offsetHeight + config.System.prestrainHeight;
    			currentIndex = binary.indexModelBinary(currentDistance, headItemRowList, 'top', 'height');
    			limitDistance = this.el.scrollTop + this.el.offsetHeight + config.System.prestrainHeight + offsetTop + userViewTop;
    			limitIndex = binary.indexModelBinary(limitDistance, headItemRowList, 'top', 'height');
    			for (i = limitIndex + 1; i <= currentIndex; i++) {
    				headItemRowList[i].destroyView();
    			}
    			//删除超过加载区域(视图区+预加载区)cell视图对象
    			tempCells = cells.getCellsByRowIndex(limitIndex + 1, localViewIndex);
    			for (j = 0; j < tempCells.length; j++) {
    				//判断cell视图对象最上端区域是否仍在加载区域(视图区+预加载区)
    				cellRowAliasArray = tempCells[j].get("occupy").y;
    				//处理未从后台获取情况
    				for (k = 0; k < cellRowAliasArray.length; k++) {
    					cellMinRowIndex = headItemRows.getIndexByAlias(cellPositionArray[k]);
    					if (cellMinRowIndex === null || cellMinRowIndex === undefined) {
    						continue;
    					}
    					if (cellMinRowIndex > limitIndex) {
    						tempCells[j].hide();
    					}
    					break;
    				}
    			}
    			this.rowsViewBottomPosi = headItemRowList[limitIndex].get('top') + headItemRowList[limitIndex].get('height') - offsetTop - userViewTop;
    			config.displayRowHeight = this.rowsViewBottomPosi;
    			cache.visibleRegion.bottom = this.rowsViewBottomPosi;
    		},
    
    		/**
    		 * 显示行下方到达加载区域，添加视图视图
    		 * @method addBottom
    		 */
    		addBottom: function(recordViewTop, currentViewTop) {
    			var limitTopPosi,
    				limitBottomPosi,
    				limitTopIndex,
    				limitBottomIndex,
    				getTopPosi,
    				getBottomPosi,
    				currentBottomPosi,
    				currentBottomIndex,
    				headItemRowList,
    				headItemRowModel,
    				gridLineRowModel,
    				headItemRowContainer,
    				gridLineRowContainer,
    				offsetTop,
    				userViewTop,
    				tempCells;
    
    			//冻结情况，计算视图的偏移量
    			if (cache.TempProp.isFrozen === true) {
    				offsetTop = this.currentRule.displayPosition.offsetTop;
    				userViewTop = headItemRows.getModelByAlias(cache.UserView.rowAlias).get("top");
    			} else {
    				offsetTop = 0;
    				userViewTop = 0;
    			}
    			//ps:修改
    			this.loadRegionRows(offsetTop, userViewTop);
    			this.addRows();
    
    			headItemRowList = headItemRows.models;
    
    			limitTopPosi = this.el.scrollTop - config.System.prestrainHeight + offsetTop + userViewTop;
    			limitTopPosi = limitTopPosi < 0 ? 0 : limitTopPosi;
    
    			limitBottomPosi = this.el.scrollTop + this.el.offsetHeight + config.System.prestrainHeight + offsetTop + userViewTop;
    
    			limitTopIndex = binary.indexModelBinary(limitTopPosi, headItemRowList, 'top', 'height');
    			limitBottomIndex = binary.indexModelBinary(limitBottomPosi, headItemRowList, 'top', 'height');
    
    			currentBottomPosi = this.rowsViewBottomPosi + offsetTop + userViewTop;
    			currentBottomIndex = binary.indexModelBinary(currentBottomPosi, headItemRowList, 'top', 'height');
    
    			if (currentBottomIndex > limitBottomIndex) {
    				return;
    			}
    			currentBottomIndex = currentBottomIndex < limitTopIndex ? limitTopIndex : currentBottomIndex;
    			for (i = currentBottomIndex + 1; i <= limitBottomIndex; i++) {
    				headItemRowModel = headItemRowList[i];
    				if (headItemRowModel.get('isView') === false) {
    					headItemRowModel.set('isView', true);
    					gridLineRowContainer = new GridLineRowContainer({
    						model: headItemRowModel,
    						frozenTop: this.currentRule.displayPosition.offsetTop
    					});
    					this.cellsContainer.gridLineContainer.rowsGridContainer.$el.append(gridLineRowContainer.render().el);
    					this.addRowHeadItemViewPublish(headItemRowModel);
    				}
    			}
    			if (currentBottomIndex < limitBottomIndex) {
    				tempCells = cells.getCellsByRowIndex(currentBottomIndex, limitBottomIndex);
    
    				for (var i = 0; i < tempCells.length; i++) {
    					if (tempCells[i] === undefined && tempCells[i] === null) {
    						continue;
    					}
    					if (tempCells[i].get('showState') === false) {
    						tempCells[i].set('showState', true);
    						tempCells[i].set('physicsBox', this.recountCellPhysicsBox(tempCells[i]));
    
    						var tempView = new CellContainer({
    							model: tempCells[i],
    							currentRule: this.currentRule
    						});
    						this.cellsContainer.contentCellsContainer.$el.prepend(tempView.render().el);
    						this.addCellViewPublish(tempCells[i]);
    					}
    				}
    			}
    
    			this.rowsViewBottomPosi = headItemRowList[limitBottomIndex].get('top') + headItemRowList[limitBottomIndex].get('height') - offsetTop - userViewTop;
    			config.displayRowHeight = this.rowsViewBottomPosi;
    			cache.visibleRegion.bottom = this.rowsViewBottomPosi;
    		},
    		/**
    		 * 动态加载cell对象，对于一次未加载完全cell对象，重新计算cell对象physicsBox属性
    		 * @method recountCellPhysicsBox
    		 * @param  {Object} cell 单元格对象
    		 * @return {Object} 重新计算后的cell
    		 */
    		recountCellPhysicsBox: function(cell) {
    			var i, j,
    				left = 0,
    				top = 0,
    				width = 0,
    				height = 0,
    				aliasColArr,
    				aliasRowArr;
    			aliasRowArr = aliasColArr = [];
    
    			aliasRowArr = cell.get('occupy').y;
    			aliasColArr = cell.get('occupy').x;
    			left = cell.get('physicsBox').left;
    			width = cell.get('physicsBox').width;
    			//由于只存在行动态加载，所有只处理Cell模型高度问题
    			for (i = 0; i < aliasRowArr.length; i++) {
    				if (headItemRows.getModelByAlias(aliasRowArr[i]) !== undefined) {
    					top = headItemRows.getModelByAlias(aliasRowArr[i]).get('top');
    					for (; i < aliasRowArr.length; i++) {
    						if (headItemRows.getModelByAlias(aliasRowArr[i]) !== undefined) {
    							height += headItemRows.getModelByAlias(aliasRowArr[i]).get('height') + 1;
    						} else {
    							break;
    						}
    					}
    					break;
    				}
    			}
    			return {
    				top: top,
    				left: left,
    				height: height - 1,
    				width: width
    			};
    		},
    		/**
    		 * 禁止鼠标拖动超出单元格区域，单元格区域移动
    		 * @method preventAutoScroll
    		 */
    		preventAutoScroll: function() {
    			var distanceLeft,
    				distanceRight,
    				distanceTop,
    				distanceBottom,
    				localRecordScrollTop,
    				localRecordScrollLeft;
    			if (this.isPreventScroll) {
    				//for get this offsetleft value , because of this div in table . so this offsetleft equal 0 ,
    				//then we get other method get it's offsetleft value
    				//code example : this.viewBodyContainer.el.innerWidth - this.el.offsetWidth
    
    				distanceLeft = this.viewBodyContainer.mousePageX - (this.viewBodyContainer.el.offsetWidth - this.el.offsetWidth);
    				distanceTop = this.viewBodyContainer.mousePageY - (this.viewBodyContainer.el.offsetHeight - this.el.offsetHeight - config.System.outerBottom);
    				distanceBottom = distanceTop - this.el.clientHeight;
    				distanceRight = distanceLeft - this.el.clientWidth;
    
    				if (distanceRight >= 0 || distanceLeft <= 0) {
    					this.el.scrollLeft = this.recordScrollLeft;
    				} else {
    					this.recordScrollLeft = this.el.scrollLeft;
    					this.publish(this.recordScrollLeft, 'transversePublish');
    				}
    
    				if (distanceBottom >= 0 || distanceTop <= 0) {
    					this.el.scrollTop = this.recordScrollTop;
    				} else {
    					this.recordScrollTop = this.el.scrollTop;
    					this.publish(this.recordScrollTop, 'verticalPublish');
    				}
    			}
    			//did'nt prevent scoll and ensure it's main area ,
    			if (!this.isPreventScroll && this.currentRule.eventScroll) {
    				if (this.recordScrollLeft !== this.el.scrollLeft) {
    					this.recordScrollLeft = this.el.scrollLeft;
    					this.publish(this.recordScrollLeft, 'transversePublish');
    				}
    				if (this.recordScrollTop !== this.el.scrollTop) {
    					this.recordScrollTop = this.el.scrollTop;
    					this.publish(this.recordScrollTop, 'verticalPublish');
    				}
    			}
    			this.isPreventScroll = true;
    		},
    		/**
    		 * 动态加载，添加列
    		 * @method addCol
    		 */
    		addCol: function() {
    			var len, colValue, i = 0;
    
    			len = config.User.addCol;
    			colValue = headItemCols.length;
    			while (i < len) {
    				headItemCols.add({
    					alias: (colValue + 1).toString(),
    					left: colValue * config.User.cellWidth,
    					width: config.User.cellWidth - 1,
    					displayName: buildColAlias(colValue)
    				});
    				colValue++;
    				i++;
    			}
    			this.cellsContainer.attributesRender({
    				width: headItemCols.getMaxDistanceWidth(),
    				height: headItemRows.getMaxDistanceHeight()
    			});
    			this.viewColsAllHeadContainer.$el.css({
    				width: headItemCols.getMaxDistanceWidth()
    			});
    		},
    		addRows: function() {
    			var currentBottomPosi,
    				limitBottomPosi,
    				localBottomPosi,
    				headLineList,
    				headLineLast,
    				lastModelTop,
    				lastModelHeight,
    				diffDistancePixel,
    				startPosi,
    				endPosi,
    				rowLen,
    				offsetTop,
    				userViewTop,
    				sort,
    				width,
    				height,
    				len, i = 0;
    
    			//冻结情况，计算视图的偏移量
    			if (cache.TempProp.isFrozen === true) {
    				offsetTop = this.currentRule.displayPosition.offsetTop;
    				userViewTop = headItemRows.getModelByAlias(cache.UserView.rowAlias).get('top');
    			} else {
    				offsetTop = 0;
    				userViewTop = 0;
    			}
    
    			headLineList = headItemRows.models;
    			rowLen = headLineList.length;
    			headLineLast = headLineList[rowLen - 1];
    			lastModelTop = headLineLast.get('top');
    			lastModelHeight = headLineLast.get('height');
    			sort = headLineLast.get('sort');
    			if (sort + 2 > config.User.maxRowNum) {
    				return;
    			}
    			// get last model top + height , that is the bottom position
    			currentBottomPosi = lastModelHeight + lastModelTop;
    
    			if (currentBottomPosi < cache.localRowPosi) {
    				return;
    			}
    			limitBottomPosi = this.el.scrollTop + this.el.offsetHeight + config.System.prestrainHeight + offsetTop + userViewTop;
    			diffDistancePixel = limitBottomPosi - currentBottomPosi;
    
    			if (diffDistancePixel > 0) {
    				len = Math.ceil(diffDistancePixel / config.User.cellHeight);
    				startPosi = lastModelTop + lastModelHeight + 1;
    				while (i < len) {
    					if (sort + i + 2 > config.User.maxRowNum) {
    						break;
    					}
    					headItemRows.add({
    						sort: (sort + 1 + i),
    						alias: (sort + 2 + i).toString(),
    						top: lastModelTop + lastModelHeight + config.User.cellHeight * i + 1,
    						height: config.User.cellHeight - 1,
    						displayName: binary.buildRowAlias(sort + i + 1)
    					});
    					i++;
    				}
    				endPosi = lastModelTop + lastModelHeight + config.User.cellHeight * i;
    			} else {
    				return;
    			}
    			send.PackAjax({
    				url: 'sheet.htm?m=addRowLine&excelId=' + window.SPREADSHEET_AUTHENTIC_KEY + '&sheetId=1&rowNum=' + len
    			});
    			loadRecorder.insertPosi(startPosi, endPosi, cache.rowRegionPosi);
    			width = headItemCols.getMaxDistanceWidth();
    			height = headItemRows.getMaxDistanceHeight();
    			this.adjustContainerHeight(height);
    			this.publish(height, 'adjustHeadItemContainerPublish');
    			this.publish(height, 'adjustContainerHeightPublish');
    		},
    		adjustContainerHeight: function(height) {
    			this.cellsContainer.attributesRender({
    				height: height
    			});
    		},
    		/**
    		 * 视图销毁
    		 * @method destroy
    		 */
    		destroy: function() {
    			Backbone.off('call:mainContainer');
    			Backbone.off('event:mainContainer:destroy');
    			Backbone.off('event:mainContainer:attributesRender');
    			this.cellsContainer.destroy();
    			this.remove();
    		}
    	});
    	return MainContainer;
    });
    define('views/headItemColContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		Handlebars = require('lib/handlebars'),
    		headItemCols = require('collections/headItemCol'),
    		cache = require('basic/tools/cache'),
    		config = require('spreadsheet/config'),
    		util = require('basic/util/clone'),
    		HeadItemColContainer;
    
    	/**
    	 * HeadItemColContainer
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class HeadItemColContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	HeadItemColContainer = Backbone.View.extend({
    		/**
    		 * @property {element} className
    		 */
    		className: 'col-head-item',
    		/**
    		 * 初始化监听
    		 * @method initialize
    		 */
    		initialize: function(option) {
    			// this.frozenOffsetLeft = option.frozenLeft;
    
    			this.listenTo(this.model, 'change:activeState', this.toggleActive);
    			this.listenTo(this.model, 'change:isView', this.remove);
    			this.listenTo(this.model, 'change:left', this.changeLeft);
    			this.listenTo(this.model, 'change:width', this.changeWidth);
    			this.currentRule = util.clone(cache.CurrentRule);
    			this.offsetLeft = cache.TempProp.isFrozen ? (this.currentRule.displayPosition.offsetLeft || 0) : 0;
    		},
    		/**
    		 * 渲染本身对象
    		 * @method render
    		 */
    		render: function() {
    
    			/**
    			 * @property {string} template
    			 */
    			this.template = Handlebars.compile($('#tempColHeadItem').html());
    			this.changeLeft();
    			this.changeWidth();
    			this.$el.html(this.template(this.model.toJSON())).data('alias', this.model.get('alias'));
    			this.toggleActive();
    			return this;
    		},
    		/**
    		 * 切换DOM对象的状态
    		 * @method toggleActive
    		 */
    		toggleActive: function() {
    			this.$el.toggleClass("active", this.model.toJSON().activeState);
    		},
    		/**
    		 * 修改DOM对象的`left`值
    		 * @method changeLeft
    		 */
    		changeLeft: function() {
    			var userViewLeft = 0,
    				userViewModel;
    			if (this.currentRule.reduceUserView) {
    				userViewModel = headItemCols.getModelByAlias(cache.UserView.colAlias);
    				userViewLeft = userViewModel.toJSON().left;
    			}
    			this.$el.css({
    				left: this.model.toJSON().left - this.offsetLeft - userViewLeft
    			});
    		},
    		/**
    		 * 修改DOM对象的`width`值
    		 * @method changeWidth		 
    		 */
    		changeWidth: function() {
    			this.$el.css({
    				width: this.model.toJSON().width
    			});
    		},
    		/**
    		 * 视图销毁
    		 * @method destroy
    		 */
    		destroy: function() {
    			this.remove();
    		}
    	});
    	return HeadItemColContainer;
    });
    define('views/colsSpaceLineContainer',function() {
    	
    	var Backbone = require('lib/backbone');
    	/**
    	 * ColsSpaceLineContainer
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class ColsSpaceLineContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var ColsSpaceLineContainer = Backbone.View.extend({
    		/**
    		 * @property {element} className
    		 */
    		className: 'col-space-container',
    		/**
    		 * 初始化监听事件
    		 * @method initialize
    		 * @param  {object}   allAttributes 盒模型属性集合
    		 */
    		initialize: function(allAttributes) {
    			Backbone.on('call:colsSpaceLineContainer', this.callColsSpaceLineContainer, this);
    			Backbone.on('event:colsSpaceLineContainer:destroy', this.destroy, this);
    			this.boxAttributes = allAttributes.boxAttributes;
    		},
    		/**
    		 * 渲染DOM对象属性
    		 * @method render
    		 * @return {object} 返回自身对象`this`
    		 */
    		render: function() {
    			this.attributesRender(this.boxAttributes);
    			return this;
    		},
    		/**
    		 * 对外开放自身对象`this`
    		 * @method callColsSpaceLineContainer
    		 * @param  {Function} receiveFunc 传入接受对象的方法
    		 */
    		callColsSpaceLineContainer: function(receiveFunc) {
    			receiveFunc(this);
    		},
    		/**
    		 * 自身属性渲染
    		 * @method attributesRender
    		 * @param  {object} newAttributes 盒模型属性
    		 */
    		attributesRender: function(newAttributes) {
    			this.$el.css({
    				'left': newAttributes.left
    			});
    		},
    		/**
    		 * 销毁当前view视图
    		 * @method destroy
    		 */
    		destroy: function() {
    			this.remove();
    		}
    	});
    	return ColsSpaceLineContainer;
    });
    //attention bug, when call object , we can setting unified method
    //attention bug, adjust gridline methods , can be combin ,because of highly similarity
    //and for improve performace
    define('views/colsHeadContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		config = require('spreadsheet/config'),
    		binary = require('basic/util/binary'),
    		cache = require('basic/tools/cache'),
    		send = require('basic/tools/send'),
    		buildColAlias = require('basic/tools/buildcolalias'),
    		headItemRows = require('collections/headItemRow'),
    		headItemCols = require('collections/headItemCol'),
    		cells = require('collections/cells'),
    		selectRegions = require('collections/selectRegion'),
    		siderLineRows = require('collections/siderLineRow'),
    		siderLineCols = require('collections/siderLineCol'),
    		HeadItemColContainer = require('views/headItemColContainer'),
    		ColsSpaceLineContainer = require('views/colsSpaceLineContainer'),
    		selectCellRows = require('entrance/cell/selectCellRows'),
    		ColsHeadContainer;
    	/**
    	 * ColsHeadContainer
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class ColsHeadContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	ColsHeadContainer = Backbone.View.extend({
    		/**
    		 * @property {element} className
    		 */
    		className: 'col-head-panel',
    		/**
    		 * 初始化事件监听
    		 * @method initialize
    		 */
    		initialize: function() {
    			if (!cache.TempProp.isFrozen) {
    				this.delegateEvents({
    					/**
    					 * 选中每列时，判断是不是需要调整列或者选中整个列
    					 * @event mousedown
    					 */
    					'mousedown .col-head-item': 'transAction',
    
    					/**
    					 * 鼠标移动时，判断位置，确实是否需要作出效果调整
    					 * @event mousemove
    					 */
    					'mousemove .col-head-item': 'overEffect'
    				});
    			}
    			Backbone.on('call:colsHeadContainer', this.callColsHeadContainer, this);
    			Backbone.on('event:colsHeadContainer:relaseSpaceEffect', this.relaseSpaceEffect, this);
    			Backbone.on('event:colWidthAdjust', this.colWidthAdjust, this);
    			/**
    			 * 已经加载列数
    			 * @property {int} colNumber
    			 */
    			this.colNumber = 0;
    			this.listenTo(headItemCols, 'add', this.addColsHeadContainer);
    		},
    		/**
    		 * 渲染本身对象
    		 * @method render
    		 * @return {object} 返回自身对象`this`
    		 */
    		render: function() {
    			var i = 0,
    				modelsHeadLineColList,
    				modelsHeadLineColRegionList,
    				len,
    				activeModelList,
    				modelList = headItemCols;
    			modelsHeadLineColList = modelsHeadLineColRegionList = modelList.models;
    			if (cache.TempProp.isFrozen) {
    				this.currentRule = cache.CurrentRule;
    				if (this.currentRule.displayPosition.endIndex !== undefined) {
    					modelsHeadLineColRegionList = modelsHeadLineColList.slice(this.currentRule.displayPosition.startIndex, this.currentRule.displayPosition.endColIndex);
    				} else {
    					modelsHeadLineColRegionList = modelsHeadLineColList.slice(this.currentRule.displayPosition.startIndex);
    				}
    			}
    
    			len = modelsHeadLineColRegionList.length;
    			for (; i < len; i++) {
    				this.addColsHeadContainer(modelsHeadLineColRegionList[i]);
    				this.colNumber++;
    			}
    			//ensure y or n has exist active model,
    			//if exist , the first model will be not active this.
    			activeModelList = modelList.where({
    				'activeState': true
    			});
    			if (activeModelList.length === 0) {
    				modelsHeadLineColList[0].set('activeState', true);
    			}
    			this.triggerCallback();
    			return this;
    		},
    		/**
    		 * 获取他们view层的对象到当前页面
    		 * @method triggerCallback
    		 */
    		triggerCallback: function() {
    			_.bindAll(this, 'callView');
    			Backbone.trigger('call:screenContainer', this.callView('viewScreenContainer'));
    			Backbone.trigger('call:mainContainer', this.callView('viewMainContainer'));
    			Backbone.trigger('call:cellsContainer', this.callView('viewCellsContainer'));
    			Backbone.trigger('call:colsAllHeadContainer', this.callView('viewColsAllHeadContainer'));
    		},
    		/**
    		 * 对外开放本对象
    		 * @method callColsHeadContainer
    		 * @param  {function} receiveFunc 传入接受对象的方法
    		 */
    		callColsHeadContainer: function(receiveFunc) {
    			receiveFunc(this);
    		},
    		/**
    		 * 当前对象鼠标样式更改
    		 * @method overEffect
    		 * @param  {event}   e
    		 */
    		overEffect: function(e) {
    			e.currentTarget.style.cursor = this.isAdjustable(e) === true ? 'col-resize' : '';
    		},
    		/**
    		 * 确认是否可以调整
    		 * @method isAdjustable
    		 * @param  {event}     e
    		 * @return {Boolean}
    		 */
    		isAdjustable: function(e) {
    			var overEl = this.itemEl || e.currentTarget;
    			return e.pageX - $(overEl).offset().left > overEl.clientWidth - config.System.effectDistanceCol ? true : false;
    		},
    		/**
    		 * 传递动作
    		 * @method transAction
    		 * @param  {event} e
    		 */
    		transAction: function(e) {
    			if (!this.isAdjustable(e)) {
    				this.colLocate(e);
    				return;
    			}
    			this.spaceEffect(e);
    		},
    		/**
    		 * 列调整时效果，绑定移动事件
    		 * @method spaceEffect
    		 * @param  {event}    e
    		 */
    		spaceEffect: function(e) {
    			/**
    			 * 当前选中的对象
    			 * @property {object} itemEL
    			 */
    			this.itemEl = e.currentTarget;
    			/**
    			 * 当前对象的封装对象，方便调用
    			 * @property {object} $itemEl
    			 */
    			this.$itemEl = $(this.itemEl);
    			/**
    			 * 选中对象的`offsetWidth`
    			 * @property {number} cacheItemElOffsetWidth
    			 */
    			this.cacheItemElOffsetWidth = this.itemEl.offsetWidth;
    			/**
    			 * 移动时，被锁定的DOM内容
    			 * @property {element} $lockData
    			 */
    			this.$lockData = $('.col-head-item:gt(' + this.$itemEl.index() + ')', this.el);
    			/**
    			 * 增加临时容器，保存所以的DOM内容
    			 * @property {element} $tempSpaceContainer
    			 */
    			this.$tempSpaceContainer = $('<div/>').addClass('temp-space-container').html(this.$lockData);
    			this.$el.append(this.$tempSpaceContainer);
    			this.viewScreenContainer.mouseMoveHeadContainer(e, {
    					spaceMouse: this.itemEl.clientWidth - e.offsetX,
    					// from currentTarget rightBorder caculation distance to document
    					offsetleftByRight: this.itemEl.clientWidth + this.$itemEl.offset().left,
    					self: this
    				},
    				this.moveEvent);
    			this.colsSpaceLineContainer = new ColsSpaceLineContainer({
    				boxAttributes: {
    					left: this.itemEl.offsetLeft + this.itemEl.clientWidth
    				}
    			});
    			$('.line-container').append(this.colsSpaceLineContainer.render().el);
    		},
    		/**
    		 * 还原列
    		 * @method relaseSpaceEffect
    		 * @param  {event} e
    		 */
    		relaseSpaceEffect: function(e) {
    			var i = 0,
    				itemElIndex,
    				width,
    				diffDistance;
    			if (!this.$lockData) {
    				return;
    			}
    			// this.requstAdjust();
    			itemElIndex = headItemCols.getIndexByAlias(this.$itemEl.data('alias'));
    			diffDistance = this.itemEl.offsetWidth - this.cacheItemElOffsetWidth;
    			width = diffDistance + headItemCols.models[itemElIndex].get('width');
    			this.colWidthAdjust(itemElIndex, width);
    			//first element
    			this.$el.append(this.$lockData);
    			this.$tempSpaceContainer.remove();
    			this.itemEl = this.$itemEl = this.$lockData = null;
    		},
    		colWidthAdjust: function(itemElIndex, width) {
    			var diffDistance = width - headItemCols.models[itemElIndex].get('width');
    			this.adjustHeadLine(itemElIndex, diffDistance);
    			this.adjustCells(itemElIndex, diffDistance);
    			this.adjustSelectRegion(itemElIndex, diffDistance);
    			this.requstAdjust(itemElIndex, diffDistance);
    			this.triggerCallback();
    
    			this.viewCellsContainer.attributesRender({
    				width: headItemCols.getMaxDistanceWidth(),
    				height: headItemRows.getMaxDistanceHeight()
    			});
    			this.viewColsAllHeadContainer.$el.css({
    				width: headItemCols.getMaxDistanceWidth()
    			});
    		},
    		/**
    		 * 发送列调整的请求到后台
    		 * @method requstAdjust
    		 */
    		requstAdjust: function(colIndex, offset) {
    			send.PackAjax({
    				url: 'cells.htm?m=cols_width&excelId=' + window.SPREADSHEET_AUTHENTIC_KEY + '&sheetId=1&colIndex=' + colIndex + '&offset=' + offset,
    				success: function(data) {
    					if (data.returnCode === 200) {
    						console.log('success');
    					}
    				}
    			});
    		},
    		/**
    		 * 列调整时，鼠标移动事件
    		 * @method moveEvent
    		 * @param  {[event}  e
    		 */
    		moveEvent: function(e) {
    			var transData = e.data,
    				mouseSpace = e.pageX + transData.spaceMouse,
    				itemElWidth = parseInt(mouseSpace - transData.self.$itemEl.offset().left, 0);
    			if (itemElWidth < config.System.effectDistanceCol) {
    				return;
    			}
    			transData.self.$itemEl.css('width', itemElWidth);
    			transData.self.$tempSpaceContainer.css('left', parseInt(mouseSpace - transData.offsetleftByRight, 0));
    			transData.self.colsSpaceLineContainer.attributesRender({
    				left: parseInt(mouseSpace - transData.self.$el.offset().left, 0)
    			});
    		},
    		/**
    		 * 渲染view，增加列在`head`区域内
    		 * @method addColsHeadContainer
    		 * @param  {object} modelHeadItemCol 列model对象
    		 */
    		addColsHeadContainer: function(modelHeadItemCol) {
    			this.headItemColContainer = new HeadItemColContainer({
    				model: modelHeadItemCol
    			});
    			this.$el.append(this.headItemColContainer.render().el);
    		},
    		/**
    		 * collection增加新model对象
    		 * @method createHeadItemCol
    		 */
    		createHeadItemCol: function() {
    			headItemCols.add(this.newAttrCol());
    		},
    		/**
    		 * 设置新对象属性
    		 * @method newAttrCol
    		 * @return {object} 新对象属性
    		 * @deprecated 在行列调整后将会过时
    		 */
    		newAttrCol: function() {
    			var currentObject;
    			currentObject = {
    				alias: (this.colNumber + 1).toString(),
    				left: this.colNumber * config.User.cellWidth,
    				width: config.User.cellWidth - 1,
    				displayName: buildColAlias(this.colNumber)
    			};
    			return currentObject;
    		},
    		/**
    		 * 回调view对象
    		 * @method callView
    		 * @param  {string} name 当前对象命
    		 * @return {Function} 接受函数
    		 */
    		callView: function(name) {
    			var self = this;
    			return function(callback) {
    				self[name] = callback;
    			};
    		},
    		/**
    		 * 定位列，选中
    		 * @method colLocate
    		 * @param  {event}  e
    		 */
    		colLocate: function(e) {
    			var rowMousePosiX,
    				modelCell,
    				headModelRow,
    				headModelCol,
    				modelIndexCol,
    				headLineColModelList,
    				headLineRowModelList;
    			//this need to improve
    			if (!this.viewMainContainer) {
    				this.triggerCallback();
    			}
    			rowMousePosiX = e.clientX - $('#spreadSheet').offset().left - config.System.outerLeft + this.viewMainContainer.el.scrollLeft;
    			//headColModels,headRowModels list
    			headLineRowModelList = headItemRows.models;
    			headLineColModelList = headItemCols.models;
    
    			//this model index of headline
    			modelIndexCol = binary.modelBinary(rowMousePosiX, headLineColModelList, 'left', 'width', 0, headLineColModelList.length - 1);
    			//head model information
    			headModelCol = headLineColModelList[modelIndexCol];
    			selectCellRows('1', null, modelIndexCol, e);
    		},
    		/**
    		 * 调整列宽度和他们的left值
    		 * @method adjustHeadLine
    		 * @param  {int} index 当前对象索引
    		 * @param  {移动的距离差} pixel
    		 */
    		adjustHeadLine: function(index, pixel) {
    			var i,
    				len,
    				headLineList,
    				gridLineList,
    				tempWidth,
    				tempLeft;
    			headLineList = headItemCols.models;
    			tempWidth = headLineList[index].get('width');
    			headLineList[index].set('width', tempWidth + pixel);
    			len = headLineList.length;
    			for (i = index + 1; i < len; i++) {
    				tempLeft = headLineList[i].get('left');
    				headLineList[i].set('left', tempLeft + pixel);
    			}
    		},
    		/**
    		 * 调整影响到的单元格
    		 * @method adjustCells
    		 * @param  {int} index 当前对象索引
    		 * @param  {移动的距离差} pixel
    		 */
    		adjustCells: function(index, pixel) {
    			var passAdjustColCells, //经过调整列cells
    				adjustCells, //其余需要调整cells
    				loadColIndex,
    				loadRegion,
    				i,
    				j,
    				grilLineLen,
    				len;
    			passAdjustColCells = cells.getCellsByColIndex(index, index);
    			len = passAdjustColCells.length;
    			for (i = 0; i < len; i++) {
    				passAdjustColCells[i].set('physicsBox.width', passAdjustColCells[i].get('physicsBox').width + pixel);
    			}
    			grilLineLen = headItemCols.length;
    			adjustCells = cells.getCellsInStartColRegion(index + 1, grilLineLen - 1);
    			len = adjustCells.length;
    			for (j = 0; j < len; j++) {
    				adjustCells[j].set('physicsBox.left', adjustCells[j].get('physicsBox').left + pixel);
    			}
    		},
    		/**
    		 * 调整选中区域
    		 * @method adjustSelectRegion
    		 * @param  {int} index 当前对象索引
    		 * @param  {移动的距离差} pixel
    		 */
    		adjustSelectRegion: function(index, pixel) {
    			var startColIndex,
    				endColIndex,
    				selectRegionModel,
    				siderLineColModel,
    				cacheWidth,
    				cacheLeft;
    			selectRegionModel = selectRegions.models[0];
    			startColIndex = selectRegionModel.get('wholePosi').startX;
    			endColIndex = selectRegionModel.get('wholePosi').endX;
    			if (endColIndex < index) {
    				return;
    			}
    			siderLineColModel = siderLineCols.models[0];
    			if (startColIndex <= index) {
    				cacheWidth = selectRegionModel.get("physicsBox").width;
    				selectRegionModel.set("physicsBox.width", cacheWidth + pixel);
    				siderLineColModel.set("width", cacheWidth + pixel);
    			} else {
    				cacheLeft = selectRegionModel.get("physicsPosi").left;
    				selectRegionModel.set("physicsPosi.left", cacheLeft + pixel);
    				siderLineColModel.set("left", cacheLeft + pixel);
    			}
    		},
    		/**
    		 * 视图销毁
    		 * @method destroy
    		 */
    		destroy: function() {
    			Backbone.off('call:colsHeadContainer');
    			Backbone.off('event:colsHeadContainer:relaseSpaceEffect');
    			Backbone.off('event:colWidthAdjust');
    			this.undelegateEvents();
    			this.headItemColContainer.destroy();
    			this.remove();
    		}
    	});
    	return ColsHeadContainer;
    });
    define('views/siderLineColContainer',function() {
    	
    	var Backbone = require('lib/backbone'),
    		cache = require('basic/tools/cache'),
    		util = require('basic/util/clone'),
    		headItemCols = require('collections/headItemCol');
    
    
    	/**
    	 * 选中区域列标线视图类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class SiderLineColContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var SiderLineColContainer = Backbone.View.extend({
    		/**
    		 * 绑定视图
    		 * @property el
    		 * @type {String}
    		 */
    		className: 'col-head-line',
    		/**
    		 * 视图初始化函数
    		 * @method initialize
    		 */
    		initialize: function() {
    			var modelList;
    			this.listenTo(this.model, 'change', this.render);
    			this.currentRule = util.clone(cache.CurrentRule);
    			modelList = headItemCols;
    			this.userViewLeft = cache.TempProp.isFrozen ? modelList.getModelByAlias(cache.UserView.colAlias).get('left') : 0;
    			this.offsetLeft = cache.TempProp.isFrozen ? (this.currentRule.displayPosition.offsetLeft || 0) : 0;
    		},
    		/**
    		 * 页面渲染方法
    		 * @method render
    		 */
    		render: function() {
    			var modelJSON = this.model.toJSON();
    			this.$el.css({
    				left: modelJSON.left - this.offsetLeft - this.userViewLeft,
    				width: modelJSON.width - 2
    			});
    			return this;
    		},
    		/**
    		 * 视图销毁
    		 * @method destroy
    		 */
    		destroy: function() {
    			this.remove();
    		}
    	});
    	return SiderLineColContainer;
    });
    define('views/colsAllHeadContainer',function() {
    	
    
    	var Backbone = require('lib/backbone'),
    		siderLineCols = require('collections/siderLineCol'),
    		ColsHeadContainer = require('views/colsHeadContainer'),
    		SiderLineColContainer = require('views/siderLineColContainer');
    
    	/**
    	 * ColsAllHeadContainer
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class ColsAllHeadContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var ColsAllHeadContainer = Backbone.View.extend({
    		/**
    		 * @property {element} className
    		 */
    		className: 'col-head-bg col-head-height',
    		/**
    		 * 初始化监听事件
    		 * @method initialize
    		 * @param  {object}   allAttributes 盒模型属性集合
    		 */
    		initialize: function(options) {
    			Backbone.on('call:colsAllHeadContainer', this.callColsAllHeadContainer, this);
    			this.listenTo(siderLineCols, 'add', this.addSiderLineCol);
    			this.boxAttributes = options.boxAttributes;
    		},
    		/**
    		 * 初始化`ColHeadContainer`，渲染DOM结构
    		 * @method render
    		 * @return {object} 返回自身对象`this`
    		 */
    		render: function() {
    			var modelSiderLineColList = siderLineCols.models,
    				len = modelSiderLineColList.length,
    				i;
    			this.colsHeadContainer = new ColsHeadContainer();
    			this.attributesRender(this.boxAttributes);
    			this.$el.append(this.colsHeadContainer.render().el);
    			if (len === 0) {
    				this.createSiderLineCol();
    			} else {
    				for (i = len - 1; i >= 0; i--) {
    					this.addSiderLineCol(modelSiderLineColList[i]);
    				}
    			}
    			return this;
    		},
    		/**
    		 * 对外开放自身对象`this`
    		 * @method callColsAllHeadContainer
    		 * @param  {function} receiveFunc 传入接受对象的方法
    		 */
    		callColsAllHeadContainer: function(receiveFunc) {
    			receiveFunc(this);
    		},
    		/**
    		 * 自身属性渲染
    		 * @method attributesRender
    		 * @param  {object} newAttributes 盒模型属性
    		 */
    		attributesRender: function(newAttributes) {
    			if (newAttributes.width !== -1) {
    				this.$el.css({
    					'width': newAttributes.width
    				});
    			}
    		},
    		/**
    		 * [addSiderLineCol description]
    		 * @method addSiderLineCol
    		 * @param  {[type]}        modelSiderLineCol
    		 */
    		addSiderLineCol: function(modelSiderLineCol) {
    			this.siderLineColContainer = new SiderLineColContainer({
    				model: modelSiderLineCol
    			});
    			this.$el.append(this.siderLineColContainer.render().el);
    		},
    		/**
    		 * [createSiderLineCol description]
    		 * @method createSiderLineCol
    		 * @return {[type]}
    		 */
    		createSiderLineCol: function() {
    			siderLineCols.add({
    				left: 0,
    				width: config.User.cellWidth - 1
    			});
    		},
    		destroy: function() {
    			Backbone.off('call:colsAllHeadContainer');
    			this.siderLineColContainer.destroy();
    			this.colsHeadContainer.destroy();
    			this.remove();
    		}
    	});
    	return ColsAllHeadContainer;
    
    });
    define('views/colsPanelContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		cache = require('basic/tools/cache'),
    		config = require('spreadsheet/config'),
    		util = require('basic/util/clone'),
    		headItemCols = require('collections/headItemCol'),
    		ColsAllHeadContainer = require('views/colsAllHeadContainer'),
    		ColsPanelContainer;
    
    	/**
    	 * ColsPanelContainer
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class ColsPanelContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	ColsPanelContainer = Backbone.View.extend({
    		/**
    		 * @property {element} el
    		 */
    		className: 'col-head-container col-head-highlight',
    		/**
    		 * 初始化事件监听
    		 * @method initialize
    		 * @param  {[type]}   allAttributes
    		 * @return {[type]}
    		 */
    		initialize: function(options) {
    			var modelsHeadLineColList,
    				modelsHeadLineColRegionList,
    				modelHeadLinelastCol,
    				len;
    			Backbone.on('call:colsPanelContainer', this.colsPanelContainer, this);
    			Backbone.on('event:colsPanelContainer:destroy', this.destroy, this);
    			Backbone.trigger('event:colsPanelContainer:adjustWidth', this.adjustWidth, this);
    			/**
    			 * 盒模型属性
    			 * @property {object} boxAttribute
    			 */
    			this.boxModel = {};
    			this.cacheDiffDistance = 0;
    			this.currentRule = cache.CurrentRule;
    			this.boxAttributes = this.currentRule.boxAttributes;
    			modelsHeadLineColRegionList = modelsHeadLineColList = headItemCols.models;
    			if (cache.TempProp.isFrozen) {
    				if (this.currentRule.displayPosition.endIndex) {
    					modelsHeadLineColRegionList = modelsHeadLineColList.slice(this.currentRule.displayPosition.startIndex, this.currentRule.displayPosition.endIndex);
    				} else {
    					modelsHeadLineColRegionList = modelsHeadLineColList.slice(this.currentRule.displayPosition.startIndex);
    				}
    			}
    			len = modelsHeadLineColRegionList.length;
    			//it isn't frozen handle
    			//the page is just build execel, len is 0
    			if (len === 0) {
    				this.boxModel.width = config.User.initColNum * config.User.cellWidth - 1;
    				return;
    			}
    			//the page is reload excel, len will be appoint num ,will be not necessarily start A,1 
    			modelHeadLinelastCol = modelsHeadLineColRegionList[len - 1];
    			this.boxModel.width = this.currentRule.autoScroll ? modelHeadLinelastCol.get('left') + modelHeadLinelastCol.get('width') - modelsHeadLineColRegionList[0].get('left') : -1;
    		},
    		/**
    		 * 渲染本身对象
    		 * @method render
    		 * @return {object} 返回自身对象`this`
    		 */
    		render: function() {
    			this.colsAllHeadContainer = new ColsAllHeadContainer({
    				boxAttributes: {
    					width: this.boxModel.width
    				}
    			});
    			this.attributesRender(this.boxAttributes);
    			this.$el.html(this.colsAllHeadContainer.render().el);
    			return this;
    		},
    		/**
    		 * 对外开放本对象
    		 * @method colsPanelContainer
    		 * @param  {function} receiveFunc 传入接受对象的方法
    		 */
    		colsPanelContainer: function(receiveFunc) {
    			receiveFunc(this);
    		},
    		/**
    		 * 自身属性渲染
    		 * @method attributesRender
    		 * @param  {object} newAttributes 盒模型属性
    		 */
    		attributesRender: function(newAttributes) {
    			if (newAttributes.width !== -1) {
    				this.$el.css({
    					'width': newAttributes.width
    				});
    			}
    			if (newAttributes.style) {
    				this.$el.addClass(newAttributes.style);
    			}
    		},
    		/**
    		 * 滚动到指定位置
    		 * @method scrollToPosition
    		 * @param  {int} position 指定位置的值
    		 */
    		scrollToPosition: function(position) {
    			this.$el.scrollLeft(position);
    		},
    		/**
    		 * 视图销毁
    		 * @method destroy
    		 */
    		destroy: function() {
    			Backbone.off('call:colsPanelContainer');
    			Backbone.off('event:colsPanelContainer:destroy');
    			this.colsAllHeadContainer.destroy();
    			this.remove();
    		}
    	});
    	return ColsPanelContainer;
    });
    define('views/rowsSpaceLineContainer',function() {
    	
    	var Backbone = require('lib/backbone');
    
    	/**
    	 * 行标题容器视图类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class RowsSpaceLineContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var RowsSpaceLineContainer = Backbone.View.extend({
    		/**
    		 * @property {element} className
    		 */
    		className: 'row-space-container',
    		/**
    		 * 初始化监听事件
    		 * @method initialize
    		 * @param  {object}   allAttributes 盒模型属性集合
    		 */
    		initialize: function(allAttributes) {
    			Backbone.on('call:rowsSpaceLineContainer', this.callRowsSpaceLineContainer, this);
    			Backbone.on('event:rowsSpaceLineContainer:destroy', this.destroy, this);
    			this.boxAttributes = allAttributes.boxAttributes;
    		},
    		/**
    		 * 渲染DOM对象属性
    		 * @method render
    		 * @return {object} 返回自身对象`this`
    		 */
    		render: function() {
    			this.attributesRender(this.boxAttributes);
    			return this;
    		},
    		/**
    		 * 对外开放自身对象`this`
    		 * @method callRowsSpaceLineContainer
    		 * @param  {Function} receiveFunc 传入接受对象的方法
    		 */
    		callRowsSpaceLineContainer: function(receiveFunc) {
    			receiveFunc(this);
    		},
    		/**
    		 * 自身属性渲染
    		 * @method attributesRender
    		 * @param  {object} newAttributes 盒模型属性
    		 */
    		attributesRender: function(newAttributes) {
    			this.$el.css({
    				'top': newAttributes.top
    			});
    		},
    		/**
    		 * 销毁当前view视图
    		 * @method destroy
    		 */
    		destroy: function() {
    			this.remove();
    		}
    	});
    	return RowsSpaceLineContainer;
    });
    define('views/headItemRowContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		Handlebars = require('lib/handlebars'),
    		headItemRows = require('collections/headItemRow'),
    		cache = require('basic/tools/cache'),
    		util = require('basic/util/clone'),
    		config = require('spreadsheet/config');
    	/**
    	 * HeadItemRowContainer
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class HeadItemRowContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var HeadItemRowContainer = Backbone.View.extend({
    		/**
    		 * @property {element} className
    		 */
    		className: 'row-head-item',
    		/**
    		 * 初始化监听
    		 * @method initialize
    		 */
    		initialize: function(option) {
    			this.listenTo(this.model, 'change:activeState', this.toggleActive);
    			this.listenTo(this.model, 'change:top', this.changeTop);
    			this.listenTo(this.model, 'change:height', this.changeHeight);
    
    			this.offsetTop = cache.TempProp.isFrozen ? (option.frozenTop || 0) : 0;
    			this.reduceUserView = option.reduceUserView;
    			this.endIndex = option.endIndex;
    			//ps:修改
    			if (cache.TempProp.isFrozen !== true || this.endIndex === undefined) {
    				this.listenTo(this.model, 'change:isView', this.destroy);
    			}
    		},
    		/**
    		 * 渲染本身对象
    		 * @method render
    		 * @return {object} 返回自身对象`this`
    		 */
    		render: function() {
    			this.template = Handlebars.compile($('#tempRowHeadItem').html());
    			this.changeTop();
    			this.changeHeight();
    			this.$el.html(this.template(this.model.toJSON())).data('alias', this.model.get('alias'));
    			this.toggleActive();
    			return this;
    		},
    		/**
    		 * 切换DOM对象的状态
    		 * @method toggleActive
    		 */
    		toggleActive: function() {
    			this.$el.toggleClass("active", this.model.toJSON().activeState);
    		},
    		/**
    		 * 修改DOM对象的`top`值
    		 * @method changeTop
    		 */
    		changeTop: function() {
    			var userViewTop = 0,
    				userViewModel;
    			if (cache.TempProp.isFrozen) {
    				userViewModel = headItemRows.getModelByAlias(cache.UserView.rowAlias);
    				userViewTop = userViewModel.toJSON().top;
    			}
    			this.$el.css({
    				top: this.model.toJSON().top - this.offsetTop - userViewTop
    			});
    		},
    		/**
    		 * 修改DOM对象的`height`值
    		 * @method changeHeight
    		 * @return {[type]}
    		 */
    		changeHeight: function() {
    			this.$el.css({
    				height: this.model.toJSON().height
    			});
    		},
    		/**
    		 * 视图销毁
    		 * @method destroy
    		 */
    		destroy: function() {
    			this.remove();
    		}
    	});
    	return HeadItemRowContainer;
    });
    define('views/rowsHeadContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		config = require('spreadsheet/config'),
    		cache = require('basic/tools/cache'),
    		binary = require('basic/util/binary'),
    		send = require('basic/tools/send'),
    		headItemRows = require('collections/headItemRow'),
    		headItemCols = require('collections/headItemCol'),
    		cells = require('collections/cells'),
    		selectRegions = require('collections/selectRegion'),
    		siderLineRows = require('collections/siderLineRow'),
    		siderLineCols = require('collections/siderLineCol'),
    		RowsSpaceLineContainer = require('views/rowsSpaceLineContainer'),
    		HeadItemRowContainer = require('views/headItemRowContainer'),
    		selectCellCols = require('entrance/cell/selectCellCols');
    
    
    	/**
    	 * 行标题容器视图类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class RowsHeadContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var RowsHeadContainer = Backbone.View.extend({
    		/**
    		 * 设置class属性
    		 * @property className
    		 * @type {String}
    		 */
    		className: 'row-head-panel',
    		/**
    		 * 视图初始化函数
    		 * @method initialize
    		 */
    		initialize: function(options) {
    			if (!cache.TempProp.isFrozen) {
    				this.delegateEvents({
    					'mousedown .row-head-item': 'transAction',
    					'mousemove .row-head-item': 'overEffect'
    				});
    			}
    			Backbone.on('call:rowsHeadContainer', this.callRowsHeadContainer, this);
    			Backbone.on('event:rowsHeadContainer:relaseSpaceEffect', this.relaseSpaceEffect, this);
    			Backbone.on('event:rowHeightAdjust', this.rowHeightAdjust, this);
    			this.rowNumber = 0;
    			this.currentRule = cache.CurrentRule;
    			if (cache.TempProp.isFrozen !== true || this.currentRule.displayPosition.endIndex === undefined) {
    				this.listenTo(headItemRows, 'add', this.addRowsHeadContainer);
    			}
    
    		},
    		/**
    		 * 页面渲染方法
    		 * @method render
    		 */
    		render: function() {
    			var i = 0,
    				modelsHeadLineRowList,
    				modelsHeadLineRowRegionList,
    				len,
    				activeModelList,
    				modelList = headItemRows;
    			modelsHeadLineRowList = modelsHeadLineRowRegionList = modelList.models;
    			if (cache.TempProp.isFrozen) {
    				if (this.currentRule.displayPosition.endIndex !== undefined) {
    					modelsHeadLineRowRegionList = modelsHeadLineRowList.slice(this.currentRule.displayPosition.startIndex, this.currentRule.displayPosition.endIndex);
    				} else {
    					modelsHeadLineRowRegionList = modelsHeadLineRowList.slice(this.currentRule.displayPosition.startIndex);
    				}
    			}
    			len = modelsHeadLineRowRegionList.length;
    			for (; i < len; i++) {
    				this.addRowsHeadContainer(modelsHeadLineRowRegionList[i], true);
    				this.rowNumber++;
    			}
    			//ensure y or n has exist active model,
    			//if exist , the first model will be not active this.
    			activeModelList = modelList.where({
    				'activeState': true
    			});
    			if (activeModelList.length === 0) {
    				modelsHeadLineRowList[0].set('activeState', true);
    			}
    			this.triggerCallback();
    			return this;
    		},
    		/**
    		 * 绑定关联视图
    		 * @method triggerCallback
    		 */
    		triggerCallback: function() {
    			_.bindAll(this, 'callView');
    			Backbone.trigger('call:screenContainer', this.callView('viewScreenContainer'));
    			Backbone.trigger('call:mainContainer', this.callView('viewMainContainer'));
    			Backbone.trigger('call:cellsContainer', this.callView('viewCellsContainer'));
    			Backbone.trigger('call:rowsAllHeadContainer', this.callView('viewRowsAllHeadContainer'));
    		},
    		/**
    		 * 用于其他视图，绑定该视图或调用该视图方法
    		 * @method callRowsHeadContainer
    		 * @param {function} receiveFunc 回调函数
    		 */
    		callRowsHeadContainer: function(receiveFunc) {
    			receiveFunc(this);
    		},
    		/**
    		 * 鼠标移动到列标题，渲染效果
    		 * @method overEffect
    		 * @param  {event} e 鼠标移动事件
    		 */
    		overEffect: function(e) {
    			e.currentTarget.style.cursor = this.isAdjustable(e) === true ? 'row-resize' : '';
    		},
    		/**
    		 * 判断是否可以更改列宽
    		 * @method isAdjustable
    		 * @param  {event}  e 鼠标事件
    		 */
    		isAdjustable: function(e) {
    			var overEl = this.itemEl || e.currentTarget;
    			return e.pageY - $(overEl).offset().top > overEl.clientHeight - config.System.effectDistanceRow ? true : false;
    		},
    		/**
    		 * 处理鼠标点击事件
    		 * @method transAction
    		 * @param  {event} e 鼠标事件
    		 */
    		transAction: function(e) {
    			if (!this.isAdjustable(e)) {
    				this.rowLocate(e);
    				return;
    			}
    			this.spaceEffect(e);
    		},
    		callView: function(name) {
    			var object = this;
    			return function(callBack) {
    				object[name] = callBack;
    			};
    		},
    		/**
    		 * 行调整时效果，绑定移动事件
    		 * @method spaceEffect
    		 * @param  {event} e 鼠标点击事件
    		 */
    		spaceEffect: function(e) {
    			this.itemEl = e.currentTarget;
    			this.cacheItemElOffsetHeight = this.itemEl.offsetHeight;
    			this.$itemEl = $(this.itemEl);
    			this.$lockData = $('.row-head-item:gt(' + this.$itemEl.index() + ')', this.el);
    			this.$tempSpaceContainer = $('<div/>').addClass('temp-space-container').html(this.$lockData);
    			this.$el.append(this.$tempSpaceContainer);
    			this.viewScreenContainer.mouseMoveHeadContainer(e, {
    				spaceMouse: this.itemEl.clientHeight - e.offsetY,
    				// from currentTarget rightBorder caculation distance to document
    				offsetTopByBottom: this.itemEl.clientHeight + this.$itemEl.offset().top,
    				self: this
    			}, this.moveEvent);
    			this.rowsSpaceLineContainer = new RowsSpaceLineContainer({
    				boxAttributes: {
    					top: this.itemEl.offsetTop + this.itemEl.clientHeight
    				}
    			});
    			$('.line-container').append(this.rowsSpaceLineContainer.render().el);
    		},
    		/**
    		 * 行调整时，鼠标移动事件
    		 * @method moveEvent
    		 * @param  {event} e 鼠标移动事件
    		 */
    		moveEvent: function(e) {
    			var transData = e.data,
    				mouseSpace = e.pageY + transData.spaceMouse,
    				itemElHeight = parseInt(mouseSpace - transData.self.$itemEl.offset().top, 0);
    			if (itemElHeight < config.System.effectDistanceRow) {
    				return;
    			}
    			transData.self.$itemEl.css('height', itemElHeight);
    			transData.self.$tempSpaceContainer.css('top', parseInt(mouseSpace - transData.offsetTopByBottom, 0));
    			transData.self.rowsSpaceLineContainer.attributesRender({
    				top: parseInt(mouseSpace - transData.self.$el.offset().top, 0)
    			});
    		},
    		/**
    		 * 拖动结束，调整列宽
    		 * @method relaseSpaceEffect
    		 * @param  {event} e 鼠标释放事件
    		 */
    		relaseSpaceEffect: function(e) {
    			var i = 0,
    				len,
    				height,
    				modelList,
    				itemElIndex,
    				diffDistance,
    				currentEl;
    			if (!this.$lockData) {
    				return;
    			}
    			// this.requstAdjust();
    			modelList = headItemRows.models;
    			len = modelList.length;
    			itemElIndex = headItemRows.getIndexByAlias(this.$itemEl.data('alias'));
    			diffDistance = this.itemEl.offsetHeight - this.cacheItemElOffsetHeight;
    			height = diffDistance + headItemRows.models[itemElIndex].get('height');
    
    			this.rowHeightAdjust(itemElIndex, height);
    
    			this.$el.append(this.$lockData);
    			this.$tempSpaceContainer.remove();
    			this.itemEl = this.$itemEl = this.$lockData = null;
    		},
    		rowHeightAdjust: function(itemElIndex, height) {
    			var diffDistance = height - headItemRows.models[itemElIndex].get('height');
    			this.adjustHeadLine(itemElIndex, diffDistance);
    			this.adjustCells(itemElIndex, diffDistance);
    			this.adjustSelectRegion(itemElIndex, diffDistance);
    			this.requstAdjust(itemElIndex, diffDistance);
    			if (this.viewCellsContainer === undefined || this.viewRowsAllHeadContainer === undefined) {
    				this.triggerCallback();
    			}
    
    			this.viewCellsContainer.attributesRender({
    				width: headItemCols.getMaxDistanceWidth(),
    				height: headItemRows.getMaxDistanceHeight()
    			});
    			this.viewRowsAllHeadContainer.$el.css({
    				height: headItemRows.getMaxDistanceHeight()
    			});
    		},
    		/**
    		 * 向后台发送请求，调整列宽
    		 * @method requstAdjust
    		 */
    		requstAdjust: function(rowIndex, offset) {
    			send.PackAjax({
    				url: 'cells.htm?m=rows_height&excelId=' + window.SPREADSHEET_AUTHENTIC_KEY + '&sheetId=1&rowIndex=' + rowIndex + '&offset=' + offset,
    				success: function(data) {
    					if (data.returnCode === 200) {
    						console.log('success');
    					}
    				}
    			});
    		},
    		/**
    		 * 整行选中
    		 * @method rowLocate
    		 * @param  {event} e 鼠标点击事件
    		 */
    		rowLocate: function(e) {
    			var mainMousePosiY,
    				modelCell,
    				headModelRow,
    				headModelCol,
    				modelIndexRow,
    				headLineColModelList,
    				headLineRowModelList;
    			if (!this.viewMainContainer) {
    				this.triggerCallback();
    			}
    			mainMousePosiY = e.clientY - config.System.outerTop - $('#spreadSheet').offset().top + this.viewMainContainer.el.scrollTop;
    			//headColModels,headRowModels list
    			headLineRowModelList = headItemRows.models;
    			//this model index of headline
    			modelIndexRow = binary.modelBinary(mainMousePosiY, headLineRowModelList, 'top', 'height', 0, headLineRowModelList.length - 1);
    			//ps：修改
    			selectCellCols('1', null, modelIndexRow, e);
    		},
    		/**
    		 * 添加列标视图
    		 * @method addRowsHeadContainer
    		 * @param {app.Models.LineRow} modelHeadItemRow 
    		 */
    		addRowsHeadContainer: function(modelHeadItemRow, initialize) {
    			this.headItemRowContainer = new HeadItemRowContainer({
    				model: modelHeadItemRow,
    				frozenTop: this.currentRule.displayPosition.offsetTop,
    				reduceUserView: this.currentRule.reduceUserView,
    				endIndex: this.currentRule.displayPosition.endIndex
    			});
    			if (initialize === true || modelHeadItemRow.get('top') > config.displayRowHeight) {
    				this.$el.append(this.headItemRowContainer.render().el);
    			} else {
    				this.$el.prepend(this.headItemRowContainer.render().el);
    			}
    
    
    		},
    		/**
    		 * 添加列标视图
    		 * @method createHeadItemRow
    		 */
    		createHeadItemRow: function() {
    			headItemRows.add(this.newAttrRow());
    		},
    		/**
    		 * 初始化行属性
    		 * @method newAttrRow
    		 * @return {Object} 属性对象
    		 */
    		newAttrRow: function() {
    			var currentObject;
    			currentObject = {
    				alias: (this.rowNumber + 1).toString(),
    				top: this.rowNumber * 20,
    				height: 19,
    				displayName: binary.buildRowAlias(this.rowNumber)
    			};
    			return currentObject;
    		},
    		/**
    		 * 调整行标题行高
    		 * @method adjustHeadLine
    		 * @param  {num} index 调整行索引
    		 * @param  {num} pixel 调整高度
    		 */
    		adjustHeadLine: function(index, pixel) {
    			var i,
    				len,
    				headLineList,
    				tempHeight,
    				tempTop;
    			headLineList = headItemRows.models;
    			tempHeight = headLineList[index].get('height');
    			headLineList[index].set('height', tempHeight + pixel);
    			len = headLineList.length;
    			for (i = index + 1; i < len; i++) {
    				tempTop = headLineList[i].get('top');
    				headLineList[i].set('top', tempTop + pixel);
    			}
    		},
    		/**
    		 * 调整单元格高度
    		 * @method adjustCells
    		 * @param  {num} index 调整行索引
    		 * @param  {num} pixel 调整高度
    		 */
    		adjustCells: function(index, pixel) {
    			var passAdjustRowCells, //经过调整列cells
    				adjustCells, //其余需要调整cells
    				loadRowIndex,
    				loadRegion,
    				i, j, gridLineLen,
    				len,
    				cellList = cells;
    			passAdjustRowCells = cellList.getCellsByRowIndex(index, index);
    			len = passAdjustRowCells.length;
    			for (i = 0; i < len; i++) {
    				passAdjustRowCells[i].set('physicsBox.height', passAdjustRowCells[i].get('physicsBox').height + pixel);
    			}
    			gridLineLen = headItemRows.length;
    			adjustCells = cellList.getCellsInStartRowRegion(index + 1, gridLineLen - 1);
    			len = adjustCells.length;
    			for (j = 0; j < len; j++) {
    				adjustCells[j].set('physicsBox.top', adjustCells[j].get('physicsBox').top + pixel);
    			}
    
    		},
    		/**
    		 * 调整选中区域高度
    		 * @method adjustSelectRegion
    		 * @param  {num} index 调整行索引
    		 * @param  {num} pixel 调整高度
    		 */
    		adjustSelectRegion: function(index, pixel) {
    			var startRowIndex,
    				endRowIndex,
    				selectRegionModel,
    				siderLineRowModel,
    				cacheHeight,
    				cacheTop;
    			selectRegionModel = selectRegions.models[0];
    			startRowIndex = selectRegionModel.get('wholePosi').startY;
    			endRowIndex = selectRegionModel.get('wholePosi').endY;
    
    			if (endRowIndex < index) {
    				return;
    			}
    
    			siderLineRowModel = siderLineRows.models[0];
    			if (startRowIndex <= index) {
    				cacheHeight = selectRegionModel.get("physicsBox").height;
    				selectRegionModel.set("physicsBox.height", cacheHeight + pixel);
    				siderLineRowModel.set("height", cacheHeight + pixel);
    			} else {
    				cacheTop = selectRegionModel.get("physicsPosi").top;
    				selectRegionModel.set("physicsPosi.top", cacheTop + pixel);
    				siderLineRowModel.set("top", cacheTop + pixel);
    			}
    
    		},
    		/**
    		 * 视图销毁
    		 * @method destroy
    		 */
    		destroy: function() {
    			Backbone.off('call:rowsHeadContainer');
    			Backbone.off('event:rowsHeadContainer:relaseSpaceEffect');
    			Backbone.off('event:rowHeightAdjust');
    			this.undelegateEvents();
    			this.remove();
    		}
    	});
    	return RowsHeadContainer;
    });
    define('views/siderLineRowContainer',function() {
    	
    	var Backbone = require('lib/backbone'),
    		cache = require('basic/tools/cache'),
    		util = require('basic/util/clone'),
    		headItemRows = require('collections/headItemRow');
    	/**
    	 * 选中区域行标线视图类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class SiderLineRowContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var SiderLineRowContainer = Backbone.View.extend({
    		/**
    		 * 绑定视图
    		 * @property el
    		 * @type {String}
    		 */
    		className: 'row-head-line',
    		/**
    		 * 视图初始化函数
    		 * @method initialize
    		 */
    		initialize: function() {
    			var modelList;
    			this.listenTo(this.model, 'change', this.render);
    			this.currentRule = util.clone(cache.CurrentRule);
    			modelList = headItemRows;
    			this.userViewTop = cache.TempProp.isFrozen ? modelList.getModelByAlias(cache.UserView.rowAlias).get('top') : 0;
    			this.offsetTop = cache.TempProp.isFrozen ? (this.currentRule.displayPosition.offsetTop || 0) : 0;
    		},
    		/**
    		 * 页面渲染方法
    		 * @method render
    		 */
    		render: function() {
    			var modelJSON = this.model.toJSON();
    			this.$el.css({
    				top: modelJSON.top - this.offsetTop - this.userViewTop,
    				height: modelJSON.height - 2
    			});
    			return this;
    		},
    		/**
    		 * 视图销毁
    		 * @method destroy
    		 */
    		destroy: function() {
    			this.remove();
    		}
    	});
    	return SiderLineRowContainer;
    });
    define('views/rowsAllHeadContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		siderLineRows = require('collections/siderLineRow'),
    		RowsHeadContainer = require('views/rowsHeadContainer'),
    		SiderLineRowContainer = require('views/siderLineRowContainer');
    
    	/**
    	 * 行标题，标线容器视图类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class RowsAllHeadContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    
    	var RowsAllHeadContainer = Backbone.View.extend({
    		/**
    		 * 设置class属性
    		 * @property className
    		 * @type {String}
    		 */
    		className: 'row-head-bg row-head-width',
    		/**
    		 * 视图初始化函数
    		 * @method initialize
    		 * @param  {Object} allAttributes 容器高度属性
    		 */
    		initialize: function(options) {
    			Backbone.on('call:rowsAllHeadContainer', this.callRowsAllHeadContainer, this);
    			this.listenTo(siderLineRows, 'add', this.addSiderLineRow);
    			this.boxAttributes = options.boxAttributes;
    		},
    		/**
    		 * 页面渲染方法
    		 * @method render
    		 */
    		render: function() {
    			var modelSiderLineRowList = siderLineRows.models,
    				len = modelSiderLineRowList.length,
    				i;
    
    			this.rowsHeadContainer = new RowsHeadContainer();
    			this.attributesRender(this.boxAttributes);
    			this.$el.append(this.rowsHeadContainer.render().el);
    			if (len === 0) {
    				this.createSiderLineRow();
    			} else {
    				for (i = len - 1; i >= 0; i--) {
    					this.addSiderLineRow(modelSiderLineRowList[i]);
    				}
    
    			}
    			return this;
    		},
    		/**
    		 * 用于其他视图，绑定该视图或调用该视图方法
    		 * @method callRowsAllHeadContainer
    		 * @param {function} receiveFunc 回调函数
    		 */
    		callRowsAllHeadContainer: function(receiveFunc) {
    			receiveFunc(this);
    		},
    		/**
    		 * 渲染视图高度
    		 * @method attributesRender
    		 * @param  {object} newAttributes 存储高度对象
    		 */
    		attributesRender: function(newAttributes) {
    			if (newAttributes.height !== -1) {
    				this.$el.css({
    					'height': newAttributes.height
    				});
    			}
    		},
    		/**
    		 * 增加行标线视图
    		 * @method addSiderLineRow
    		 * @param {app.Models.SiderLineRow} modelSiderLineRow 增加
    		 */
    		addSiderLineRow: function(modelSiderLineRow) {
    			this.siderLineRowContainer = new SiderLineRowContainer({
    				model: modelSiderLineRow
    			});
    			this.$el.append(this.siderLineRowContainer.render().el);
    		},
    		/**
    		 * 增加行标线
    		 * @method createSiderLineRow
    		 */
    		createSiderLineRow: function() {
    			siderLineRows.add({
    				top: 0,
    				height: config.User.cellHeight - 1
    			});
    		},
    		/**
    		 * 视图销毁
    		 * @method destroy
    		 */
    		destroy: function() {
    			Backbone.off('call:rowsAllHeadContainer');
    			this.siderLineRowContainer.destroy();
    			this.rowsHeadContainer.destroy();
    			this.remove();
    		}
    	});
    	return RowsAllHeadContainer;
    });
    define('views/rowsPanelContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		cache = require('basic/tools/cache'),
    		config = require('spreadsheet/config'),
    		util = require('basic/util/clone'),
    		headItemRows = require('collections/headItemRow'),
    		RowsAllHeadContainer = require('views/rowsAllHeadContainer');
    
    	/**
    	 * 行标题容器视图类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class RowsPanelContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var RowsPanelContainer = Backbone.View.extend({
    		/**
    		 * 绑定视图
    		 * @property el
    		 * @type {String}
    		 */
    		className: 'row-head-container row-head-highlight',
    		/**
    		 * 初始化事函数
    		 * @method initialize
    		 * @param {Object} allAttributes 视图高度信息
    		 */
    		initialize: function(options) {
    			var modelsHeadLineRowList,
    				modelsHeadLineRowRegionList,
    				modellastHeadLineRow,
    				len;
    
    			Backbone.on('call:rowsPanelContainer', this.rowsPanelContainer, this);
    			Backbone.on('event:rowsPanelContainer:destroy', this.destroy, this);
    			this.boxModel = {};
    			this.currentRule = util.clone(cache.CurrentRule);
    			this.boxAttributes = this.currentRule.boxAttributes;
    			modelsHeadLineRowRegionList = modelsHeadLineRowList = headItemRows.models;
    
    			if (cache.TempProp.isFrozen) {
    				if (this.currentRule.displayPosition.endIndex) {
    					modelsHeadLineRowRegionList = modelsHeadLineRowList.slice(this.currentRule.displayPosition.startIndex, this.currentRule.displayPosition.endIndex);
    				} else {
    					modelsHeadLineRowRegionList = modelsHeadLineRowList.slice(this.currentRule.displayPosition.startIndex);
    				}
    			}
    			len = modelsHeadLineRowRegionList.length;
    			if (len === 0) {
    				this.boxModel.height = config.User.initRowNum * config.User.cellHeight - 1;
    				return;
    			}
    			modellastHeadLineRow = modelsHeadLineRowList[len - 1];
    			this.boxModel.height = this.currentRule.autoScroll ? modellastHeadLineRow.get('top') + modellastHeadLineRow.get('height') - modelsHeadLineRowList[0].get('top') : -1;
    		},
    		/**
    		 * 视图渲染函数
    		 * @method render
    		 * @return {Object} 该视图类对象
    		 */
    		render: function() {
    			this.rowsAllHeadContainer = new RowsAllHeadContainer({
    				boxAttributes: {
    					height: this.boxModel.height
    				},
    				startY: this.startY,
    				endY: this.endY
    			});
    			this.attributesRender(this.boxAttributes);
    			this.$el.html(this.rowsAllHeadContainer.render().el);
    			return this;
    		},
    		/**
    		 * 用于其他视图绑定该视图
    		 * @method rowsPanelContainer
    		 * @param  {Function} receiveFunc 回调函数
    		 */
    		rowsPanelContainer: function(receiveFunc) {
    			receiveFunc(this);
    		},
    		/**
    		 * 渲染高度
    		 * @method attributesRender
    		 * @param  {Object} newAttributes 视图高度信息
    		 */
    		attributesRender: function(newAttributes) {
    			if (newAttributes.height !== -1) {
    				this.$el.css({
    					'height': newAttributes.height
    				});
    			}
    			if (newAttributes.style) {
    				this.$el.addClass(newAttributes.style);
    			}
    		},
    		/**
    		 * 滚动到指定位置
    		 * @method scrollToPosition
    		 * @param  {int} position 指定位置的值
    		 */
    		scrollToPosition: function(position) {
    			this.$el.scrollTop(position);
    		},
    		/**
    		 * 视图销毁
    		 * @method destroy
    		 */
    		destroy: function() {
    			Backbone.off('call:rowsPanelContainer');
    			Backbone.off('event:rowsPanelContainer:destroy');
    			this.rowsAllHeadContainer.destroy();
    			this.remove();
    		},
    		/**
    		 * 调整容器高度
    		 * @method adjustHeadItemContainer
    		 * @property {number} height 高度
    		 */
    		adjustHeadItemContainer: function(height) {
    			this.rowsAllHeadContainer.$el.css({
    				'height': height
    			});
    		},
    		/**
    		 * 增加子视图
    		 * @method addHeadItemView
    		 * @property {object} HeadItemModel 增加对象
    		 */
    		addHeadItemView: function(HeadItemModel) {
    			this.rowsAllHeadContainer.rowsHeadContainer.addRowsHeadContainer(HeadItemModel);
    		}
    	});
    	return RowsPanelContainer;
    });
    define('views/bodyContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		config = require('spreadsheet/config'),
    		cache = require('basic/tools/cache'),
    		observerPattern = require('basic/util/observer.pattern'),
    		headItemRows = require('collections/headItemRow'),
    		headItemCols = require('collections/headItemCol'),
    		SheetsContainer = require('views/sheetsContainer'),
    		MainContainer = require('views/mainContainer'),
    		ColsPanelContainer = require('views/colsPanelContainer'),
    		RowsPanelContainer = require('views/rowsPanelContainer'),
    		BodyContainer;
    
    	/**
    	 * body标签DOM对象View视图
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class BodyContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	BodyContainer = Backbone.View.extend({
    		el: '#spreadSheet',
    		/**
    		 * 初始化绑定事件
    		 * @property events
    		 * @default {}
    		 */
    		events: {
    			/**
    			 * 当`mousemove`时，获取实时的鼠标信息
    			 * @event mousemove
    			 */
    			'mousemove': 'mouseInfo'
    		},
    		/**
    		 * 初始化bodyContainer
    		 * @method initialize
    		 */
    		initialize: function() {
    			Backbone.on('call:bodyContainer', this.callBodyContainer, this);
    			Backbone.on('event:bodyContainer:executiveFrozen', this.executiveFrozen, this);
    		},
    		/**
    		 * 渲染页面
    		 * @method render
    		 * @chainable
    		 */
    		render: function() {
    			this.calculation();
    			this.adaptScreen();
    			this.generateSheet();
    		},
    
    		generateSheet: function() {
    			var sheetsView = new SheetsContainer();
    			this.sheetsView = sheetsView;
    			this.$el.find('.sheet-cf-list').append(sheetsView.render().el);
    		},
    		/**
    		 * 绑定视图
    		 * @method callView
    		 * @param  {视图名称} name 
    		 * @return {function} 回调函数
    		 */
    		callView: function(name) {
    			var object = this;
    			return function(callback) {
    				object[name] = callback;
    			};
    		},
    		outerDraghandle: function(e) {
    			console.log(e);
    		},
    		/**
    		 * 关闭Excel时候，保存用户可视区域
    		 * @method saveUserView
    		 */
    		saveUserView: function() {
    			var data = {
    				excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    				sheetId: $("#sheetId").val(),
    				startX: cache.UserView.rowAlias,
    				startY: cache.UserView.colAlias
    			};
    			send.PackAjax({
    				url: '',
    				data: JSON.stringify(data)
    			});
    		},
    		/**
    		 * 自动适应屏幕的宽高
    		 * @method adaptScreen
    		 */
    		adaptScreen: function() {
    			// var rowsPanelContainer,
    			// 	colsPanelContainer,
    			// 	mainContainer;
    			this.executiveFrozen();
    		},
    		/**
    		 * 清楚冻结规则
    		 * @method clearFrozenRule
    		 */
    		clearFrozenRule: function() {
    			cache.FrozenRules = {
    				main: [],
    				row: [],
    				col: []
    			};
    		},
    		/**
    		 * 进行冻结操作
    		 * @method clearFrozenRule
    		 */
    		executiveFrozen: function() {
    			var customID = '#spreadSheet';
    			var modelRowList = headItemRows,
    				modelColList = headItemCols,
    				i, j, publisherList = {},
    				len,
    				mainContainer;
    
    			this.clearFrozenRule();
    			this.ruleRow();
    			this.ruleCol();
    			this.ruleMain();
    			// destory old view
    			Backbone.trigger('event:colsPanelContainer:destroy');
    			Backbone.trigger('event:rowsPanelContainer:destroy');
    			Backbone.trigger('event:mainContainer:destroy');
    
    			//build new view
    			if (cache.TempProp.colFrozen && !cache.TempProp.rowFrozen) {
    				//main rules
    				len = cache.FrozenRules.main.length;
    				for (i = len - 1; i >= 0; i--) {
    					cache.CurrentRule = cache.FrozenRules.main[i];
    					mainContainer = new MainContainer();
    					$('tr:eq(1) td:eq(' + (i + 1) + ')', customID).prepend(mainContainer.render().el);
    					buildObserverPattern(mainContainer);
    				}
    			} else if (!cache.TempProp.colFrozen && cache.TempProp.rowFrozen) {
    				//main rules
    				len = cache.FrozenRules.main.length;
    				for (i = len - 1; i >= 0; i--) {
    					cache.CurrentRule = cache.FrozenRules.main[i];
    					mainContainer = new MainContainer();
    					$('tr:eq(1) td:eq(2)', customID).prepend(mainContainer.render().el);
    					buildObserverPattern(mainContainer);
    				}
    			} else if (cache.TempProp.colFrozen && cache.TempProp.rowFrozen) {
    				var currentPosi;
    				for (i = 4; i > 0; i--) {
    					currentPosi = i % 2 ? 1 : 2;
    					cache.CurrentRule = cache.FrozenRules.main[i - 1];
    					mainContainer = new MainContainer();
    					$('tr:eq(1) td:eq(' + currentPosi + ')', customID).prepend(mainContainer.render().el);
    					buildObserverPattern(mainContainer);
    				}
    			} else if (!cache.TempProp.colFrozen && !cache.TempProp.rowFrozen) {
    				cache.CurrentRule = cache.FrozenRules.main[0];
    				mainContainer = new MainContainer();
    				$('tr:eq(1) td:eq(2)', customID).append(mainContainer.render().el);
    				buildObserverPattern(mainContainer);
    
    			}
    			//colspanel rules
    			len = cache.FrozenRules.col.length;
    			for (i = 0; i < len; i++) {
    				cache.CurrentRule = cache.FrozenRules.col[i];
    				var colsPanelContainer = new ColsPanelContainer();
    				$('tr:eq(0) td:eq(' + (3 - len + i) + ')', customID).append(colsPanelContainer.render().el);
    				buildObserverPattern(colsPanelContainer);
    			}
    			//rowpanel rules
    			len = cache.FrozenRules.row.length;
    			for (i = len - 1; i >= 0; i--) {
    				cache.CurrentRule = cache.FrozenRules.row[i];
    				var rowsPanelContainer = new RowsPanelContainer();
    				$('tr:eq(1) td:eq(0)', customID).prepend(rowsPanelContainer.render().el);
    				buildObserverPattern(rowsPanelContainer);
    			}
    			/**
    			 * 发布/订阅
    			 * @method buildObserverPattern
    			 * @param  {object} container 发布者
    			 */
    			function buildObserverPattern(container) {
    				var currentRule = cache.CurrentRule,
    					currentSubscribe, i;
    
    				if (currentRule.isPublisher) {
    					observerPattern.buildPublisher(container);
    					publisherList[currentRule.publisherName] = container;
    				}
    				currentSubscribe = currentRule.isSubscribe || false;
    				if (currentSubscribe) {
    					len = currentSubscribe.length;
    					for (i = 0; i < len; i++) {
    						publisherList[currentSubscribe[i].publisherName].subscribe({
    							master: container,
    							behavior: currentSubscribe[i].behavior,
    							args: currentSubscribe[i].args
    						}, currentSubscribe[i].action);
    					}
    
    				}
    
    			}
    			//consider , when time reset scroll to diff position
    			// if (cache.UserView.colAlias !== '1') {
    			this.initMainView();
    			// }
    		},
    		/**
    		 * 生成列冻结操作规则
    		 * @method ruleCol
    		 */
    		ruleCol: function() {
    			var currentIndex,
    				currentModel,
    				currentModelLeft,
    				modelList,
    				tempRule,
    				userViewModel,
    				userViewIndex;
    			modelList = headItemCols;
    
    			currentIndex = modelList.getIndexByAlias(cache.TempProp.colAlias);
    			if (currentIndex === -1) currentIndex = 0;
    			currentModel = modelList.models[currentIndex];
    			currentModelLeft = currentModel.toJSON().left;
    			userViewModel = modelList.getModelByAlias(cache.UserView.colAlias);
    			userViewIndex = modelList.getIndexByAlias(cache.UserView.colAlias);
    
    			if (cache.TempProp.isFrozen && cache.TempProp.colFrozen) {
    				tempRule = {
    					displayPosition: {
    						offsetLeft: 0, // must
    						startIndex: userViewIndex,
    						endIndex: currentIndex
    					},
    					boxAttributes: {
    						width: currentModelLeft - userViewModel.toJSON().left - 1,
    						style: 'frozen-right-border'
    					},
    					autoScroll: false,
    					reduceUserView: true
    				};
    				cache.FrozenRules.col.push(tempRule);
    			}
    			tempRule = {
    				displayPosition: {
    					offsetLeft: currentModelLeft,
    					startIndex: currentIndex
    				},
    				boxAttributes: {
    					width: this.scrollWidth - this.scrollbarWidth - currentModelLeft
    				},
    				autoScroll: true,
    				isSubscribe: [{
    					publisherName: 'mainContainer',
    					behavior: 'scrollToPosition', //it's self behavior
    					action: 'transversePublish' //publisher behavior
    				}]
    			};
    
    			if (cache.TempProp.isFrozen && cache.TempProp.colFrozen) {
    				tempRule.displayPosition.offsetLeft -= userViewModel.get('left');
    				tempRule.boxAttributes.width += userViewModel.toJSON().left;
    				tempRule.reduceUserView = true;
    			}
    			cache.FrozenRules.col.push(tempRule);
    		},
    		/**
    		 * 生成行冻结操作规则
    		 * @method ruleRow
    		 */
    		ruleRow: function() {
    			var modelList, currentIndex, currentModel, tempRule, currentModelTop, userViewModel, userViewIndex;
    			modelList = headItemRows;
    			currentIndex = modelList.getIndexByAlias(cache.TempProp.rowAlias);
    			if (currentIndex === -1) {
    				currentModelTop = 0;
    			} else {
    				currentModel = modelList.models[currentIndex];
    				currentModelTop = currentModel.toJSON().top;
    			}
    
    			userViewModel = modelList.getModelByAlias(cache.UserView.rowAlias);
    			userViewIndex = modelList.getIndexByAlias(cache.UserView.rowAlias);
    			// 如果索引不是0，说明锁定需要分为两块
    			if (cache.TempProp.isFrozen && cache.TempProp.rowFrozen) {
    				tempRule = {
    					displayPosition: {
    						offsetTop: 0, // must
    						startIndex: userViewIndex,
    						endIndex: currentIndex
    					},
    					boxAttributes: {
    						height: currentModelTop - userViewModel.toJSON().top - 1,
    						style: 'frozen-bottom-border'
    					},
    					autoScroll: false,
    					reduceUserView: true
    				};
    				cache.FrozenRules.row.push(tempRule);
    			}
    			tempRule = {
    				displayPosition: {
    					offsetTop: currentModelTop,
    					startIndex: currentIndex
    				},
    				boxAttributes: {
    					height: this.scrollHeight - this.scrollbarWidth - currentModelTop
    				},
    				autoScroll: true,
    				isSubscribe: [{
    					publisherName: 'mainContainer',
    					behavior: 'scrollToPosition', //it's self behavior
    					action: 'verticalPublish' //publisher behavior
    				}, {
    					publisherName: 'mainContainer',
    					behavior: 'addHeadItemView', //it's self behavior
    					action: 'addRowHeadItemViewPublish' //publisher behavior
    				}, {
    					publisherName: 'mainContainer',
    					behavior: 'adjustHeadItemContainer', //it's self behavior
    					action: 'adjustHeadItemContainerPublish' //publisher behavior
    				}]
    			};
    			if (cache.TempProp.isFrozen && cache.TempProp.rowFrozen) {
    				tempRule.displayPosition.offsetTop -= userViewModel.get('top');
    				tempRule.boxAttributes.height += userViewModel.toJSON().top;
    				tempRule.reduceUserView = true;
    			}
    			cache.FrozenRules.row.push(tempRule);
    		},
    		/**
    		 * 生成自定义冻结操作规则
    		 * @method ruleRow
    		 */
    		ruleMain: function() {
    			var tempRule,
    				modelRowList = headItemRows,
    				modelColList = headItemCols,
    				currentRowModel,
    				currentColModel,
    				currentRowIndex,
    				currentColIndex,
    				currentRowModelTop,
    				currentColModelLeft,
    				userViewRowModel,
    				userViewColModel,
    				userViewRowIndex,
    				userViewColIndex;
    
    
    			currentRowIndex = modelRowList.getIndexByAlias(cache.TempProp.rowAlias);
    			currentColIndex = modelColList.getIndexByAlias(cache.TempProp.colAlias);
    
    			if (currentRowIndex === -1) {
    				currentRowModelTop = 0;
    			} else {
    				currentRowModel = modelRowList.models[currentRowIndex];
    				currentRowModelTop = currentRowModel.get('top');
    			}
    
    			if (currentColIndex === -1) {
    				currentColModelLeft = 0;
    			} else {
    				currentColModel = modelColList.models[currentColIndex];
    				currentColModelLeft = currentColModel.get('left');
    			}
    
    			//可视点
    			userViewRowModel = modelRowList.getModelByAlias(cache.UserView.rowAlias);
    			userViewRowIndex = modelRowList.getIndexByAlias(cache.UserView.rowAlias);
    			userViewColModel = modelColList.getModelByAlias(cache.UserView.colAlias);
    			userViewColIndex = modelColList.getIndexByAlias(cache.UserView.colAlias);
    
    
    			if (cache.TempProp.isFrozen) {
    				if (cache.TempProp.rowFrozen && cache.TempProp.colFrozen) {
    					tempRule = {
    						boxAttributes: {
    							height: currentRowModelTop - userViewRowModel.toJSON().top - 1,
    							width: currentColModelLeft - userViewColModel.toJSON().left - 1,
    							style: 'container frozen-right-border frozen-bottom-border'
    						},
    						displayPosition: {
    							startColIndex: userViewColIndex,
    							endColIndex: currentColIndex,
    							startRowIndex: userViewRowIndex,
    							endRowIndex: currentRowIndex,
    							offsetTop: 0,
    							offsetLeft: 0
    						}
    					};
    					cache.FrozenRules.main.push(tempRule);
    				}
    				if (cache.TempProp.rowFrozen) {
    					tempRule = {
    						boxAttributes: {
    							height: currentRowModelTop - userViewRowModel.toJSON().top - 1,
    							width: this.scrollWidth - this.scrollbarWidth - currentColModelLeft,
    							style: 'container frozen-bottom-border'
    						},
    						displayPosition: {
    							startRowIndex: userViewRowIndex,
    							endRowIndex: currentRowIndex,
    							startColIndex: currentColIndex,
    							offsetLeft: currentColModelLeft,
    							offsetTop: 0
    						},
    						autoScroll: true,
    						autoColAlign: true,
    						isSubscribe: [{
    							publisherName: 'mainContainer',
    							behavior: 'subscribeScroll', //it's self behavior
    							action: 'transversePublish', //publisher behavior,
    							args: {
    								'direction': 'TRANSVERSE'
    							}
    						}]
    					};
    					if (cache.TempProp.colFrozen) {
    						tempRule.boxAttributes.width += userViewColModel.toJSON().left;
    						tempRule.displayPosition.offsetLeft -= userViewColModel.get('left');
    					}
    					cache.FrozenRules.main.push(tempRule);
    				}
    				if (cache.TempProp.colFrozen) {
    					tempRule = {
    						boxAttributes: {
    							height: this.scrollHeight - this.scrollbarWidth - currentRowModelTop,
    							width: currentColModelLeft - userViewColModel.toJSON().left - 1,
    							style: 'container frozen-right-border'
    						},
    						displayPosition: {
    							startColIndex: userViewColIndex,
    							endColIndex: currentColIndex,
    							startRowIndex: currentRowIndex,
    							offsetLeft: 0,
    							offsetTop: currentRowModelTop
    						},
    						autoScroll: true,
    						autoRowAlign: true,
    						isSubscribe: [{
    							publisherName: 'mainContainer',
    							behavior: 'subscribeScroll', //it's self behavior
    							action: 'verticalPublish', //publisher behavior,
    							args: {
    								'direction': 'VERTICAL'
    							},
    						}, {
    							publisherName: 'mainContainer',
    							behavior: 'addHeadItemView',
    							action: 'addRowHeadItemViewPublish',
    							args: {}
    						}, {
    							publisherName: 'mainContainer',
    							behavior: 'addCellView',
    							action: 'addCellViewPublish',
    							args: {}
    						}, {
    							publisherName: 'mainContainer',
    							behavior: 'adjustContainerHeight',
    							action: 'adjustContainerHeightPublish',
    							args: {}
    						}]
    					};
    					if (cache.TempProp.rowFrozen) {
    						tempRule.boxAttributes.height += userViewRowModel.toJSON().top;
    						tempRule.displayPosition.offsetTop -= userViewRowModel.get('top');
    					}
    					cache.FrozenRules.main.push(tempRule);
    				}
    			}
    			tempRule = {
    				boxAttributes: {
    					height: this.scrollHeight - currentRowModelTop,
    					width: this.scrollWidth - currentColModelLeft,
    					style: 'scroll-container'
    				},
    				displayPosition: {
    					startColIndex: currentColIndex,
    					startRowIndex: currentRowIndex,
    					offsetLeft: currentColModelLeft,
    					offsetTop: currentRowModelTop,
    				},
    				autoRowAlign: true,
    				autoColAlign: true,
    				autoScroll: true,
    				eventScroll: true,
    				isPublisher: true,
    				publisherName: 'mainContainer'
    			};
    			if (cache.TempProp.rowFrozen) {
    				tempRule.boxAttributes.height += userViewRowModel.toJSON().top;
    				tempRule.displayPosition.offsetTop -= userViewRowModel.get('top');
    			}
    			if (cache.TempProp.colFrozen) {
    				tempRule.boxAttributes.width += userViewColModel.toJSON().left;
    				tempRule.displayPosition.offsetLeft -= userViewColModel.get('left');
    			}
    
    			cache.FrozenRules.main.push(tempRule);
    		},
    		/**
    		 * 页面初始化，mainContainer视图位置跳转
    		 * @method initMainView
    		 */
    		initMainView: function() {
    			var startRowHeadModel,
    				startColHeadModel;
    			if (cache.TempProp.isFrozen === true) {
    				return;
    			}
    			startRowHeadModel = headItemRows.getModelByAlias(cache.UserView.rowAlias);
    			startColHeadModel = headItemCols.getModelByAlias(cache.UserView.colAlias);
    			Backbone.trigger('event:mainContainer:appointPosition', startRowHeadModel.get('top'), 'VERTICAL');
    			Backbone.trigger('event:mainContainer:appointPosition', startColHeadModel.get('left'), 'TRANSVERSE');
    
    		},
    		/**
    		 * 计算页面的宽高页面滚动条宽度
    		 * @method calculation
    		 */
    		calculation: function() {
    
    			/**
    			 * 页面可视宽度
    			 * @property {int} scrollWidth 
    			 */
    			this.scrollWidth = this.el.offsetWidth - config.System.outerLeft;
    			/**
    			 * 页面可视高度
    			 * @property {int} scrollHeight
    			 */
    			this.scrollHeight = this.el.offsetHeight - config.System.outerTop - config.System.outerBottom;
    			/**
    			 * 页面滚动条宽度
    			 * @property {int} scrollbarWidth 
    			 */
    			this.scrollbarWidth = this.getScrollbarWidth();
    		},
    		/**
    		 * 对外开放本对象
    		 * @method callBodyContainer
    		 * @param  {function} receiveFunc 传入接受对象的方法
    		 */
    		callBodyContainer: function(receiveFunc) {
    			receiveFunc(this);
    		},
    		/**
    		 * 寻址
    		 * @method addressing
    		 * @param  {[HTMLElement]}   currrentEl 当前element对象
    		 * @param  {[object]}   target     当前对象
    		 * @return {boolean} 确定是否已经找到对象
    		 */
    		addressing: function(currrentEl, target) {
    			if (currrentEl.length && currrentEl === target) {
    				return true;
    			}
    			if (currrentEl.parents(target).length && currrentEl.parents(target) === target) {
    				return true;
    			}
    			return false;
    		},
    		/**
    		 * 获取鼠标信息
    		 * @method mouseInfo
    		 * @param  {object}  e body页面移动的event
    		 */
    		mouseInfo: function(e) {
    			this.mousePageX = e.pageX - this.$el.left;
    			this.mousePageY = e.pageY - this.$el.top;
    		},
    		/**
    		 * 获取页面的滚动条
    		 * @method getScrollbarWidth
    		 * @return {int} 滚动条的宽度
    		 */
    		getScrollbarWidth: function() {
    			var virtualEl,
    				scrollNone,
    				scrollExist;
    			virtualEl = $('<div/>').css({
    				'width': 50,
    				'height': 50,
    				'overflow': 'hidden',
    				'position': 'absolute',
    				'top': -200,
    				'left': -200
    			}).html('<div style="height:1000px;">');
    			this.$el.append(virtualEl);
    			scrollNone = getWidth();
    			virtualEl.css('overflow-y', 'auto');
    			scrollExist = getWidth();
    			$(virtualEl).remove();
    
    			function getWidth() {
    				return parseInt($('div', virtualEl).innerWidth(), 0);
    			}
    			return (scrollNone - scrollExist);
    		},
    		destroy: function() {
    			Backbone.off('call:bodyContainer');
    			Backbone.off('event:bodyContainer:executiveFrozen');
    			Backbone.trigger('event:colsPanelContainer:destroy');
    			Backbone.trigger('event:rowsPanelContainer:destroy');
    			Backbone.trigger('event:mainContainer:destroy');
    			this.sheetsView.destroy();
    			this.remove();
    		}
    	});
    	return BodyContainer;
    });
    define('entrance/tool/clipselectoperate',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		Cell = require('models/cell'),
    		headItemCols = require('collections/headItemCol'),
    		headItemRows = require('collections/headItemRow'),
    		selectRegions = require('collections/selectRegion'),
    		cells = require('collections/cells'),
    		cache = require('basic/tools/cache'),
    		send = require('basic/tools/send');
    
    	function clipSelectOperate(type, e) {
    		var tempCellModel,
    			selectRegion,
    			startColIndex,
    			startRowIndex,
    			endColIndex,
    			endRowIndex,
    			selectModel,
    			clipModel,
    			colAlias,
    			rowAlias,
    			text = "",
    			i,
    			j;
    
    		clipModel = selectRegions.getModelByType('clip')[0];
    		if (clipModel !== undefined) {
    			clipModel.destroy();
    		}
    		selectRegion = selectRegions.getModelByType("operation")[0];
    		clipModel = selectRegion.clone();
    		clipModel.set("selectType", "clip");
    		selectRegions.add(clipModel);
    
    		Backbone.trigger('event:cellsContainer:addClipRegionView');
    
    		if (type === "copy") {
    			cache.clipState = "copy";
    		} else if (type === "cut") {
    			cache.clipState = "cut";
    		}
    		selectRegion = selectRegions.getModelByType("operation")[0];
    
    		startColIndex = selectRegion.get("wholePosi").startX;
    		startRowIndex = selectRegion.get("wholePosi").startY;
    		endColIndex = selectRegion.get("wholePosi").endX;
    		endRowIndex = selectRegion.get("wholePosi").endY;
    
    		for (i = startRowIndex; i < endRowIndex + 1; i++) {
    			for (j = startColIndex; j < endColIndex + 1; j++) {
    				colAlias = headItemCols.models[j].get('alias');
    				rowAlias = headItemRows.models[i].get('alias');
    				tempCellModel = cells.getCellByAlias(colAlias, rowAlias);
    				if (tempCellModel !== null) {
    					text += cellToText(tempCellModel);
    				}
    				if (j !== endColIndex) {
    					text += "\t";
    				} else {
    					text += "\r\n";
    				}
    			}
    		}
    		if (e !== undefined) {
    			e.preventDefault();
    			if (window.clipboardData) {
    				window.clipboardData.setData("Text", text);
    			} else {
    				e.originalEvent.clipboardData.setData("Text", text);
    			}
    		}
    
    		function cellToText(cell) {
    			var text,
    				head = '',
    				tail = '';
    			text = cell.get("content").texts;
    
    			if (text.indexOf('\n') === -1) {
    				return text;
    			}
    			while (true) {
    				if (text.indexOf('"') === 0) {
    					text = text.substring(1);
    					head += '""';
    				} else {
    					break;
    				}
    			}
    			while (true) {
    				if (text.lastIndexOf('"') === text.length - 1 && text.length > 1) {
    					text = text.substring(0, text.length - 1);
    					tail += '""';
    				} else {
    					break;
    				}
    			}
    			text = head + text + tail;
    			return text;
    		}
    	}
    	return clipSelectOperate;
    });
    define('entrance/tool/clippasteoperate',function() {
    	
    	var Backbone = require('lib/backbone'),
    		cache = require('basic/tools/cache'),
    		cells = require('collections/cells'),
    		Cell = require('models/cell'),
    		send = require('basic/tools/send'),
    		headItemCols = require('collections/headItemCol'),
    		headItemRows = require('collections/headItemRow'),
    		selectRegions = require('collections/selectRegion');
    
    	function clipPasteOperate(pasteText) {
    		if (cache.clipState === "copy") {
    			excelDataPaste("copy");
    		} else if (cache.clipState === "cut") {
    			excelDataPaste("cut");
    		} else {
    			clipBoardDataPaste(pasteText);
    		}
    	}
    
    	function excelDataPaste(type) {
    		var clipRegion,
    			selectRegion,
    			startColIndex,
    			startRowIndex,
    			endColIndex,
    			endRowIndex,
    			clipColAlias,
    			clipRowAlias,
    			selectColAlias,
    			selectRowAlias,
    			relativeColIndex,
    			relativeRowIndex,
    			tempCopyCellModel,
    			tempCellModel,
    			CellModel,
    			sendData = [],
    			text = "",
    			i,
    			j;
    
    		clipRegion = selectRegions.getModelByType("clip")[0];
    		selectRegion = selectRegions.getModelByType("operation")[0];
    
    		startColIndex = clipRegion.get("wholePosi").startX;
    		startRowIndex = clipRegion.get("wholePosi").startY;
    		endColIndex = clipRegion.get("wholePosi").endX;
    		endRowIndex = clipRegion.get("wholePosi").endY;
    
    		relativeColIndex = startColIndex - selectRegion.get("wholePosi").startX;
    		relativeRowIndex = startRowIndex - selectRegion.get("wholePosi").startY;
    
    		if (isAblePaste(endRowIndex - startRowIndex + 1, endColIndex - startColIndex + 1) === false) return;
    		//超出已加载区域处理
    		for (i = startRowIndex; i < endRowIndex + 1; i++) {
    			for (j = startColIndex; j < endColIndex + 1; j++) {
    				clipColAlias = headItemCols.models[j].get('alias');
    				clipRowAlias = headItemRows.models[i].get('alias');
    				selectColAlias = headItemCols.models[j - relativeColIndex].get('alias');
    				selectRowAlias = headItemRows.models[i - relativeRowIndex].get('alias');
    
    				tempCellModel = cells.getCellByAlias(selectColAlias, selectRowAlias);
    
    				CellModel = cells.getCellByAlias(clipColAlias, clipRowAlias);
    
    				deletePosi(selectColAlias, selectRowAlias);
    				if (type === "cut") deletePosi(clipColAlias, clipRowAlias);
    				if (CellModel !== null && CellModel.get('occupy').x[0] === clipColAlias && CellModel.get('occupy').y[0] === clipRowAlias) {
    					if (tempCellModel !== null) {
    						tempCellModel.set('isDestroy', true);
    					}
    					tempCopyCellModel = CellModel.clone();
    					if (type === "cut") {
    						CellModel.set('isDestroy', true);
    					}
    					adaptCell(tempCopyCellModel, relativeColIndex, relativeRowIndex);
    					cacheCellPosition(tempCopyCellModel);
    					cells.add(tempCopyCellModel);
    				}
    			}
    		}
    		cache.clipState = "null";
    		Backbone.trigger('event:cellsContainer:adjustSelectRegion', {
    			startColIndex: startColIndex - relativeColIndex,
    			startRowIndex: startRowIndex - relativeRowIndex,
    			endColIndex: endColIndex - relativeColIndex,
    			endRowIndex: endRowIndex - relativeRowIndex
    		});
    		clipRegion.destroy();
    		send.PackAjax({
    			url: 'plate.htm?m=' + type,
    			data: JSON.stringify({
    				excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    				sheetId: '1',
    				orignal: {
    					startColAlias: headItemCols.models[clipRegion.get("wholePosi").startX].get('alias'),
    					endColAlias: headItemCols.models[clipRegion.get("wholePosi").endX].get('alias'),
    					startRowAlias: headItemRows.models[clipRegion.get("wholePosi").startY].get('alias'),
    					endRowAlias: headItemRows.models[clipRegion.get("wholePosi").endY].get('alias')
    				},
    				target: {
    					colAlias: headItemCols.models[selectRegion.get("wholePosi").startX].get('alias'),
    					rowAlias: headItemRows.models[selectRegion.get("wholePosi").startY].get('alias'),
    				}
    			})
    		});
    	}
    
    	function cacheCellPosition(cell) {
    		var occupyCols = cell.get('occupy').x,
    			occupyRows = cell.get('occupy').y,
    			aliasCol,
    			aliasRow,
    			rowLen,
    			colLen,
    			i = 0,
    			j;
    		rowLen = occupyRows.length;
    		colLen = occupyCols.length;
    		for (; i < rowLen; i++) {
    			for (j = 0; j < colLen; j++) {
    				cache.cachePosition(occupyRows[i], occupyCols[j], cells.length);
    			}
    		}
    
    	}
    
    	function adaptCell(cell, relativeColIndex, relativeRowIndex) {
    		var arrayOriginalColAlias,
    			arrayOriginalRowAlias,
    			arrayColAlias = [],
    			arrayRowAlias = [],
    			colIndex,
    			rowIndex,
    			left, top,
    			width = 0,
    			height = 0,
    			rowLen, colLen, i;
    
    		arrayOriginalColAlias = cell.get("occupy").x;
    		arrayOriginalRowAlias = cell.get("occupy").y;
    		rowLen = arrayOriginalRowAlias.length;
    		colLen = arrayOriginalColAlias.length;
    		//增加超过加载区域处理
    		for (i = 0; i < rowLen; i++) {
    			rowIndex = headItemRows.getIndexByAlias(arrayOriginalRowAlias[i]) - relativeRowIndex;
    			arrayRowAlias.push(headItemRows.models[rowIndex].get("alias"));
    			height += headItemRows.models[rowIndex].get("height") + 1;
    			if (i === 0) top = headItemRows.models[rowIndex].get("top");
    		}
    		for (i = 0; i < colLen; i++) {
    			colIndex = headItemCols.getIndexByAlias(arrayOriginalColAlias[i]) - relativeColIndex;
    			arrayColAlias.push(headItemCols.models[colIndex].get("alias"));
    			width += headItemCols.models[colIndex].get("width") + 1;
    			if (i === 0) left = headItemCols.models[colIndex].get("left");
    		}
    
    		cell.set("occupy", {
    			x: arrayColAlias,
    			y: arrayRowAlias
    		});
    		cell.set("physicsBox", {
    			top: top,
    			left: left,
    			width: width - 1,
    			height: height - 1
    		});
    	}
    
    	function isAblePaste(rowlen, collen) {
    		var rowStartIndex,
    			colStartIndex,
    			rowEndIndex,
    			colEndIndex,
    			cellModelArray,
    			i = 0;
    
    		colStartIndex = selectRegions.models[0].get('wholePosi').startX;
    		rowStartIndex = selectRegions.models[0].get('wholePosi').startY;
    		rowEndIndex = rowStartIndex + rowlen - 1;
    		colEndIndex = colStartIndex + collen - 1;
    		cellModelArray = cells.getRegionCells(colStartIndex, rowStartIndex, colEndIndex, rowEndIndex);
    		for (; i < cellModelArray.length; i++) {
    			if (cellModelArray[i] === null) continue;
    			if (cellModelArray[i].get('occupy').x.length > 1 || cellModelArray[i].get('occupy').y.length > 1) {
    				return false;
    			}
    		}
    		return true;
    	}
    
    	function deletePosi(aliasCol, aliasRow) {
    		var currentCellPosition = cache.CellsPosition,
    			currentStrandX = currentCellPosition.strandX,
    			currentStrandY = currentCellPosition.strandY;
    		if (currentStrandX[aliasCol] !== undefined && currentStrandX[aliasCol][aliasRow] !== undefined) {
    			delete currentStrandX[aliasCol][aliasRow];
    			if (!Object.getOwnPropertyNames(currentStrandX[aliasCol]).length) {
    				delete currentStrandX[aliasCol];
    			}
    		}
    		if (currentStrandY[aliasRow] !== undefined && currentStrandY[aliasRow][aliasCol] !== undefined) {
    			delete currentStrandY[aliasRow][aliasCol];
    			if (!Object.getOwnPropertyNames(currentStrandY[aliasRow]).length) {
    				delete currentStrandY[aliasRow];
    			}
    		}
    	}
    	/**
    	 * 剪切板数据源数据解析
    	 * @method shearPlateDataPaste
    	 * @param  {String} pasteText 复制数据内容
    	 */
    	function clipBoardDataPaste(pasteText) {
    		var encodeText,
    			rowData = [],
    			tempCellData = [],
    			decodeText,
    			sendData = [],
    			clipRegion;
    
    		encodeText = encodeURI(pasteText);
    		rowData = encodeText.split('%0D%0A');
    		if (isAblePaste(rowData.length - 1, rowData[0].split('%09').length) === false) return;
    
    		for (var i = 0; i < rowData.length; i++) {
    			tempCellData = rowData[i].split('%09');
    			for (var j = 0; j < tempCellData.length; j++) {
    				if (tempCellData[j] !== '') {
    					sendData.push(textToCell(i, j, decodeURI(analysisText(tempCellData[j]))));
    				}
    			}
    		}
    
    		clipRegion = selectRegions.getModelByType("clip")[0];
    		if (clipRegion !== null && clipRegion !== undefined) {
    			clipRegion.destroy();
    		}
    		cache.clipState = "null";
    		send.PackAjax({
    			url: 'plate.htm?m=paste',
    			data: JSON.stringify({
    				excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    				sheetId: '1',
    				pasteData: sendData
    			})
    		});
    
    		function analysisText(text) {
    			var head = '',
    				tail = '';
    			if (text.indexOf("%0A") === -1) {
    				return text;
    			}
    			text = text.substring(3, text.length - 3);
    			while (true) {
    				if (text.indexOf("%22%22") === 0) {
    					text = text.substring(6);
    					head += "%22";
    				} else {
    					break;
    				}
    			}
    			while (true) {
    				if (text.lastIndexOf("%22%22") === text.length - 6 && text.length > 6) {
    					text = text.substring(0, text.length - 6);
    					tail += "%22";
    				} else {
    					break;
    				}
    			}
    			text = head + text + tail;
    			return text;
    		}
    	}
    
    	function textToCell(relativeRowIndex, relativeColIndex, text) {
    		var cacheCell,
    			tempCell,
    			indexCol,
    			indexRow,
    			aliasCol,
    			aliasRow,
    			gridLineColList,
    			gridLineRowList,
    			result;
    
    		if (text === '') return;
    		gridLineColList = headItemCols.models;
    		gridLineRowList = headItemRows.models;
    		indexCol = selectRegions.models[0].get('wholePosi').startX + relativeColIndex;
    		indexRow = selectRegions.models[0].get('wholePosi').startY + relativeRowIndex;
    
    		tempCell = cells.getCellByX(indexCol, indexRow)[0];
    
    		if (tempCell !== undefined && tempCell.get("isDestroy") === false) {
    			tempCell.set("isDestroy", true);
    		}
    
    		var top, left, width, height;
    		top = gridLineRowList[indexRow].get('top');
    		left = gridLineColList[indexCol].get('left');
    		width = gridLineColList[indexCol].get('width');
    		height = gridLineRowList[indexRow].get('height');
    		cacheCell = new Cell();
    		//判断是否已经存在单元格
    		aliasCol = gridLineColList[indexCol].get('alias');
    		aliasRow = gridLineRowList[indexRow].get('alias');
    		cacheCell.set('occupy', {
    			x: [aliasCol],
    			y: [aliasRow]
    		});
    		cacheCell.set('physicsBox', {
    			top: top,
    			left: left,
    			width: width,
    			height: height
    		});
    		cacheCell.set("content.texts", text);
    		cache.cachePosition(aliasRow, aliasCol, cells.length);
    		cells.add(cacheCell);
    		result = {
    			aliasCol: aliasCol,
    			aliasRow: aliasRow,
    			text: text
    		};
    		return result;
    	}
    
    	return clipPasteOperate;
    });
    define('views/screen',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		BodyContainer = require('views/bodyContainer'),
    		send = require('basic/tools/send'),
    		cache = require('basic/tools/cache'),
    		listener = require('basic/util/listener'),
    		clipSelectOperate = require('entrance/tool/clipselectoperate'),
    		clipPasteOperate = require('entrance/tool/clippasteoperate'),
    		Screen;
    
    
    	/**
    	 * 屏幕视图类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class screen  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	Screen = Backbone.View.extend({
    		/**
    		 * 绑定视图
    		 * @property {String} el
    		 */
    		el: window,
    		/**
    		 * 鼠标事件
    		 * @property {Object} events
    		 */
    		events: {
    			'resize': 'attributesRender',
    			'mouseup': 'realseDrag',
    			'beforeunload': 'closeWindow',
    			'paste': 'pasteData',
    			'copy': 'copyData',
    			'cut': 'cutData',
    			'mousedown': 'transAction',
    			'keydown': 'onKeyDown'
    		},
    
    		/**
    		 * 类初始化方法，绑定关联视图对象
    		 * @method initialize
    		 * @return {[type]} [description]
    		 */
    		initialize: function(id) {
    			Backbone.on('call:screenContainer', this.screenContainer, this);
    			Backbone.on('event:screenContainer:destroy', this.destroy, this);
    			Backbone.on('call:screenContainer:adaptScreen', this.attributesRender, this);
    			_.bindAll(this, 'callView');
    			this.render();
    		},
    		onKeyDown: function(e) {
    			var flag = false;
    			if ($(':focus').length > 0) return;
    			if (e.ctrlKey === true || e.altKey === true) return;
    
    			switch (true) {
    				//判断回车按钮
    				case (e.keyCode === 32):
    					flag = true;
    					break;
    				case (36 <= e.keyCode && e.keyCode <= 46):
    					flag = true;
    					break;
    				case (48 <= e.keyCode && e.keyCode <= 57):
    					flag = true;
    					break;
    				case (65 <= e.keyCode && e.keyCode <= 90):
    					flag = true;
    					break;
    				case (96 <= e.keyCode && e.keyCode <= 107):
    					flag = true;
    					break;
    				case (109 <= e.keyCode && e.keyCode <= 111):
    					flag = true;
    					break;
    				case (186 <= e.keyCode && e.keyCode <= 192):
    					flag = true;
    					break;
    				case (219 <= e.keyCode && e.keyCode <= 222):
    					flag = true;
    					break;
    				default:
    					break;
    			}
    			if (flag) {
    				Backbone.trigger('event:selectRegion:createInputContainer');
    			}
    			// if (e.keyCode === 32 || (36 < e.keyCode && e.keyCode < 46) ||
    			// 	(48 < e.keyCode && e.keyCode < 57) || (65 < e.keyCode && e.keyCode < 90) ||
    			// 	 (96 < e.keyCode && e.keyCode < 107) || (109 < e.keyCode && e.keyCode < 111) || e.keyCode === 144 || 
    			// 	 (186 < e.keyCode && e.keyCode < 192) || (219 < e.keyCode && e.keyCode < 222)) {
    			// 	Backbone.trigger('event:selectRegion:createInputContainer');
    			// }
    		},
    		//触发回车事件
    		/**
    		 * 视图渲染方法
    		 * @method render
    		 */
    		render: function() {
    			this.bodyContainer = new BodyContainer();
    			this.bodyContainer.render();
    			this.triggerCallback();
    		},
    		transAction: function(e) {
    			// this.toolbar(e);
    		},
    		/**
    		 * 绑定视图
    		 * @method triggerCallback
    		 */
    		triggerCallback: function() {
    			Backbone.trigger('call:rowsPanelContainer', this.callView('viewRowsPanelContainer'));
    			Backbone.trigger('call:colsPanelContainer', this.callView('viewColsPanelContainer'));
    			Backbone.trigger('call:mainContainer', this.callView('viewMainContainer'));
    
    			Backbone.trigger('call:cellsContainer', this.callView('viewCellsContainer'));
    			Backbone.trigger('call:colsHeadContainer', this.callView('viewColsHeadContainer'));
    			Backbone.trigger('call:rowsHeadContainer', this.callView('viewRowsHeadContainer'));
    		},
    		/**
    		 * 关闭浏览器监听事件
    		 * @method closeWindow
    		 */
    		closeWindow: function() {
    			var url = 'excel.htm?m=close&excelId=' + window.SPREADSHEET_AUTHENTIC_KEY;
    			if (cache.TempProp.isFrozen === true) {
    				url += '&startX=' + cache.UserView.colAlias + '&startY=' + cache.UserView.colAlias;
    			} else {
    				url += '&startX=1&startY=1';
    			}
    			send.PackAjax({
    				url: url
    			});
    		},
    		/**
    		 * 粘贴监听事件
    		 * @method pasteData
    		 */
    		pasteData: function(event) {
    			event.preventDefault();
    			var pasteText;
    			if (window.clipboardData && window.clipboardData.getData) { // IE
    				pasteText = window.clipboardData.getData('Text');
    			} else {
    				pasteText = event.originalEvent.clipboardData.getData('Text'); //e.clipboardData.getData('text/plain');
    			}
    			clipPasteOperate(pasteText);
    		},
    		copyData: function(event) {
    			if ($(':focus').length > 0) return;
    			clipSelectOperate("copy", event);
    		},
    		cutData: function(event) {
    			if ($(':focus').length > 0) return;
    			clipSelectOperate("cut", event);
    		},
    		/**
    		 * 用于其他视图，绑定该视图
    		 * @method screenContainer
    		 * @param  {Function} receiveFunc 回调函数
    		 */
    		screenContainer: function(receiveFunc) {
    			receiveFunc(this);
    		},
    		/**
    		 * 盒子模型属性渲染
    		 * @method attributesRender
    		 */
    		attributesRender: function() {
    			this.bodyContainer.calculation();
    			Backbone.trigger('event:bodyContainer:executiveFrozen');
    		},
    		/**
    		 * 绑定其它视图
    		 * @method callView
    		 */
    		callView: function(name) {
    			var object = this;
    			return function(callBack) {
    				object[name] = callBack;
    			};
    		},
    		/**
    		 * 释放所有windows的事件
    		 * @method realseDrag
    		 * @param  {EventFacade} e [windows的事件]
    		 */
    		realseDrag: function(e) {
    
    			this.triggerCallback();
    			Backbone.trigger('event:cellsContainer:unBindDrag');
    			//release events of cols
    			Backbone.trigger('event:colsHeadContainer:relaseSpaceEffect');
    			//release events of rows
    			Backbone.trigger('event:rowsHeadContainer:relaseSpaceEffect');
    			this.$el.off('mousemove', this.viewColsHeadContainer.moveEvent);
    			Backbone.trigger('event:colsSpaceLineContainer:destroy');
    			this.$el.off('mousemove', this.viewRowsHeadContainer.moveEvent);
    			Backbone.trigger('event:rowsSpaceLineContainer:destroy');
    			listener.excute('mouseup', e);
    		},
    		/**
    		 * 行列标题区域，鼠标移动事件绑定
    		 * @method mouseMoveHeadContainer
    		 * @param  {event} e        鼠标事件
    		 * @param  {Array} args     参数列表
    		 * @param  {[type]} moveEvent 移动事件
    		 */
    		mouseMoveHeadContainer: function(e, args, moveEvent) {
    			this.$el.on('mousemove', args, moveEvent);
    		},
    		destroy: function(){
    			Backbone.off('call:screenContainer');
    			Backbone.off('call:screenContainer:adaptScreen');
    			this.bodyContainer.destroy();
    			this.remove();
    		}
    
    	});
    	return Screen;
    });
    	define('widgets/clipboard/shearPlateContainer',function() {
    		
    		var $ = require('lib/jquery'),
    			_ = require('lib/underscore'),
    			cache = require('basic/tools/cache'),
    			Backbone = require('lib/backbone'),
    			clipSelectOperate = require('entrance/tool/clipselectoperate'),
    			clipPasteOperate=require('entrance/tool/clippasteoperate'),
    			ShearPlateContainer;
    
    		/**
    		 * 剪切板视图类
    		 * @author ray wu
    		 * @since 0.1.0
    		 * @class ShearPlateContainer  
    		 * @module views
    		 * @extends Backbone.View
    		 * @constructor
    		 */
    		ShearPlateContainer = Backbone.View.extend({
    			/**
    			 * 绑定视图
    			 * @property el
    			 * @type {String}
    			 */
    			el: "#shearPlateContainer",
    			/**
    			 * 类初始化方法
    			 * @method initialize
    			 */
    			initialize: function() {
    				_.bindAll(this, 'pasteData');
    				Backbone.on('event:pasteData', this.pasteData);
    			},
    			events: {
    				'mousedown div': 'pasteAction'
    			},
    			pasteAction: function(e) {
    				var action;
    				action = $(e.currentTarget).data('toolbar');
    				switch (action) {
    					case 'paste':
    						this.pasteData();
    						break;
    					case 'copy':
    						this.copyData();
    						break;
    					case 'cut':
    						this.cutData();
    						break;
    					default:
    						break;
    				}
    			},
    			copyData: function() {
    				clipSelectOperate("copy");
    			},
    			cutData: function() {
    				clipSelectOperate("cut");
    			},
    			/**
    			 * 复制数据
    			 * @method pasteData
    			 * @param  {string} pasteText 数据 
    			 */
    			pasteData: function(pasteText) {
    				if (cache.clipState === "null") return;
    				clipPasteOperate(pasteText);
    			},
    		});
    		return ShearPlateContainer;
    	});
    define('widgets/font/fontFamilyContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		cells = require('collections/cells'),
    		selectRegions = require('collections/selectRegion'),
    		setFontFamily = require('entrance/tool/setFontFamily');
    
    	/**
    	 * 设置字体功能监听类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class FontFamilyContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var FontFamilyContainer = Backbone.View.extend({
    		/**
    		 * @property {element} el
    		 */
    		el: "#font",
    		/**
    		 * @property {object} events
    		 */
    		events: {
    			/**
    			 * 选择下拉菜单时修改字体字号
    			 * @event mousedown
    			 */
    			'mousedown li': 'setFontFamily'
    		},
    		/**
    		 * 设置字体风格
    		 * @method setFontFamily
    		 * @param  {event}    e 每个`li`的事件对象
    		 */
    		setFontFamily: function(e) {
    			var displayText,
    				fontFamily,
    				$currentTarget;
    			this.$el.removeClass('active');
    			$currentTarget = $(e.currentTarget);
    			fontFamily = $currentTarget.data('family');
    			displayText = $currentTarget.text();
    			$("#fontShow").text(displayText);
    			setFontFamily('1', fontFamily);
    		}
    	});
    	return FontFamilyContainer;
    });
    define('widgets/font/fontSizeContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		selectRegions = require('collections/selectRegion'),
    		setFontFamilySize = require('entrance/tool/setFontFamilySize'),
    		setCellHeight = require('entrance/cell/setCellHeight');
    
    
    	/**
    	 * 设置字体大小
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class FontSizeContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var FontSizeContainer = Backbone.View.extend({
    		/**
    		 * @property {element} el
    		 */
    		el: "#fontSize",
    		/**
    		 * @property {object} events
    		 */
    		events: {
    			/**
    			 * 选择下拉菜单时修改字体字号
    			 * @event mousedown
    			 */
    			'mousedown li': 'setFontSize'
    		},
    		/**
    		 * 设置字体字号
    		 * @method setFontSize
    		 * @param  {event}    e 每个`li`的事件对象
    		 */
    		setFontSize: function(e) {
    			var fontSize,
    				text,
    				$currentTarget;
    			$currentTarget = $(e.currentTarget);
    			this.$el.removeClass('active');
    			fontSize = $currentTarget.data('size');
    			text = $currentTarget.text();
    			$("#fontSizeShow").text(text);
    			setFontFamilySize('1', fontSize);
    		}
    	});
    	return FontSizeContainer;
    
    });
    define('widgets/celloperation/borderContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		cells = require('collections/cells'),
    		selectRegions = require('collections/selectRegion'),
    		setCellBorder=require('entrance/tool/setCellBorder');
    
    	/**
    	 * 边框功能视图
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class BorderContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var BorderContainer = Backbone.View.extend({
    		/**
    		 * 页面的toolbar里的id
    		 * @property {object} el
    		 */
    		el: '#funcBorder',
    		/**
    		 * 事件绑定
    		 * @property {obejct} events
    		 */
    		events: {
    			/**
    			 * 当边框下`li`触发`mousedown`时，进行判断需要触发哪个位置边框
    			 * @event mousedown
    			 */
    			'mousedown li': 'transAction'
    		},
    		initialize: function() {
    		},
    		render: function() {},
    		/**
    		 * 传递动作
    		 * @method transAction
    		 *
    		 * @param  {event}    e
    		 *
    		 * @return {[type]}
    		 */
    		transAction: function(e) {
    			var borderPositon = $(e.currentTarget).data('border');
    			setCellBorder('1',borderPositon);
    		}
    	});
    	return BorderContainer;
    });
    define('widgets/celloperation/fillColorContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		setFillColor = require('entrance/tool/setFillColor'),
    		FillColorContainer;
    
    	/**
    	 * 设置填充颜色功能监听类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class FillColorContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	FillColorContainer = Backbone.View.extend({
    		/**
    		 * 绑定视图
    		 * @property {string} el 
    		 */
    		el: "#fillColor",
    		/**
    		 * 监听事件
    		 * @property {object} events
    		 */
    		events: {
    			'mousedown .color-body': 'setFillColor'
    		},
    		/**
    		 * 设置填充颜色
    		 * @method setFillColor
    		 */
    		setFillColor: function(e) {
    			this.$el.removeClass('active');
    			var color = $(e.currentTarget).css('background-color');
    			setFillColor('1', color);
    		}
    
    	});
    	return FillColorContainer;
    
    });
    define('widgets/font/fontColorContainer',function() {
    	
    	var $=require('lib/jquery'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		selectRegions = require('collections/selectRegion'),
    		setFontColor=require('entrance/tool/setFontColor');
    
    	/**
    	 * 设置字体颜色功能监听类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class FontColorContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var FontColorContainer = Backbone.View.extend({
    		/**
    		 * @property {element} el
    		 */
    		el: "#fontColor",
    		/**
    		 * @property {object} events
    		 */
    		events: {
    			/**
    			 * 选择下拉菜单时修改单元格背景颜色
    			 * @event mousedown
    			 */
    			'mousedown .color-body': 'setFontColor'
    		},
    		/**
    		 * 设置单元格背景颜色
    		 * @method setFillColor
    		 * @param  {event}     e 每个`.color-body`的事件对象
    		 */
    		setFontColor: function(e) {
    			this.$el.removeClass('active');
    			var color = $(e.currentTarget).css('background-color');
    			setFontColor('1',color);
    		}
    
    	});
    	return FontColorContainer;
    });
    //attention bug, new model has large question
    
    define('widgets/align/contentAlignContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		selectRegions = require('collections/selectRegion'),
    		setAlign = require('entrance/tool/setAlign'),
    		setWordWrap = require('entrance/tool/setWordWrap');
    
    	/**
    	 * ContentAlignContainer
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class ContentAlignContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var ContentAlignContainer = Backbone.View.extend({
    		/**
    		 * @property {element} el
    		 */
    		el: "#contentAlignContainer",
    		/**
    		 * @property {object} events
    		 */
    		events: {
    			/**
    			 * 设置对象方式
    			 * @event click
    			 */
    			'click span[data-align]': 'setAlignAction'
    		},
    		/**
    		 * [setAlignAction description]
    		 * @method setAlignAction
    		 * @param  {event} e 鼠标点击事件
    		 */
    		setAlignAction: function(e) {
    			var alignType,
    				transverse,
    				data,
    				url,
    				vertical;
    			alignType = $(e.currentTarget).data('align');
    			if(alignType==='wordWrap'){
    				setWordWrap();
    			}else{
    				setAlign('1', alignType);
    			}
    			
    		}
    	});
    	return ContentAlignContainer;
    });
    define('widgets/cellformat/textFormatContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		selectRegions = require('collections/selectRegion'),
    		setTextType=require('entrance/tool/setTextType');
    	/**
    	 * 文本类型视图类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class TextFormatContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var TextFormatContainer = Backbone.View.extend({
    		/**
    		 * 绑定视图
    		 * @property {string} el
    		 */
    		el: "#contentFormat",
    		/**
    		 * 绑定鼠标事件
    		 * @method events
    		 */
    		events: {
    			'mousedown li': 'setContentFormat'
    		},
    		/**
    		 * 设置选中区域文本格式
    		 * @method setContentFormat
    		 * @param e {event}  鼠标点击事件
    		 */
    		setContentFormat: function(e) {
    			this.$el.removeClass('active');
    			var formatPosition = $(e.currentTarget).data('format');
    			setTextType('1',formatPosition);
    		}
    	});
    	return TextFormatContainer;
    });
    define('widgets/celloperation/mergeCellContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		cache = require('basic/tools/cache'),
    		binary = require('basic/util/binary'),
    		selectRegions = require('collections/selectRegion'),
    		headItemCols = require('collections/headItemCol'),
    		headItemRows = require('collections/headItemRow'),
    		cells = require('collections/cells'),
    		mergeCell = require('entrance/tool/mergeCell'),
    		splitCell = require('entrance/tool/splitCell');
    
    	/**
    	 * 合并，拆分单元格视图类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class MergeCellContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var MergeCellContainer = Backbone.View.extend({
    		/**
    		 * 绑定视图
    		 * @property el
    		 * @type {String}
    		 */
    		el: '#mergeCellContainer',
    		/**
    		 * 绑定鼠标事件
    		 * @property events
    		 * @type {Object}
    		 */
    		events: {
    			'click div[data-toolbar]': 'transAction'
    				// 'click #merge': 'mergeCell',
    				// 'click #split': 'splitCell'
    		},
    		/**
    		 * 初始化函数
    		 * @method initialize
    		 */
    		initialize: function() {
    			_.bindAll(this, 'splitCell');
    		},
    		/**
    		 * 监听合并操作
    		 * @method transAction
    		 */
    		transAction: function(e) {
    			var borderPositon = $(e.currentTarget).data('toolbar');
    			switch (borderPositon) {
    				case 'merge':
    					this.mergeCell(e);
    					break;
    				case 'split':
    					this.splitCell(e);
    					break;
    			}
    		},
    		/**
    		 * 合并单元格
    		 * @method mergeCell
    		 */
    		mergeCell: function() {
    			mergeCell('1');
    		},
    		/**
    		 * 拆分单元格
    		 * @method splitCell
    		 */
    		splitCell: function() {
    			splitCell('1');
    			// 	//选中区域内开始坐标，结束坐标
    			// 	var startIndexCol,
    			// 		startIndexRow,
    			// 		endIndexCol,
    			// 		endIndexRow,
    			// 		selectRegionCells,
    			// 		cacheCell,
    			// 		headLineColList,
    			// 		headLineRowList,
    			// 		i, j, len,
    			// 		aliasCol, aliasRow;
    
    			// 	startIndexCol = selectRegions.models[0].get('wholePosi').startX;
    			// 	startIndexRow = selectRegions.models[0].get('wholePosi').startY;
    			// 	endIndexCol = selectRegions.models[0].get('wholePosi').endX;
    			// 	endIndexRow = selectRegions.models[0].get('wholePosi').endY;
    
    
    			// 	this.sendData({
    			// 		startIndexCol: startIndexCol,
    			// 		startIndexRow: startIndexRow,
    			// 		endIndexCol: endIndexCol,
    			// 		endIndexRow: endIndexRow
    			// 	});
    			// 	//选中区域内所有单元格对象
    			// 	selectRegionCells = cells.getCellByX(startIndexCol, startIndexRow, endIndexCol, endIndexRow);
    			// 	headLineColList = headItemCols.models;
    			// 	headLineRowList = headItemRows.models;
    			// 	//删除position索引
    			// 	for (i = 0; i < endIndexCol - startIndexCol + 1; i++) {
    			// 		for (j = 0; j < endIndexRow - startIndexRow + 1; j++) {
    			// 			aliasCol = headLineColList[startIndexCol + i].get('alias');
    			// 			aliasRow = headLineRowList[startIndexRow + j].get('alias');
    			// 			this.deletePosi(aliasCol, aliasRow);
    			// 		}
    			// 	}
    			// 	len = selectRegionCells.length;
    			// 	for (i = 0; i < len; i++) {
    			// 		cacheCell = selectRegionCells[i].clone();
    			// 		selectRegionCells[i].set('isDestroy', true);
    			// 		this.splitCreateCell(cacheCell);
    			// 	}
    			// },
    			// /**
    			//  * 向后台发送合并请求
    			//  * @method sendData
    			//  * @param  {object} cfg 配置对象
    			//  */
    			// sendData: function(cfg) {
    			// 	//ajax action
    			// 	var data = {
    			// 		excelId: window.SPREADSHEET_AUTHENTIC_KEY,
    			// 		sheetId: $("#sheetId").val(),
    			// 		coordinate: {
    			// 			startX: cfg.startIndexCol,
    			// 			startY: cfg.startIndexRow,
    			// 			endX: cfg.endIndexCol,
    			// 			endY: cfg.endIndexRow
    			// 		}
    
    			// 	};
    			// 	send.PackAjax({
    			// 		url: 'cells.htm?m=merge_delete',
    			// 		data: JSON.stringify(data),
    			// 		success: function(data) {
    			// 			if (data === 200) {
    			// 				console.log('complete');
    			// 			}
    			// 		}
    			// 	});
    		},
    		/**
    		 * 拆分单元格时，每个合并区域，重新创建单元格
    		 * @method splitCreateCell
    		 * @param {Cell} cacheCell 合并区域单元格
    		 */
    		splitCreateCell: function(cacheCell) {
    
    		},
    		/**
    		 * 维护cache.CellsPosition，删除原有单元格记录
    		 * @method deletePosi
    		 * @param  {num} indexCol 列索引
    		 * @param  {num} indexRow 行索引
    		 */
    		deletePosi: function(aliasCol, aliasRow) {
    			var currentCellPosition = cache.CellsPosition,
    				currentStrandX = currentCellPosition.strandX,
    				currentStrandY = currentCellPosition.strandY;
    			if (currentStrandX[aliasCol] !== undefined && currentStrandX[aliasCol][aliasRow] !== undefined) {
    				delete currentStrandX[aliasCol][aliasRow];
    				if (!Object.getOwnPropertyNames(currentStrandX[aliasCol]).length) {
    					delete currentStrandX[aliasCol];
    				}
    			}
    			if (currentStrandY[aliasRow] !== undefined && currentStrandY[aliasRow][aliasCol] !== undefined) {
    				delete currentStrandY[aliasRow][aliasCol];
    				if (!Object.getOwnPropertyNames(currentStrandY[aliasRow]).length) {
    					delete currentStrandY[aliasRow];
    				}
    			}
    		},
    		/**
    		 * 维护cache.CellsPosition，存储单元格记录
    		 * @method setPosi
    		 * @param  {num} indexCol 列索引
    		 * @param  {num} indexRow 行索引
    		 * @param {num} index 记录索引
    		 */
    		setPosi: function(indexX, indexY, index) {
    			var temp = {};
    			if (cache.CellsPosition.strandX[indexX] === undefined) {
    				temp = {};
    				temp[indexY] = index;
    				cache.CellsPosition.strandX[indexX] = temp;
    			} else {
    				//更新对象
    				cache.CellsPosition.strandX[indexX][indexY] = index;
    			}
    			if (cache.CellsPosition.strandY[indexY] === undefined) {
    				temp = {};
    				temp[indexX] = index;
    				cache.CellsPosition.strandY[indexY] = temp;
    			} else {
    				//更新对象
    				cache.CellsPosition.strandY[indexY][indexX] = index;
    			}
    		}
    	});
    	return MergeCellContainer;
    });
    define('widgets/font/contentFontContainer',function() {
    	
    	var $=require('lib/jquery'),
    		_=require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		cells = require('collections/cells'),
    		selectRegions = require('collections/selectRegion'),
    		setFontWeight=require('entrance/tool/setFontWeight'),
    		setFontStyle=require('entrance/tool/setFontStyle');
    
    	/**
    	 * 设置字体功能监听类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class ContentFontContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var ContentFontContainer = Backbone.View.extend({
    		/**
    		 * @property {element} el
    		 */
    		el: '#contentFontContainer',
    		/**
    		 * @property {object} events
    		 */
    		events: {
    			/**
    			 * 设置字体属性
    			 * @event click
    			 */
    			'click span': 'setFontAction'
    		},
    		/**
    		 * 通过动作确定设置属性
    		 * @method setFontAction
    		 * @param  {event} e
    		 */
    		setFontAction: function(e) {
    			var tool = $(e.currentTarget).data('toolbar');
    
    			switch (tool) {
    				case 'bold':
    					this.setCellModelBold();
    					break;
    				case 'italic':
    					this.setCellModelItalic();
    					break;
    				default:
    					return;
    			}
    		},
    		/**
    		 * 设置字体加粗
    		 * @method setCellModelBold
    		 */
    		setCellModelBold: function() {
    			var startColIndex,
    				startRowIndex,
    				tempCell,
    				bold;
    			//获取起始单元格
    			setFontWeight('1');
    		},
    		/**
    		 * 设置字体倾斜
    		 * @method setCellModelItalic
    		 */
    		setCellModelItalic: function() {
    			var startColIndex,
    				startRowIndex,
    				tempCell,
    				italic;
    			//获取起始单元格
    			setFontStyle('1');
    		}
    	});
    	return ContentFontContainer;
    });
    define('widgets/frozen/frozenContainer',function() {
    	
    	var $ = require('lib/jquery'),
    		_ = require('lib/underscore'),
    		Backbone = require('lib/backbone'),
    		send = require('basic/tools/send'),
    		cache = require('basic/tools/cache'),
    		selectRegions = require('collections/selectRegion'),
    		headItemRows = require('collections/headItemRow'),
    		headItemCols = require('collections/headItemCol'),
    		setFrozen = require('entrance/sheet/setFrozen');
    
    	/**
    	 * 冻结功能视图类
    	 * @author ray wu
    	 * @since 0.1.0
    	 * @class frozenContainer  
    	 * @module views
    	 * @extends Backbone.View
    	 * @constructor
    	 */
    	var frozenContainer = Backbone.View.extend({
    		/**
    		 * @property {string} el 绑定视图
    		 */
    		el: "#frozen",
    		/**
    		 * @property {object} events 监听事件
    		 */
    		events: {
    			'mousedown li': 'transAction'
    		},
    		/**
    		 * 初始化函数
    		 * @method initialize
    		 */
    		initialize: function() {
    			Backbone.on('event:frozenContainer:changeState', this.changeState, this);
    			this.unfrozenBtn = $('li[data-frozen="unfrozen"]', this.$el);
    			this.customBtn = $('li[data-frozen="custom"]', this.$el);
    			this.changeState();
    		},
    		/**
    		 * 渲染本身对象
    		 * @method render
    		 */
    		render: function() {},
    		/**
    		 * 改变冻结状态
    		 * @method changeState
    		 */
    		changeState: function() {
    			if (cache.TempProp.isFrozen) {
    				this.unfrozenBtn.show();
    				this.customBtn.hide();
    			} else {
    				this.unfrozenBtn.hide();
    				this.customBtn.show();
    			}
    		},
    		/**
    		 * 监听冻结操作
    		 * @method transAction
    		 */
    		transAction: function(e) {
    			var frozenPositon = $(e.currentTarget).data('frozen');
    			setFrozen('1', frozenPositon);
    			// switch (frozenPositon) {
    			// 	case 'custom':
    			// 		this.setCustom();
    			// 		break;
    			// 	case 'row':
    			// 		this.setRow();
    			// 		break;
    			// 	case 'col':
    			// 		this.setCol();
    			// 		break;
    			// 	case 'unfrozen':
    			// 		this.setUnfrozen();
    			// 		break;
    			// }
    			this.changeState();
    		},
    		/**
    		 * 过滤超出用户可视区域操作
    		 * @method filterOutUserView
    		 */
    		filterOutUserView: function() {
    			var headItemRowList = headItemRows.models,
    				headItemColList = headItemCols.models,
    				firstSelectRegionModel = selectRegions.models[0],
    				splitColAlias = headItemColList[firstSelectRegionModel.get('initPosi').startX].get('alias'),
    				splitRowAlias = headItemRowList[firstSelectRegionModel.get('initPosi').startY].get('alias'),
    				splitColIndex = headItemCols.getIndexByAlias(splitColAlias),
    				splitRowIndex = headItemRows.getIndexByAlias(splitRowAlias),
    				userViewColIndex = headItemCols.getIndexByAlias(cache.UserView.colAlias),
    				userViewRowIndex = headItemRows.getIndexByAlias(cache.UserView.rowAlias),
    				userViewEndColIndex = headItemCols.getIndexByAlias(cache.UserView.colEndAlias),
    				userViewEndRowIndex = headItemRows.getIndexByAlias(cache.UserView.rowEndAlias);
    			//初始化，未进行滚动
    			if (userViewRowIndex === userViewEndRowIndex) {
    				return false;
    			} else if (splitColIndex < userViewColIndex || splitRowIndex < userViewRowIndex || splitColIndex > userViewEndColIndex || splitRowIndex > userViewEndRowIndex) {
    				return true;
    			} else {
    				return false;
    			}
    		},
    		/**
    		 * 执行自定义冻结
    		 * @method setCustom
    		 */
    		setCustom: function() {
    			if (this.filterOutUserView()) {
    				return;
    			}
    			var headItemRowList = headItemRows.models,
    				headItemColList = headItemCols.models,
    				firstSelectRegionModel = selectRegions.models[0],
    				splitColAlias = headItemColList[firstSelectRegionModel.get('initPosi').startX].get('alias'),
    				splitRowAlias = headItemRowList[firstSelectRegionModel.get('initPosi').startY].get('alias'),
    				splitColIndex = headItemCols.getIndexByAlias(splitColAlias),
    				splitRowIndex = headItemRows.getIndexByAlias(splitRowAlias);
    
    			cache.TempProp = {
    				isFrozen: true,
    				colAlias: splitColAlias,
    				rowAlias: splitRowAlias,
    				rowFrozen: true,
    				colFrozen: true
    			};
    
    			this.requestFrozen(splitColAlias, splitRowAlias, cache.UserView.colAlias, cache.UserView.rowAlias);
    		},
    		/**
    		 * 执行列冻结
    		 * @method setCustom
    		 */
    		setCol: function() {
    			var neighborModel = headItemCols.getNeighborModelByAlias(cache.UserView.colAlias, 'RIGHT');
    			cache.TempProp = {
    				isFrozen: true,
    				colAlias: neighborModel.get('alias'),
    				rowAlias: '1',
    				colFrozen: true
    			};
    			cache.UserView.rowAlias = '1';
    			this.requestFrozen(neighborModel.get('alias'), '1', cache.UserView.colAlias, cache.UserView.rowAlias);
    		},
    		/**
    		 * 执行行冻结
    		 * @method setCustom
    		 */
    		setRow: function() {
    			var neighborModel = headItemRows.getNeighborModelByAlias(cache.UserView.rowAlias, 'RIGHT');
    			cache.TempProp = {
    				isFrozen: true,
    				colAlias: '1',
    				rowAlias: neighborModel.get('alias'),
    				rowFrozen: true
    			};
    
    			cache.UserView.colAlias = '1';
    			this.requestFrozen('1', neighborModel.get('alias'), cache.UserView.colAlias, cache.UserView.rowAlias);
    		},
    		/**
    		 * 解除冻结
    		 * @method setUnfrozen
    		 */
    		setUnfrozen: function() {
    			cache.TempProp = {
    				isFrozen: false,
    				colAlias: '1',
    				rowAlias: '1'
    			};
    
    			this.requestUnfrozen();
    		},
    		/**
    		 * 绑定其他视图使用
    		 * @method callView
    		 */
    		callView: function(name) {
    			var self = this;
    			return function(callback) {
    				self[name] = callback;
    			};
    		},
    		/**
    		 * 向后台请求冻结操作
    		 * @method requestFrozen
    		 */
    		requestFrozen: function(frozenColAlias, frozenRowAlias, startColAlias, startRowAlias) {
    			var excelId = SPREADSHEET_AUTHENTIC_KEY,
    				sheetId = $("#sheetId").val();
    			send.PackAjax({
    				url: 'sheet.htm?m=frozen&excelId=' + excelId + '&sheetId=' + sheetId + '&frozenX=' + frozenColAlias + '&frozenY=' + frozenRowAlias + '&startX=' + startColAlias + '&startY=' + startRowAlias,
    				success: function(data) {
    					console.log('success');
    				}
    			});
    		},
    		/**
    		 * 向后台请求解除冻操作
    		 * @method requestUnfrozen
    		 */
    		requestUnfrozen: function() {
    			var excelId = window.SPREADSHEET_AUTHENTIC_KEY,
    				sheetId = $("#sheetId").val();
    			send.PackAjax({
    				url: 'sheet.htm?m=unFrozen&excelId=' + excelId + '&sheetId=' + sheetId,
    				success: function(data) {
    
    				}
    			});
    		}
    	});
    	return frozenContainer;
    });
    define('spreadsheet/excelbuild',function() {
    	
    
    	var original = require('basic/tools/original'),
    		domloader = require('basic/tools/template'),
    		listener = require('basic/util/listener'),
    		extend = require('basic/util/extend'),
    		setFontColor = require('entrance/tool/setFontColor'),
    		setFillColor = require('entrance/tool/setFillColor'),
    		setFontFamily = require('entrance/tool/setFontFamily'),
    		setCellHeight = require('entrance/cell/setCellHeight'),
    		setCellWidth = require('entrance/cell/setCellWidth'),
    		selectCell = require('entrance/cell/selectCell'),
    		mergeCell = require('entrance/tool/mergeCell'),
    		splitCell = require('entrance/tool/splitCell'),
    		setCellContent = require('entrance/tool/setCellContent'),
    		selectCellCols = require('entrance/cell/selectCellCols'),
    		selectCellRows = require('entrance/cell/selectCellRows'),
    		setCellBorder = require('entrance/tool/setCellBorder'),
    		setFontFamilySize = require('entrance/tool/setFontFamilySize'),
    		setFontWeight = require('entrance/tool/setFontWeight'),
    		setFontStyle = require('entrance/tool/setFontStyle'),
    		setFrozen = require('entrance/sheet/setFrozen'),
    		setAlign = require('entrance/tool/setAlign'),
    		setTextType = require('entrance/tool/setTextType'),
    		operationDataSourceRegion = require('entrance/selectregion/dataSourceRegionOperation'),
    		getPointByPosi = require('entrance/sheet/getPointByPosi'),
    		setWordWrap = require('entrance/tool/setWordWrap'),
    		getTextByCoordinate = require('entrance/cell/getTextByCoordinate'),
    		adaptScreen = require('entrance/sheet/adaptScreen'),
    		getFrozenState = require('entrance/sheet/getFrozenState'),
    		getSelectRegion = require('entrance/sheet/getSelectRegion'),
    		highlight= require('entrance/extention/highlight'),
    		reloadCells= require('entrance/cell/reloadCells');
    
    
    
    	var excelBuild = {
    		buildDom: function(id) {
    			domloader(id);
    		},
    		buildExcelOriginalData: function() {
    			original.restoreExcel();
    		},
    		buildExcelView: function(id) {
    			var Screen = require('views/screen');
    			new Screen();
    		},
    		buildExcelToolbar: function() {
    			var ShearPlateContainer = require('widgets/clipboard/shearPlateContainer'),
    				FontFamilyContainer = require('widgets/font/fontFamilyContainer'),
    				FontSizeContainer = require('widgets/font/fontSizeContainer'),
    				BorderContainer = require('widgets/celloperation/borderContainer'),
    				FillColorContainer = require('widgets/celloperation/fillColorContainer'),
    				FontColorContainer = require('widgets/font/fontColorContainer'),
    				ContentAlignContainer = require('widgets/align/contentAlignContainer'),
    				TextFormatContainer = require('widgets/cellformat/textFormatContainer'),
    				MergeCellContainer = require('widgets/celloperation/mergeCellContainer'),
    				ContentFontContainer = require('widgets/font/contentFontContainer'),
    				FrozenContainer = require('widgets/frozen/frozenContainer');
    			new ShearPlateContainer();
    			new FontFamilyContainer();
    			new FontSizeContainer();
    			new BorderContainer();
    			new FillColorContainer();
    			new FontColorContainer();
    			new ContentAlignContainer();
    			new TextFormatContainer();
    			new MergeCellContainer();
    			new ContentFontContainer();
    			new FrozenContainer();
    		},
    		buildExcelPublicAPI: function(SpreadSheet) {
    			SpreadSheet.prototype.setFontColor = setFontColor;
    			SpreadSheet.prototype.setFillColor = setFillColor;
    			SpreadSheet.prototype.setFontFamily = setFontFamily;
    			SpreadSheet.prototype.setCellHeight = setCellHeight;
    			SpreadSheet.prototype.selectCell = selectCell;
    			SpreadSheet.prototype.mergeCell = mergeCell;
    			SpreadSheet.prototype.splitCell = splitCell;
    			SpreadSheet.prototype.setCellBorder = setCellBorder;
    			SpreadSheet.prototype.setCellContent = setCellContent;
    			SpreadSheet.prototype.setAlign = setAlign;
    			SpreadSheet.prototype.selectCellCols = selectCellCols;
    			SpreadSheet.prototype.selectCellRows = selectCellRows;
    			SpreadSheet.prototype.setCellWidth = setCellWidth;
    			SpreadSheet.prototype.setFontFamilySize = setFontFamilySize;
    			SpreadSheet.prototype.setFontStyle = setFontStyle;
    			SpreadSheet.prototype.setFontWeight = setFontWeight;
    			SpreadSheet.prototype.setFrozen = setFrozen;
    			SpreadSheet.prototype.setTextType = setTextType;
    			SpreadSheet.prototype.getPointByPosi = getPointByPosi;
    			SpreadSheet.prototype.adaptScreen = adaptScreen;
    			SpreadSheet.prototype.getTextByCoordinate = getTextByCoordinate;
    			SpreadSheet.prototype.getFrozenState = getFrozenState;
    			SpreadSheet.prototype.setWordWrap = setWordWrap;
    			SpreadSheet.prototype.getSelectRegion = getSelectRegion;
    			SpreadSheet.prototype.reloadCells = reloadCells;
    		},
    		buildDataSourceOperation: function(SpreadSheet) {
    			SpreadSheet.prototype.setDataSourceRegion = operationDataSourceRegion.setDataSourceRegion;
    			SpreadSheet.prototype.setSelectRegion = operationDataSourceRegion.setSelectRegion;
    			SpreadSheet.prototype.destroyDataSoureRegion = operationDataSourceRegion.destroyDataSoureRegion;
    		},
    		buildExcelEventListener: function(SpreadSheet) {
    			SpreadSheet.prototype.addEventListener = listener.addEventListener;
    			SpreadSheet.prototype.removeEventListener = listener.removeEventListener;
    		},
    		buildExcelExtend: function(SpreadSheet) {
    			SpreadSheet.prototype.startHighlight = highlight.startHighlight;
    			SpreadSheet.prototype.stopHighlight = highlight.stopHighlight;
    			
    		}
    	};
    	return excelBuild;
    });
    define('spreadsheet/spreadsheet',function() {
    	
    	var $ = require('lib/jquery'),
    		template = require('basic/tools/template'),
    		config = require('spreadsheet/config'),
    		excelBuild = require('spreadsheet/excelbuild');
    
    	function SpreadSheet(cfg) {
    		if (cfg !== undefined && window.SPREADSHEET_BUILD_STATE === true) {
    			config.User.initRowNum = cfg.initRowNum || config.User.initRowNum;
    			config.User.initColNum = cfg.initColNum || config.User.initColNum;
    			config.User.cellWidth = cfg.cellWidth || config.User.cellWidth;
    			config.User.cellHeight = cfg.cellHeight || config.User.cellHeight;
    			config.User.maxColNum = cfg.maxColNum || config.User.maxColNum;
    			config.User.maxRowNum = cfg.maxRowNum || config.User.maxRowNum;
    		}
    		template('#spreadSheet');
    		excelBuild.buildExcelOriginalData();
    		excelBuild.buildExcelView();
    		excelBuild.buildExcelPublicAPI(SpreadSheet);
    		excelBuild.buildDataSourceOperation(SpreadSheet);
    		excelBuild.buildExcelEventListener(SpreadSheet);
    		
    	}
    	return SpreadSheet;
    });
    return require('spreadsheet/spreadsheet');
});
